[{"filePath":"d:\\All python project\\Tubex\\Frontend\\app\\src\\App.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"d:\\All python project\\Tubex\\Frontend\\app\\src\\components\\auth\\AuthGuard.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'auth'. Either include it or remove the dependency array.","line":59,"column":6,"nodeType":"ArrayExpression","endLine":59,"endColumn":62,"suggestions":[{"desc":"Update the dependencies array to be: [auth.loading, auth.isAuthenticated, auth.validateToken, auth]","fix":{"range":[1846,1902],"text":"[auth.loading, auth.isAuthenticated, auth.validateToken, auth]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useEffect, useState } from 'react';\r\nimport { Navigate, useLocation } from 'react-router-dom';\r\nimport { useAuth } from '../../contexts/AuthContext';\r\nimport { Box, CircularProgress, Typography } from '@mui/material';\r\nimport { authService } from '../../services/api';\r\n\r\ninterface AuthGuardProps {\r\n  children: React.ReactNode;\r\n}\r\n\r\nconst AuthGuard: React.FC<AuthGuardProps> = ({ children }) => {\r\n  const auth = useAuth();\r\n  const location = useLocation();\r\n  const [isValidating, setIsValidating] = useState(true);\r\n  const [isValid, setIsValid] = useState(false);\r\n\r\n  // Log auth state for debugging\r\n  useEffect(() => {\r\n    console.log(\"AuthGuard - Auth state:\", { \r\n      isAuthenticated: auth.isAuthenticated,\r\n      user: auth.user,\r\n      loading: auth.loading,\r\n      path: location.pathname\r\n    });\r\n  }, [auth, location]);\r\n\r\n  // Validate auth on mount and when auth state changes\r\n  useEffect(() => {\r\n    const checkAuth = async () => {\r\n      setIsValidating(true);\r\n      try {\r\n        // Basic checks first\r\n        const hasToken = !!localStorage.getItem('access_token');\r\n        console.log(\"AuthGuard - Token existence check:\", hasToken);\r\n        \r\n        if (!hasToken) {\r\n          setIsValid(false);\r\n          return;\r\n        }\r\n        \r\n        // Use auth context if available, fall back to service\r\n        const valid = auth.validateToken \r\n          ? await auth.validateToken()\r\n          : await authService.validateToken();\r\n          \r\n        console.log(\"AuthGuard - Token validation result:\", valid);\r\n        setIsValid(valid);\r\n      } catch (error) {\r\n        console.error('AuthGuard - Token validation error:', error);\r\n        setIsValid(false);\r\n      } finally {\r\n        setIsValidating(false);\r\n      }\r\n    };\r\n\r\n    if (!auth.loading) {\r\n      checkAuth();\r\n    }\r\n  }, [auth.loading, auth.isAuthenticated, auth.validateToken]);\r\n\r\n  // Handle auth:required events from apiClient\r\n  useEffect(() => {\r\n    const handleAuthRequired = (event: Event) => {\r\n      console.log('AuthGuard - Received auth:required event', \r\n        (event as CustomEvent).detail);\r\n      setIsValid(false);\r\n    };\r\n\r\n    window.addEventListener('auth:required', handleAuthRequired);\r\n    return () => {\r\n      window.removeEventListener('auth:required', handleAuthRequired);\r\n    };\r\n  }, []);\r\n\r\n  // Show loading state while checking auth\r\n  if (auth.loading || isValidating) {\r\n    return (\r\n      <Box sx={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height: '100vh' }}>\r\n        <Box sx={{ textAlign: 'center' }}>\r\n          <CircularProgress />\r\n          <Typography variant=\"body1\" sx={{ mt: 2 }}>\r\n            Verifying authentication...\r\n          </Typography>\r\n        </Box>\r\n      </Box>\r\n    );\r\n  }\r\n\r\n  // Redirect to login if not authenticated\r\n  if (!auth.isAuthenticated || !isValid) {\r\n    console.log(\"AuthGuard - Authentication failed, redirecting to login\");\r\n    return <Navigate to=\"/login\" state={{ from: location.pathname }} replace />;\r\n  }\r\n\r\n  // User is authenticated, render children\r\n  console.log(\"AuthGuard - Authentication successful, rendering protected content\");\r\n  return <>{children}</>;\r\n};\r\n\r\nexport default AuthGuard;\r\n","usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"d:\\All python project\\Tubex\\Frontend\\app\\src\\components\\auth\\AuthRoute.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"d:\\All python project\\Tubex\\Frontend\\app\\src\\components\\auth\\ForgotPassword.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'navigate' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":16,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":16,"endColumn":17}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\r\nimport { \r\n  Box, \r\n  Paper, \r\n  Typography, \r\n  TextField, \r\n  Button, \r\n  CircularProgress, \r\n  Alert, \r\n  Link as MuiLink\r\n} from '@mui/material';\r\nimport { Link, useNavigate } from 'react-router-dom';\r\nimport { authService } from '../../services/api/authService';\r\n\r\nconst ForgotPassword: React.FC = () => {\r\n  const navigate = useNavigate();\r\n  \r\n  const [email, setEmail] = useState('');\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState<string | null>(null);\r\n  const [success, setSuccess] = useState<string | null>(null);\r\n  \r\n  const handleSubmit = async (e: React.FormEvent) => {\r\n    e.preventDefault();\r\n    \r\n    if (!email.trim() || !email.includes('@')) {\r\n      setError('Please enter a valid email address');\r\n      return;\r\n    }\r\n    \r\n    setLoading(true);\r\n    setError(null);\r\n    setSuccess(null);\r\n    \r\n    try {\r\n      const response = await authService.forgotPassword({ email });\r\n      \r\n      if (response.success) {\r\n        setSuccess('Password reset instructions have been sent to your email address');\r\n      } else {\r\n        setError('Failed to request password reset. Please try again.');\r\n      }\r\n    } catch (err: any) {\r\n      setError(err.message || 'Failed to request password reset. Please try again.');\r\n      console.error('Forgot password error:', err);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n  \r\n  return (\r\n    <Box\r\n      sx={{\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignItems: 'center',\r\n        maxWidth: '500px',\r\n        mx: 'auto',\r\n        py: 4\r\n      }}\r\n    >\r\n      <Paper sx={{ p: 3, width: '100%' }}>\r\n        <Typography variant=\"h5\" component=\"h1\" align=\"center\" gutterBottom>\r\n          Forgot Password\r\n        </Typography>\r\n        \r\n        <Typography variant=\"body2\" align=\"center\" color=\"text.secondary\" paragraph>\r\n          Enter your email address and we'll send you instructions to reset your password.\r\n        </Typography>\r\n        \r\n        {error && (\r\n          <Alert severity=\"error\" sx={{ mb: 3 }}>\r\n            {error}\r\n          </Alert>\r\n        )}\r\n        \r\n        {success && (\r\n          <Alert severity=\"success\" sx={{ mb: 3 }}>\r\n            {success}\r\n          </Alert>\r\n        )}\r\n        \r\n        <Box component=\"form\" onSubmit={handleSubmit} sx={{ mt: 2 }}>\r\n          <TextField\r\n            margin=\"normal\"\r\n            required\r\n            fullWidth\r\n            id=\"email\"\r\n            label=\"Email Address\"\r\n            name=\"email\"\r\n            autoComplete=\"email\"\r\n            autoFocus\r\n            value={email}\r\n            onChange={(e) => setEmail(e.target.value)}\r\n            disabled={loading || !!success}\r\n          />\r\n          \r\n          <Button\r\n            type=\"submit\"\r\n            fullWidth\r\n            variant=\"contained\"\r\n            sx={{ mt: 3, mb: 2 }}\r\n            disabled={loading || !!success}\r\n          >\r\n            {loading ? <CircularProgress size={24} /> : 'Send Reset Link'}\r\n          </Button>\r\n          \r\n          <Box sx={{ mt: 2, textAlign: 'center' }}>\r\n            <Typography variant=\"body2\">\r\n              Remember your password?{' '}\r\n              <MuiLink component={Link} to=\"/login\" underline=\"hover\">\r\n                Back to login\r\n              </MuiLink>\r\n            </Typography>\r\n          </Box>\r\n        </Box>\r\n      </Paper>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default ForgotPassword;\r\n","usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"d:\\All python project\\Tubex\\Frontend\\app\\src\\components\\auth\\JoinByInvitation.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'codeValid' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":50,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":50,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'companyId' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":51,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":51,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'setCompanyId' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":51,"column":21,"nodeType":"Identifier","messageId":"unusedVar","endLine":51,"endColumn":33},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has missing dependencies: 'invitationCode' and 'validateCode'. Either include them or remove the dependency array.","line":58,"column":6,"nodeType":"ArrayExpression","endLine":58,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [invitationCode, validateCode]","fix":{"range":[2001,2003],"text":"[invitationCode, validateCode]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\r\nimport { \r\n  Box, \r\n  Paper, \r\n  Typography, \r\n  TextField, \r\n  Button, \r\n  CircularProgress, \r\n  Alert, \r\n  Stepper, \r\n  Step, \r\n  StepLabel,\r\n  InputAdornment,\r\n  IconButton\r\n} from '@mui/material';\r\nimport { Visibility, VisibilityOff } from '@mui/icons-material';\r\nimport { useNavigate, useLocation } from 'react-router-dom';\r\nimport { authService } from '../../services/api';\r\n\r\ninterface JoinByInvitationProps {\r\n  onRegisterSuccess?: (userData: any) => void;\r\n}\r\n\r\nconst JoinByInvitation: React.FC<JoinByInvitationProps> = ({ onRegisterSuccess }) => {\r\n  const navigate = useNavigate();\r\n  const location = useLocation();\r\n  \r\n  // Get code from URL query parameter if available\r\n  const urlParams = new URLSearchParams(location.search);\r\n  const codeFromUrl = urlParams.get('code');\r\n  \r\n  // Form state\r\n  const [invitationCode, setInvitationCode] = useState(codeFromUrl || '');\r\n  const [email, setEmail] = useState('');\r\n  const [password, setPassword] = useState('');\r\n  const [confirmPassword, setConfirmPassword] = useState('');\r\n  const [firstName, setFirstName] = useState('');\r\n  const [lastName, setLastName] = useState('');\r\n  const [jobTitle, setJobTitle] = useState('');\r\n  const [department, setDepartment] = useState('');\r\n  const [employeeId, setEmployeeId] = useState('');\r\n  const [showPassword, setShowPassword] = useState(false);\r\n  \r\n  // UI state\r\n  const [activeStep, setActiveStep] = useState(0);\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState<string | null>(null);\r\n  const [verifying, setVerifying] = useState(false);\r\n  const [companyName, setCompanyName] = useState<string | null>(null);\r\n  const [codeValid, setCodeValid] = useState(false);\r\n  const [companyId, setCompanyId] = useState<string | null>(null);\r\n  \r\n  // Validate the invitation code on component mount if code is provided\r\n  useEffect(() => {\r\n    if (invitationCode) {\r\n      validateCode();\r\n    }\r\n  }, []);\r\n  \r\n  const validateCode = async () => {\r\n    if (!invitationCode.trim()) {\r\n      setError('Please enter an invitation code');\r\n      return;\r\n    }\r\n    \r\n    setVerifying(true);\r\n    setError(null);\r\n    \r\n    try {\r\n      const response = await authService.validateInvitationCode(invitationCode);\r\n      \r\n      if (response.valid) {\r\n        setCompanyName(response.companyName || null);\r\n        setCodeValid(true);\r\n        setActiveStep(1);\r\n      } else {\r\n        setError('Invalid or expired invitation code. Please contact your administrator.');\r\n      }\r\n    } catch (err: any) {\r\n      setError('Failed to verify invitation code. Please try again.');\r\n      console.error('Error validating invitation code:', err);\r\n    } finally {\r\n      setVerifying(false);\r\n    }\r\n  };\r\n  \r\n  const handleNext = () => {\r\n    setError(null);\r\n    \r\n    if (activeStep === 0) {\r\n      validateCode();\r\n    } else if (activeStep === 1) {\r\n      if (validatePersonalInfo()) {\r\n        setActiveStep(2);\r\n      }\r\n    } else if (activeStep === 2) {\r\n      if (validateEmploymentInfo()) {\r\n        handleRegistration();\r\n      }\r\n    }\r\n  };\r\n  \r\n  const handleBack = () => {\r\n    setActiveStep((prevStep) => prevStep - 1);\r\n  };\r\n  \r\n  const validatePersonalInfo = () => {\r\n    if (!email.trim()) {\r\n      setError('Email is required');\r\n      return false;\r\n    } else if (!email.includes('@')) {\r\n      setError('Please enter a valid email address');\r\n      return false;\r\n    }\r\n    \r\n    if (!password) {\r\n      setError('Password is required');\r\n      return false;\r\n    } else if (password.length < 8) {\r\n      setError('Password must be at least 8 characters long');\r\n      return false;\r\n    }\r\n    \r\n    if (password !== confirmPassword) {\r\n      setError('Passwords do not match');\r\n      return false;\r\n    }\r\n    \r\n    if (!firstName.trim() || !lastName.trim()) {\r\n      setError('First and last name are required');\r\n      return false;\r\n    }\r\n    \r\n    return true;\r\n  };\r\n  \r\n  const validateEmploymentInfo = () => {\r\n    if (!jobTitle.trim()) {\r\n      setError('Job title is required');\r\n      return false;\r\n    }\r\n    \r\n    if (!department.trim()) {\r\n      setError('Department is required');\r\n      return false;\r\n    }\r\n    \r\n    return true;\r\n  };\r\n  \r\n  const handleRegistration = async () => {\r\n    setLoading(true);\r\n    setError(null);\r\n    \r\n    try {\r\n      const response = await authService.registerEmployee({\r\n        email,\r\n        password,\r\n        firstName,\r\n        lastName,\r\n        jobTitle,\r\n        department,\r\n        employeeId,\r\n        companyId: '', // The API will extract this from the invitation code\r\n        invitationCode\r\n      });\r\n      \r\n      if (response.data.requiresVerification) {\r\n        // Redirect to a pending approval page\r\n        navigate('/auth/pending-approval', { state: { email } });\r\n      } else {\r\n        // Direct login successful\r\n        if (onRegisterSuccess) {\r\n          onRegisterSuccess(response.data);\r\n        }\r\n        navigate('/dashboard');\r\n      }\r\n    } catch (err: any) {\r\n      setError(err.message || 'Failed to complete registration. Please try again.');\r\n      console.error('Error during employee registration:', err);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n  \r\n  const handleTogglePasswordVisibility = () => {\r\n    setShowPassword((prev) => !prev);\r\n  };\r\n  \r\n  // Render different form steps\r\n  const renderCodeVerification = () => (\r\n    <Box>\r\n      <Typography variant=\"h6\" gutterBottom>\r\n        Join Your Company\r\n      </Typography>\r\n      <Typography variant=\"body2\" color=\"text.secondary\" paragraph>\r\n        Enter the invitation code provided by your company administrator.\r\n      </Typography>\r\n      \r\n      <TextField\r\n        margin=\"normal\"\r\n        fullWidth\r\n        label=\"Invitation Code\"\r\n        value={invitationCode}\r\n        onChange={(e) => setInvitationCode(e.target.value)}\r\n        disabled={verifying}\r\n        autoFocus\r\n      />\r\n      \r\n      <Box sx={{ mt: 3, display: 'flex', justifyContent: 'flex-end' }}>\r\n        <Button\r\n          variant=\"contained\"\r\n          color=\"primary\"\r\n          onClick={handleNext}\r\n          disabled={verifying}\r\n        >\r\n          {verifying ? <CircularProgress size={24} /> : 'Verify Code'}\r\n        </Button>\r\n      </Box>\r\n    </Box>\r\n  );\r\n  \r\n  const renderPersonalInfo = () => (\r\n    <Box>\r\n      <Typography variant=\"h6\" gutterBottom>\r\n        Personal Information\r\n      </Typography>\r\n      {companyName && (\r\n        <Typography variant=\"body1\" paragraph>\r\n          You're joining <strong>{companyName}</strong>\r\n        </Typography>\r\n      )}\r\n      \r\n      <TextField\r\n        margin=\"normal\"\r\n        fullWidth\r\n        label=\"Email Address\"\r\n        value={email}\r\n        onChange={(e) => setEmail(e.target.value)}\r\n        type=\"email\"\r\n        disabled={loading}\r\n        required\r\n      />\r\n      \r\n      <TextField\r\n        margin=\"normal\"\r\n        fullWidth\r\n        label=\"Password\"\r\n        value={password}\r\n        onChange={(e) => setPassword(e.target.value)}\r\n        type={showPassword ? 'text' : 'password'}\r\n        disabled={loading}\r\n        required\r\n        InputProps={{\r\n          endAdornment: (\r\n            <InputAdornment position=\"end\">\r\n              <IconButton\r\n                aria-label=\"toggle password visibility\"\r\n                onClick={handleTogglePasswordVisibility}\r\n                edge=\"end\"\r\n              >\r\n                {showPassword ? <VisibilityOff /> : <Visibility />}\r\n              </IconButton>\r\n            </InputAdornment>\r\n          ),\r\n        }}\r\n      />\r\n      \r\n      <TextField\r\n        margin=\"normal\"\r\n        fullWidth\r\n        label=\"Confirm Password\"\r\n        value={confirmPassword}\r\n        onChange={(e) => setConfirmPassword(e.target.value)}\r\n        type={showPassword ? 'text' : 'password'}\r\n        disabled={loading}\r\n        required\r\n      />\r\n      \r\n      <Box sx={{ display: 'flex', gap: 2, mt: 2 }}>\r\n        <TextField\r\n          margin=\"normal\"\r\n          fullWidth\r\n          label=\"First Name\"\r\n          value={firstName}\r\n          onChange={(e) => setFirstName(e.target.value)}\r\n          disabled={loading}\r\n          required\r\n        />\r\n        \r\n        <TextField\r\n          margin=\"normal\"\r\n          fullWidth\r\n          label=\"Last Name\"\r\n          value={lastName}\r\n          onChange={(e) => setLastName(e.target.value)}\r\n          disabled={loading}\r\n          required\r\n        />\r\n      </Box>\r\n      \r\n      <Box sx={{ mt: 3, display: 'flex', justifyContent: 'space-between' }}>\r\n        <Button onClick={handleBack} disabled={loading}>\r\n          Back\r\n        </Button>\r\n        <Button\r\n          variant=\"contained\"\r\n          color=\"primary\"\r\n          onClick={handleNext}\r\n          disabled={loading}\r\n        >\r\n          Next\r\n        </Button>\r\n      </Box>\r\n    </Box>\r\n  );\r\n  \r\n  const renderEmploymentInfo = () => (\r\n    <Box>\r\n      <Typography variant=\"h6\" gutterBottom>\r\n        Employment Information\r\n      </Typography>\r\n      \r\n      <TextField\r\n        margin=\"normal\"\r\n        fullWidth\r\n        label=\"Job Title\"\r\n        value={jobTitle}\r\n        onChange={(e) => setJobTitle(e.target.value)}\r\n        disabled={loading}\r\n        required\r\n      />\r\n      \r\n      <TextField\r\n        margin=\"normal\"\r\n        fullWidth\r\n        label=\"Department\"\r\n        value={department}\r\n        onChange={(e) => setDepartment(e.target.value)}\r\n        disabled={loading}\r\n        required\r\n      />\r\n      \r\n      <TextField\r\n        margin=\"normal\"\r\n        fullWidth\r\n        label=\"Employee ID (Optional)\"\r\n        value={employeeId}\r\n        onChange={(e) => setEmployeeId(e.target.value)}\r\n        disabled={loading}\r\n      />\r\n      \r\n      <Box sx={{ mt: 3, display: 'flex', justifyContent: 'space-between' }}>\r\n        <Button onClick={handleBack} disabled={loading}>\r\n          Back\r\n        </Button>\r\n        <Button\r\n          variant=\"contained\"\r\n          color=\"primary\"\r\n          onClick={handleNext}\r\n          disabled={loading}\r\n        >\r\n          {loading ? <CircularProgress size={24} /> : 'Complete Registration'}\r\n        </Button>\r\n      </Box>\r\n    </Box>\r\n  );\r\n  \r\n  return (\r\n    <Box\r\n      sx={{\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignItems: 'center',\r\n        maxWidth: '600px',\r\n        mx: 'auto',\r\n        py: 4\r\n      }}\r\n    >\r\n      <Paper sx={{ p: 3, width: '100%' }}>\r\n        <Stepper activeStep={activeStep} sx={{ mb: 4 }}>\r\n          <Step>\r\n            <StepLabel>Invitation</StepLabel>\r\n          </Step>\r\n          <Step>\r\n            <StepLabel>Personal Info</StepLabel>\r\n          </Step>\r\n          <Step>\r\n            <StepLabel>Employment Info</StepLabel>\r\n          </Step>\r\n        </Stepper>\r\n        \r\n        {error && (\r\n          <Alert severity=\"error\" sx={{ mb: 3 }}>\r\n            {error}\r\n          </Alert>\r\n        )}\r\n        \r\n        {activeStep === 0 && renderCodeVerification()}\r\n        {activeStep === 1 && renderPersonalInfo()}\r\n        {activeStep === 2 && renderEmploymentInfo()}\r\n      </Paper>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default JoinByInvitation;","usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"d:\\All python project\\Tubex\\Frontend\\app\\src\\components\\auth\\Login.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"d:\\All python project\\Tubex\\Frontend\\app\\src\\components\\auth\\ProtectedRoute.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"d:\\All python project\\Tubex\\Frontend\\app\\src\\components\\auth\\Register.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"d:\\All python project\\Tubex\\Frontend\\app\\src\\components\\auth\\ResetPassword.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"d:\\All python project\\Tubex\\Frontend\\app\\src\\components\\common\\Breadcrumbs.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"d:\\All python project\\Tubex\\Frontend\\app\\src\\components\\common\\ErrorBoundary.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"d:\\All python project\\Tubex\\Frontend\\app\\src\\components\\common\\LoadingSpinner.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"d:\\All python project\\Tubex\\Frontend\\app\\src\\components\\common\\MockApiToggle.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'useEffect' is defined but never used. Allowed unused vars must match /^_/u.","line":1,"column":27,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":36}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\r\nimport { Box, FormControlLabel, Switch, Snackbar, Alert, Typography, Paper } from '@mui/material';\r\nimport { toggleMockApi, isMockApiEnabled } from '../../services/api/apiClient';\r\n\r\nconst MockApiToggle: React.FC = () => {\r\n  const [isMockEnabled, setIsMockEnabled] = useState(isMockApiEnabled);\r\n  const [showNotification, setShowNotification] = useState(false);\r\n  const [notificationMessage, setNotificationMessage] = useState('');\r\n\r\n  const handleToggle = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    const isEnabled = event.target.checked;\r\n    toggleMockApi(isEnabled);\r\n    setIsMockEnabled(isEnabled);\r\n    setNotificationMessage(`API is now using ${isEnabled ? 'mock' : 'real'} data`);\r\n    setShowNotification(true);\r\n  };\r\n\r\n  const handleCloseNotification = () => {\r\n    setShowNotification(false);\r\n  };\r\n\r\n  return (\r\n    <Paper \r\n      elevation={1} \r\n      sx={{\r\n        position: 'fixed',\r\n        bottom: 16,\r\n        right: 16,\r\n        padding: 2,\r\n        zIndex: 1000,\r\n        backgroundColor: 'rgba(255, 255, 255, 0.9)',\r\n        backdropFilter: 'blur(5px)',\r\n        border: '1px solid #eee',\r\n        borderRadius: 2\r\n      }}\r\n    >\r\n      <Box sx={{ display: 'flex', alignItems: 'center', flexDirection: 'column' }}>\r\n        <Typography variant=\"subtitle2\" color=\"text.secondary\" mb={1}>\r\n          Development Mode\r\n        </Typography>\r\n        <FormControlLabel\r\n          control={\r\n            <Switch \r\n              checked={isMockEnabled}\r\n              onChange={handleToggle}\r\n              color=\"primary\"\r\n            />\r\n          }\r\n          label={isMockEnabled ? \"Using Mock API\" : \"Using Real API\"}\r\n        />\r\n      </Box>\r\n      \r\n      <Snackbar\r\n        open={showNotification}\r\n        autoHideDuration={3000}\r\n        onClose={handleCloseNotification}\r\n        anchorOrigin={{ vertical: 'bottom', horizontal: 'center' }}\r\n      >\r\n        <Alert onClose={handleCloseNotification} severity=\"info\" sx={{ width: '100%' }}>\r\n          {notificationMessage}\r\n        </Alert>\r\n      </Snackbar>\r\n    </Paper>\r\n  );\r\n};\r\n\r\nexport default MockApiToggle;\r\n","usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"d:\\All python project\\Tubex\\Frontend\\app\\src\\components\\common\\TableSkeleton.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"d:\\All python project\\Tubex\\Frontend\\app\\src\\components\\examples\\OptimizedComponent.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'useState' is defined but never used. Allowed unused vars must match /^_/u.","line":1,"column":17,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":25},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Card' is defined but never used. Allowed unused vars must match /^_/u.","line":7,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":7,"endColumn":7},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'CardContent' is defined but never used. Allowed unused vars must match /^_/u.","line":8,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":8,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'CardActions' is defined but never used. Allowed unused vars must match /^_/u.","line":9,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":9,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Divider' is defined but never used. Allowed unused vars must match /^_/u.","line":10,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":10,"endColumn":10},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'CircularProgress' is defined but never used. Allowed unused vars must match /^_/u.","line":12,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":12,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'data' is defined but never used. Allowed unused args must match /^_/u.","line":90,"column":19,"nodeType":"Identifier","messageId":"unusedVar","endLine":90,"endColumn":23},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'dataRequest'. Either include it or remove the dependency array.","line":127,"column":6,"nodeType":"ArrayExpression","endLine":127,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [dataRequest]","fix":{"range":[3406,3408],"text":"[dataRequest]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'tableData'. Either include it or remove the dependency array.","line":132,"column":6,"nodeType":"ArrayExpression","endLine":132,"endColumn":88,"suggestions":[{"desc":"Update the dependencies array to be: [tableData.page, tableData.sortBy, tableData.sortDirection, tableData.searchQuery, tableData]","fix":{"range":[3519,3601],"text":"[tableData.page, tableData.sortBy, tableData.sortDirection, tableData.searchQuery, tableData]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\r\nimport {\r\n  Box,\r\n  Paper,\r\n  Typography,\r\n  Button,\r\n  Card,\r\n  CardContent,\r\n  CardActions,\r\n  Divider,\r\n  TextField,\r\n  CircularProgress\r\n} from '@mui/material';\r\n\r\n// Import our custom hooks and components\r\nimport SearchField from '../ui/SearchField';\r\nimport { useNotificationContext } from '../../contexts/NotificationContext';\r\nimport useApiRequest from '../../hooks/useApiRequest';\r\nimport useTableData from '../../hooks/useTableData';\r\nimport useForm from '../../hooks/useForm';\r\n\r\n// Example form interface\r\ninterface ExampleFormData {\r\n  title: string;\r\n  description: string;\r\n  category: string;\r\n}\r\n\r\n/**\r\n * Example component demonstrating the use of our optimized hooks and components\r\n */\r\nconst OptimizedComponent: React.FC = () => {\r\n  // Use the notification context\r\n  const { success, error, info } = useNotificationContext();\r\n  \r\n  // Example form with validation\r\n  const exampleForm = useForm<ExampleFormData>({\r\n    initialValues: {\r\n      title: '',\r\n      description: '',\r\n      category: 'general'\r\n    },\r\n    validate: (values) => {\r\n      const errors: Partial<Record<keyof ExampleFormData, string>> = {};\r\n      \r\n      if (!values.title.trim()) {\r\n        errors.title = 'Title is required';\r\n      }\r\n      \r\n      if (!values.description.trim()) {\r\n        errors.description = 'Description is required';\r\n      }\r\n      \r\n      return errors;\r\n    },\r\n    onSubmit: async (values) => {\r\n      try {\r\n        // This would be an actual API call in a real component\r\n        console.log('Submitting form data:', values);\r\n        \r\n        // Show success notification\r\n        success('Form submitted successfully!');\r\n        \r\n        // Reset the form\r\n        exampleForm.resetForm();\r\n      } catch (err) {\r\n        // Show error notification\r\n        error('Failed to submit form. Please try again.');\r\n        console.error('Form submission error:', err);\r\n      }\r\n    }\r\n  });\r\n  \r\n  // Example API request\r\n  const dataRequest = useApiRequest(\r\n    async () => {\r\n      // This would be an actual API call in a real component\r\n      // Simulating API call with timeout\r\n      return new Promise((resolve) => {\r\n        setTimeout(() => {\r\n          resolve({\r\n            data: [{ id: 1, name: 'Item 1' }, { id: 2, name: 'Item 2' }],\r\n            totalCount: 2\r\n          });\r\n        }, 1000);\r\n      });\r\n    },\r\n    [],\r\n    {\r\n      onSuccess: (data) => {\r\n        success('Data loaded successfully');\r\n      },\r\n      onError: (err) => {\r\n        error(`Failed to load data: ${err.message}`);\r\n      }\r\n    }\r\n  );\r\n  \r\n  // Example table data\r\n  const tableData = useTableData({\r\n    defaultSortBy: 'id',\r\n    defaultSortDirection: 'asc',\r\n    fetchDataFn: async (params) => {\r\n      // This would call an actual API with the params\r\n      console.log('Fetching table data with params:', params);\r\n      \r\n      // Simulating API response\r\n      return {\r\n        data: [\r\n          { id: 1, name: 'Record 1', category: 'A' },\r\n          { id: 2, name: 'Record 2', category: 'B' }\r\n        ],\r\n        totalCount: 2\r\n      };\r\n    }\r\n  });\r\n  \r\n  // Handle search\r\n  const handleSearch = (query: string) => {\r\n    info(`Searching for: ${query}`);\r\n    tableData.handleSearchQueryChange(query);\r\n  };\r\n  \r\n  // Example of fetching data on mount\r\n  useEffect(() => {\r\n    dataRequest.request();\r\n  }, []);\r\n  \r\n  // Example of fetching table data when needed\r\n  useEffect(() => {\r\n    tableData.fetchData();\r\n  }, [tableData.page, tableData.sortBy, tableData.sortDirection, tableData.searchQuery]);\r\n  \r\n  return (\r\n    <Box sx={{ p: 3 }}>\r\n      <Typography variant=\"h4\" gutterBottom>\r\n        Optimized Component Example\r\n      </Typography>\r\n      \r\n      <Box sx={{ display: 'flex', flexDirection: 'column', gap: 3 }}>\r\n        {/* Search Example */}\r\n        <Box>\r\n          <Paper sx={{ p: 2 }}>\r\n            <Typography variant=\"h6\" gutterBottom>\r\n              Search Example (with debounced search)\r\n            </Typography>\r\n            <SearchField\r\n              onSearch={handleSearch}\r\n              debounceDelay={500}\r\n              minSearchChars={2}\r\n              placeholder=\"Search records...\"\r\n            />\r\n          </Paper>\r\n        </Box>\r\n        \r\n        {/* API Request and Form Example Side by Side */}\r\n        <Box sx={{ display: 'flex', flexDirection: { xs: 'column', md: 'row' }, gap: 3 }}>\r\n          {/* API Request Example */}\r\n          <Box sx={{ flex: 1 }}>\r\n            <Paper sx={{ p: 2, height: '100%' }}>\r\n              <Typography variant=\"h6\" gutterBottom>\r\n                API Request Example\r\n              </Typography>\r\n              {dataRequest.isLoading ? (\r\n                <Typography>Loading data...</Typography>\r\n              ) : dataRequest.error ? (\r\n                <Typography color=\"error\">Error: {dataRequest.error.message}</Typography>\r\n              ) : (\r\n                <Box>\r\n                  <Typography>Data loaded successfully!</Typography>\r\n                  <Button \r\n                    variant=\"outlined\" \r\n                    onClick={() => dataRequest.request()}\r\n                    sx={{ mt: 2 }}\r\n                  >\r\n                    Refresh Data\r\n                  </Button>\r\n                </Box>\r\n              )}\r\n            </Paper>\r\n          </Box>\r\n          \r\n          {/* Form Example */}\r\n          <Box sx={{ flex: 1 }}>\r\n            <Paper sx={{ p: 2, height: '100%' }}>\r\n              <Typography variant=\"h6\" gutterBottom>\r\n                Form Example (with validation)\r\n              </Typography>\r\n              <form onSubmit={(e) => {\r\n                e.preventDefault();\r\n                exampleForm.handleSubmit();\r\n              }}>\r\n                <Box sx={{ display: 'flex', flexDirection: 'column', gap: 2 }}>\r\n                  <Box>\r\n                    <TextField\r\n                      label=\"Title\"\r\n                      fullWidth\r\n                      {...exampleForm.getFieldProps('title')}\r\n                      error={!!exampleForm.touched.title && !!exampleForm.errors.title}\r\n                      helperText={exampleForm.touched.title ? exampleForm.errors.title : ''}\r\n                    />\r\n                  </Box>\r\n                  <Box>\r\n                    <TextField\r\n                      label=\"Description\"\r\n                      fullWidth\r\n                      multiline\r\n                      rows={3}\r\n                      {...exampleForm.getFieldProps('description')}\r\n                      error={!!exampleForm.touched.description && !!exampleForm.errors.description}\r\n                      helperText={exampleForm.touched.description ? exampleForm.errors.description : ''}\r\n                    />\r\n                  </Box>\r\n                  <Box>\r\n                    <Button\r\n                      type=\"submit\"\r\n                      variant=\"contained\"\r\n                      disabled={exampleForm.isSubmitting}\r\n                    >\r\n                      {exampleForm.isSubmitting ? 'Submitting...' : 'Submit Form'}\r\n                    </Button>\r\n                  </Box>\r\n                </Box>\r\n              </form>\r\n            </Paper>\r\n          </Box>\r\n        </Box>\r\n        \r\n        {/* Notification Examples */}\r\n        <Box>\r\n          <Paper sx={{ p: 2 }}>\r\n            <Typography variant=\"h6\" gutterBottom>\r\n              Notification Examples\r\n            </Typography>\r\n            <Box sx={{ display: 'flex', gap: 2, flexWrap: 'wrap' }}>\r\n              <Button \r\n                variant=\"outlined\" \r\n                color=\"success\"\r\n                onClick={() => success('Operation completed successfully!')}\r\n              >\r\n                Success Notification\r\n              </Button>\r\n              <Button \r\n                variant=\"outlined\" \r\n                color=\"error\"\r\n                onClick={() => error('An error occurred while processing your request.')}\r\n              >\r\n                Error Notification\r\n              </Button>\r\n              <Button \r\n                variant=\"outlined\" \r\n                color=\"warning\"\r\n                onClick={() => info('Information: System maintenance scheduled for tonight.')}\r\n              >\r\n                Info Notification\r\n              </Button>\r\n              <Button \r\n                variant=\"outlined\" \r\n                onClick={() => success('Action completed!', { \r\n                  action: { \r\n                    label: 'Undo', \r\n                    onClick: () => info('Undo action triggered') \r\n                  }\r\n                })}\r\n              >\r\n                Notification with Action\r\n              </Button>\r\n            </Box>\r\n          </Paper>\r\n        </Box>\r\n      </Box>\r\n      \r\n      {/* Documentation */}\r\n      <Box sx={{ mt: 4 }}>\r\n        <Typography variant=\"h5\" gutterBottom>\r\n          Component Documentation\r\n        </Typography>\r\n        <Typography variant=\"body1\" paragraph>\r\n          This component demonstrates the use of our optimized hooks and components:\r\n        </Typography>\r\n        <Typography component=\"ul\">\r\n          <li><strong>useNotificationContext</strong>: For showing success, error, and info messages</li>\r\n          <li><strong>useApiRequest</strong>: For making API calls with loading, success, and error states</li>\r\n          <li><strong>useTableData</strong>: For managing table data with pagination, sorting, and filtering</li>\r\n          <li><strong>useForm</strong>: For form state management with validation</li>\r\n          <li><strong>SearchField</strong>: For debounced search functionality</li>\r\n        </Typography>\r\n        <Typography variant=\"body1\" sx={{ mt: 2 }}>\r\n          These optimized components and hooks make it easier to build consistent, \r\n          performant, and maintainable React components across the application.\r\n        </Typography>\r\n      </Box>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default OptimizedComponent;\r\n","usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"d:\\All python project\\Tubex\\Frontend\\app\\src\\components\\examples\\ProductListExample.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"d:\\All python project\\Tubex\\Frontend\\app\\src\\components\\inventory\\InventoryAdjustmentModal.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"d:\\All python project\\Tubex\\Frontend\\app\\src\\components\\inventory\\InventoryAuditLog.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'fetchAuditLogs'. Either include it or remove the dependency array.","line":41,"column":6,"nodeType":"ArrayExpression","endLine":41,"endColumn":38,"suggestions":[{"desc":"Update the dependencies array to be: [fetchAuditLogs, inventoryId, page, rowsPerPage]","fix":{"range":[1062,1094],"text":"[fetchAuditLogs, inventoryId, page, rowsPerPage]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\r\nimport {\r\n  Box,\r\n  Typography,\r\n  Paper,\r\n  TableContainer,\r\n  Table,\r\n  TableHead,\r\n  TableBody,\r\n  TableRow,\r\n  TableCell,\r\n  TablePagination,\r\n  Chip,\r\n  Alert,\r\n  CircularProgress\r\n} from '@mui/material';\r\nimport { format } from 'date-fns';\r\nimport { inventoryService } from '../../services/api';\r\nimport type { InventoryAuditLog as IAuditLog } from '../../services/api/inventoryService';\r\n\r\ninterface InventoryAuditLogProps {\r\n  inventoryId: string;\r\n  title?: string;\r\n  maxHeight?: number | string;\r\n}\r\n\r\nconst InventoryAuditLog: React.FC<InventoryAuditLogProps> = ({\r\n  inventoryId,\r\n  title = 'Inventory Audit Log',\r\n  maxHeight\r\n}) => {\r\n  const [logs, setLogs] = useState<IAuditLog[]>([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState<string | null>(null);\r\n  const [page, setPage] = useState(0);\r\n  const [rowsPerPage, setRowsPerPage] = useState(10);\r\n  const [totalRows, setTotalRows] = useState(0);\r\n\r\n  useEffect(() => {\r\n    fetchAuditLogs();\r\n  }, [inventoryId, page, rowsPerPage]);\r\n\r\n  const fetchAuditLogs = async () => {\r\n    if (!inventoryId) return;\r\n    \r\n    setLoading(true);\r\n    setError(null);\r\n\r\n    try {\r\n      const response = await inventoryService.getInventoryAuditLog(inventoryId, {\r\n        page: page + 1, // Convert to 1-based pagination for API\r\n        limit: rowsPerPage,\r\n      });\r\n      \r\n      setLogs(response.data);\r\n      setTotalRows(response.pagination?.total || response.data.length);\r\n    } catch (err: any) {\r\n      console.error('Error fetching inventory audit logs:', err);\r\n      setError(err.message || 'Failed to load audit logs');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleChangePage = (_: unknown, newPage: number) => {\r\n    setPage(newPage);\r\n  };\r\n\r\n  const handleChangeRowsPerPage = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    setRowsPerPage(parseInt(event.target.value, 10));\r\n    setPage(0);\r\n  };\r\n\r\n  const formatDate = (dateString: string) => {\r\n    try {\r\n      return format(new Date(dateString), 'MMM dd, yyyy HH:mm:ss');\r\n    } catch (e) {\r\n      return dateString;\r\n    }\r\n  };\r\n\r\n  const getChangeTypeChip = (changeType: string) => {\r\n    let color: 'default' | 'primary' | 'secondary' | 'error' | 'info' | 'success' | 'warning' = 'default';\r\n    let label = changeType;\r\n    \r\n    switch (changeType) {\r\n      case 'addition':\r\n        color = 'success';\r\n        label = 'Addition';\r\n        break;\r\n      case 'reduction':\r\n        color = 'error';\r\n        label = 'Reduction';\r\n        break;\r\n      case 'transfer_in':\r\n        color = 'info';\r\n        label = 'Transfer In';\r\n        break;\r\n      case 'transfer_out':\r\n        color = 'warning';\r\n        label = 'Transfer Out';\r\n        break;\r\n      case 'adjustment':\r\n        color = 'secondary';\r\n        label = 'Adjustment';\r\n        break;\r\n      default:\r\n        color = 'default';\r\n    }\r\n    \r\n    return <Chip label={label} color={color} size=\"small\" />;\r\n  };\r\n\r\n  const getQuantityChangeDisplay = (previousQuantity: number, newQuantity: number) => {\r\n    const difference = newQuantity - previousQuantity;\r\n    const color = difference > 0 ? 'success.main' : difference < 0 ? 'error.main' : 'text.secondary';\r\n    \r\n    return (\r\n      <Box sx={{ display: 'flex', alignItems: 'center' }}>\r\n        <Typography variant=\"body2\" component=\"span\">\r\n          {previousQuantity} → {newQuantity}\r\n        </Typography>\r\n        <Typography \r\n          variant=\"body2\" \r\n          component=\"span\"\r\n          sx={{ \r\n            color, \r\n            ml: 1,\r\n            fontWeight: 'bold'\r\n          }}\r\n        >\r\n          ({difference > 0 ? '+' : ''}{difference})\r\n        </Typography>\r\n      </Box>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <Paper \r\n      sx={{ \r\n        width: '100%', \r\n        overflow: 'hidden',\r\n        maxHeight: maxHeight ? maxHeight : 'auto'\r\n      }}\r\n      elevation={1}\r\n    >\r\n      <Box sx={{ p: 2, borderBottom: '1px solid #e0e0e0' }}>\r\n        <Typography variant=\"h6\" component=\"div\">\r\n          {title}\r\n        </Typography>\r\n      </Box>\r\n\r\n      {loading && logs.length === 0 ? (\r\n        <Box sx={{ display: 'flex', justifyContent: 'center', p: 3 }}>\r\n          <CircularProgress />\r\n        </Box>\r\n      ) : error ? (\r\n        <Box sx={{ p: 2 }}>\r\n          <Alert severity=\"error\">{error}</Alert>\r\n        </Box>\r\n      ) : (\r\n        <Box sx={{ display: 'flex', flexDirection: 'column', height: '100%' }}>\r\n          <TableContainer sx={{ flexGrow: 1, maxHeight: maxHeight ? `calc(${maxHeight}px - 120px)` : undefined }}>\r\n            <Table stickyHeader>\r\n              <TableHead>\r\n                <TableRow>\r\n                  <TableCell>Date & Time</TableCell>\r\n                  <TableCell>Change Type</TableCell>\r\n                  <TableCell>Quantity</TableCell>\r\n                  <TableCell>Reference</TableCell>\r\n                  <TableCell>User</TableCell>\r\n                </TableRow>\r\n              </TableHead>\r\n              <TableBody>\r\n                {logs.length > 0 ? (\r\n                  logs.map((log) => (\r\n                    <TableRow key={log.id} hover>\r\n                      <TableCell>{formatDate(log.created_at)}</TableCell>\r\n                      <TableCell>{getChangeTypeChip(log.change_type)}</TableCell>\r\n                      <TableCell>\r\n                        {getQuantityChangeDisplay(log.previous_quantity, log.new_quantity)}\r\n                      </TableCell>\r\n                      <TableCell>{log.reference_id || '—'}</TableCell>\r\n                      <TableCell>{log.created_by}</TableCell>\r\n                    </TableRow>\r\n                  ))\r\n                ) : (\r\n                  <TableRow>\r\n                    <TableCell colSpan={5} align=\"center\">\r\n                      <Typography variant=\"body2\" color=\"text.secondary\">\r\n                        No audit logs found for this inventory item\r\n                      </Typography>\r\n                    </TableCell>\r\n                  </TableRow>\r\n                )}\r\n              </TableBody>\r\n            </Table>\r\n          </TableContainer>\r\n\r\n          <TablePagination\r\n            rowsPerPageOptions={[5, 10, 25]}\r\n            component=\"div\"\r\n            count={totalRows}\r\n            rowsPerPage={rowsPerPage}\r\n            page={page}\r\n            onPageChange={handleChangePage}\r\n            onRowsPerPageChange={handleChangeRowsPerPage}\r\n          />\r\n        </Box>\r\n      )}\r\n    </Paper>\r\n  );\r\n};\r\n\r\nexport default InventoryAuditLog;","usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"d:\\All python project\\Tubex\\Frontend\\app\\src\\components\\inventory\\InventoryItemRow.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"d:\\All python project\\Tubex\\Frontend\\app\\src\\components\\inventory\\InventoryManagement.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadInventory'. Either include it or remove the dependency array.","line":60,"column":6,"nodeType":"ArrayExpression","endLine":60,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [loadInventory]","fix":{"range":[1616,1618],"text":"[loadInventory]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useEffect, useState } from 'react';\r\nimport {\r\n  Box,\r\n  Typography,\r\n  Paper,\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableContainer,\r\n  TableHead,\r\n  TableRow,\r\n  Button,\r\n  TextField,\r\n  InputAdornment,\r\n  IconButton,\r\n  Chip,\r\n  TablePagination,\r\n  useTheme as useMuiTheme\r\n} from '@mui/material';\r\nimport { \r\n  Search as SearchIcon,\r\n  FilterList as FilterIcon,\r\n  Add as AddIcon,\r\n  Refresh as RefreshIcon\r\n} from '@mui/icons-material';\r\nimport { useTheme } from '../../contexts/ThemeContext';\r\nimport { useInventory } from '../../hooks/useInventory';\r\nimport InventoryAdjustmentModal from './InventoryAdjustmentModal';\r\n\r\ninterface InventoryItem {\r\n  id: string;\r\n  product_id: string;\r\n  product_name: string;\r\n  warehouse_id: string;\r\n  warehouse_name: string;\r\n  quantity: number;\r\n  unit: string;\r\n  batch_id?: string;\r\n  batch_number?: string;\r\n  last_updated: string;\r\n}\r\n\r\nconst InventoryManagement: React.FC = () => {\r\n  const muiTheme = useMuiTheme();\r\n  const { theme: whitelabelTheme } = useTheme();\r\n  const { getInventoryItems, loading } = useInventory();\r\n\r\n  const [inventoryItems, setInventoryItems] = useState<InventoryItem[]>([]);\r\n  const [filteredItems, setFilteredItems] = useState<InventoryItem[]>([]);\r\n  const [searchTerm, setSearchTerm] = useState('');\r\n  const [adjustModalOpen, setAdjustModalOpen] = useState(false);\r\n  const [selectedItem, setSelectedItem] = useState<InventoryItem | null>(null);\r\n  \r\n  // Pagination\r\n  const [page, setPage] = useState(0);\r\n  const [rowsPerPage, setRowsPerPage] = useState(10);\r\n\r\n  useEffect(() => {\r\n    loadInventory();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (searchTerm) {\r\n      const lowercasedTerm = searchTerm.toLowerCase();\r\n      const filtered = inventoryItems.filter(item => \r\n        item.product_name.toLowerCase().includes(lowercasedTerm) ||\r\n        item.warehouse_name.toLowerCase().includes(lowercasedTerm) ||\r\n        (item.batch_number && item.batch_number.toLowerCase().includes(lowercasedTerm))\r\n      );\r\n      setFilteredItems(filtered);\r\n    } else {\r\n      setFilteredItems(inventoryItems);\r\n    }\r\n    setPage(0);\r\n  }, [searchTerm, inventoryItems]);\r\n\r\n  const loadInventory = async () => {\r\n    try {\r\n      const data = await getInventoryItems();\r\n      setInventoryItems(data);\r\n      setFilteredItems(data);\r\n    } catch (error) {\r\n      console.error(\"Failed to load inventory:\", error);\r\n    }\r\n  };\r\n\r\n  const handleSearchChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    setSearchTerm(event.target.value);\r\n  };\r\n\r\n  const handleChangePage = (event: unknown, newPage: number) => {\r\n    setPage(newPage);\r\n  };\r\n\r\n  const handleChangeRowsPerPage = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    setRowsPerPage(parseInt(event.target.value, 10));\r\n    setPage(0);\r\n  };\r\n\r\n  const openAdjustModal = (item: InventoryItem) => {\r\n    setSelectedItem(item);\r\n    setAdjustModalOpen(true);\r\n  };\r\n\r\n  const handleAdjustmentSuccess = () => {\r\n    setAdjustModalOpen(false);\r\n    loadInventory();\r\n  };\r\n\r\n  const getStockLevelChip = (quantity: number) => {\r\n    let color = 'success';\r\n    let label = 'Good Stock';\r\n    \r\n    if (quantity <= 0) {\r\n      color = 'error';\r\n      label = 'Out of Stock';\r\n    } else if (quantity < 10) {\r\n      color = 'warning';\r\n      label = 'Low Stock';\r\n    }\r\n    \r\n    return (\r\n      <Chip \r\n        label={label} \r\n        color={color as 'success' | 'error' | 'warning'}\r\n        size=\"small\"\r\n      />\r\n    );\r\n  };\r\n\r\n  // Custom styles based on the whitelabel theme\r\n  const headerStyles = {\r\n    backgroundColor: whitelabelTheme?.primaryColor || muiTheme.palette.primary.main,\r\n    color: '#fff'\r\n  };\r\n\r\n  return (\r\n    <Box>\r\n      <Box display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\" mb={3}>\r\n        <Typography variant=\"h5\" component=\"h2\" fontWeight=\"bold\">\r\n          Inventory Management\r\n        </Typography>\r\n        <Box>\r\n          <Button\r\n            variant=\"outlined\"\r\n            startIcon={<RefreshIcon />}\r\n            onClick={loadInventory}\r\n            sx={{ mr: 1 }}\r\n          >\r\n            Refresh\r\n          </Button>\r\n          <Button\r\n            variant=\"contained\"\r\n            startIcon={<AddIcon />}\r\n            sx={{\r\n              backgroundColor: whitelabelTheme?.primaryColor || muiTheme.palette.primary.main,\r\n              borderRadius: whitelabelTheme?.buttonRadius !== undefined \r\n                ? `${whitelabelTheme.buttonRadius}px` \r\n                : undefined,\r\n            }}\r\n          >\r\n            Add Inventory\r\n          </Button>\r\n        </Box>\r\n      </Box>\r\n\r\n      <Paper elevation={2} sx={{ mb: 3, p: 2 }}>\r\n        <Box display=\"flex\" alignItems=\"center\" mb={2}>\r\n          <TextField\r\n            variant=\"outlined\"\r\n            placeholder=\"Search inventory...\"\r\n            fullWidth\r\n            value={searchTerm}\r\n            onChange={handleSearchChange}\r\n            InputProps={{\r\n              startAdornment: (\r\n                <InputAdornment position=\"start\">\r\n                  <SearchIcon />\r\n                </InputAdornment>\r\n              ),\r\n            }}\r\n            size=\"small\"\r\n          />\r\n          <IconButton sx={{ ml: 1 }}>\r\n            <FilterIcon />\r\n          </IconButton>\r\n        </Box>\r\n\r\n        <TableContainer>\r\n          <Table>\r\n            <TableHead>\r\n              <TableRow>\r\n                <TableCell sx={headerStyles}>Product</TableCell>\r\n                <TableCell sx={headerStyles}>Warehouse</TableCell>\r\n                <TableCell sx={headerStyles}>Quantity</TableCell>\r\n                <TableCell sx={headerStyles}>Unit</TableCell>\r\n                <TableCell sx={headerStyles}>Batch</TableCell>\r\n                <TableCell sx={headerStyles}>Status</TableCell>\r\n                <TableCell sx={headerStyles}>Last Updated</TableCell>\r\n                <TableCell sx={headerStyles}>Actions</TableCell>\r\n              </TableRow>\r\n            </TableHead>\r\n            <TableBody>\r\n              {loading ? (\r\n                <TableRow>\r\n                  <TableCell colSpan={8} align=\"center\">\r\n                    <Typography>Loading inventory data...</Typography>\r\n                  </TableCell>\r\n                </TableRow>\r\n              ) : filteredItems.length === 0 ? (\r\n                <TableRow>\r\n                  <TableCell colSpan={8} align=\"center\">\r\n                    <Typography>No inventory items found.</Typography>\r\n                  </TableCell>\r\n                </TableRow>\r\n              ) : (\r\n                filteredItems\r\n                  .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\r\n                  .map((item) => (\r\n                    <TableRow key={item.id}>\r\n                      <TableCell>{item.product_name}</TableCell>\r\n                      <TableCell>{item.warehouse_name}</TableCell>\r\n                      <TableCell align=\"right\">{item.quantity.toLocaleString()}</TableCell>\r\n                      <TableCell>{item.unit}</TableCell>\r\n                      <TableCell>{item.batch_number || 'N/A'}</TableCell>\r\n                      <TableCell>{getStockLevelChip(item.quantity)}</TableCell>\r\n                      <TableCell>{new Date(item.last_updated).toLocaleDateString()}</TableCell>\r\n                      <TableCell>\r\n                        <Button\r\n                          size=\"small\"\r\n                          variant=\"contained\"\r\n                          onClick={() => openAdjustModal(item)}\r\n                          sx={{\r\n                            backgroundColor: whitelabelTheme?.secondaryColor || muiTheme.palette.secondary.main,\r\n                            borderRadius: whitelabelTheme?.buttonRadius !== undefined \r\n                              ? `${whitelabelTheme.buttonRadius}px` \r\n                              : undefined,\r\n                          }}\r\n                        >\r\n                          Adjust\r\n                        </Button>\r\n                      </TableCell>\r\n                    </TableRow>\r\n                  ))\r\n              )}\r\n            </TableBody>\r\n          </Table>\r\n        </TableContainer>\r\n        \r\n        <TablePagination\r\n          rowsPerPageOptions={[5, 10, 25, 50]}\r\n          component=\"div\"\r\n          count={filteredItems.length}\r\n          rowsPerPage={rowsPerPage}\r\n          page={page}\r\n          onPageChange={handleChangePage}\r\n          onRowsPerPageChange={handleChangeRowsPerPage}\r\n        />\r\n      </Paper>\r\n\r\n      {selectedItem && (\r\n        <InventoryAdjustmentModal\r\n          open={adjustModalOpen}\r\n          onClose={() => setAdjustModalOpen(false)}\r\n          item={selectedItem}\r\n          onSuccess={handleAdjustmentSuccess}\r\n        />\r\n      )}\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default InventoryManagement;","usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"d:\\All python project\\Tubex\\Frontend\\app\\src\\components\\inventory\\InventoryTransferModal.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'isConnectionError' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":49,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":49,"endColumn":27},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'fetchWarehouses'. Either include it or remove the dependency array.","line":55,"column":6,"nodeType":"ArrayExpression","endLine":55,"endColumn":23,"suggestions":[{"desc":"Update the dependencies array to be: [open, companyId, fetchWarehouses]","fix":{"range":[1567,1584],"text":"[open, companyId, fetchWarehouses]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'fetchAvailableQuantity'. Either include it or remove the dependency array.","line":63,"column":6,"nodeType":"ArrayExpression","endLine":63,"endColumn":36,"suggestions":[{"desc":"Update the dependencies array to be: [sourceWarehouseId, productId, fetchAvailableQuantity]","fix":{"range":[1741,1771],"text":"[sourceWarehouseId, productId, fetchAvailableQuantity]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\r\nimport {\r\n  Dialog,\r\n  DialogTitle,\r\n  DialogContent,\r\n  DialogActions,\r\n  Button,\r\n  TextField,\r\n  FormControl,\r\n  InputLabel,\r\n  Select,\r\n  MenuItem,\r\n  FormHelperText,\r\n  Alert,\r\n  Box,\r\n  Typography,\r\n  CircularProgress,\r\n  SelectChangeEvent\r\n} from '@mui/material';\r\nimport { inventoryService } from '../../services/api';\r\n\r\ninterface InventoryTransferModalProps {\r\n  open: boolean;\r\n  onClose: () => void;\r\n  productId: string;\r\n  productName: string;\r\n  companyId: string;\r\n  onTransferComplete?: () => void;\r\n}\r\n\r\nconst InventoryTransferModal: React.FC<InventoryTransferModalProps> = ({\r\n  open,\r\n  onClose,\r\n  productId,\r\n  productName,\r\n  companyId,\r\n  onTransferComplete\r\n}) => {\r\n  const [sourceWarehouseId, setSourceWarehouseId] = useState('');\r\n  const [destinationWarehouseId, setDestinationWarehouseId] = useState('');\r\n  const [quantity, setQuantity] = useState('');\r\n  const [notes, setNotes] = useState('');\r\n  const [warehouses, setWarehouses] = useState<{ id: string; name: string }[]>([]);\r\n  const [errors, setErrors] = useState<Record<string, string>>({});\r\n  const [loading, setLoading] = useState(false);\r\n  const [fetchingWarehouses, setFetchingWarehouses] = useState(false);\r\n  const [apiError, setApiError] = useState<string | null>(null);\r\n  const [sourceQuantityAvailable, setSourceQuantityAvailable] = useState<number | null>(null);\r\n  const [isConnectionError, setIsConnectionError] = useState(false);\r\n\r\n  useEffect(() => {\r\n    if (open) {\r\n      fetchWarehouses();\r\n    }\r\n  }, [open, companyId]);\r\n\r\n  useEffect(() => {\r\n    if (sourceWarehouseId) {\r\n      fetchAvailableQuantity();\r\n    } else {\r\n      setSourceQuantityAvailable(null);\r\n    }\r\n  }, [sourceWarehouseId, productId]);\r\n  const fetchWarehouses = async () => {\r\n    setFetchingWarehouses(true);\r\n    setApiError(null);\r\n    setIsConnectionError(false);\r\n    \r\n    try {\r\n      // Ensure companyId is a string before making the API call\r\n      if (!companyId || typeof companyId !== 'string') {\r\n        throw new Error('Invalid company ID');\r\n      }\r\n      \r\n      const response = await inventoryService.getWarehouses(companyId);\r\n      console.log('Warehouse API response:', response);\r\n      \r\n      // Handle different potential response structures\r\n      let warehousesList: Array<any> = [];\r\n      \r\n      // If response.data is an array\r\n      if (Array.isArray(response.data)) {\r\n        warehousesList = response.data;\r\n      } \r\n      // If response.data contains a warehouses property that is an array\r\n      else if (response.data && typeof response.data === 'object' && 'warehouses' in response.data && \r\n              Array.isArray((response.data as any).warehouses)) {\r\n        warehousesList = (response.data as any).warehouses;\r\n      }\r\n      // If response.data.data contains the warehouses array\r\n      else if (response.data && typeof response.data === 'object' && 'data' in response.data && \r\n              Array.isArray((response.data as any).data)) {\r\n        warehousesList = (response.data as any).data;\r\n      }\r\n      // Default to empty array if no matching structure is found\r\n      else {\r\n        console.error('Unexpected API response format:', response);\r\n        warehousesList = [];\r\n      }\r\n      \r\n      setWarehouses(warehousesList);\r\n    } catch (error: any) {\r\n      console.error('Error fetching warehouses:', error);\r\n      \r\n      // Check if it's a connection error\r\n      if (error.message?.includes('Connection') || error.response?.status === 500) {\r\n        setIsConnectionError(true);\r\n        setApiError('Database connection error. Please try again later.');\r\n      } else {\r\n        setApiError(`Failed to load warehouses: ${error.message || 'Unknown error'}`);\r\n      }\r\n    } finally {\r\n      setFetchingWarehouses(false);\r\n    }\r\n  };\r\n\r\n  const fetchAvailableQuantity = async () => {\r\n    try {\r\n      // This is a simplified approach. In a real implementation, you'd need an endpoint \r\n      // to get the available quantity for a specific product in a specific warehouse\r\n      const response = await inventoryService.getInventory({\r\n        companyId,\r\n        warehouseId: sourceWarehouseId\r\n      });\r\n      \r\n      const productInventory = response.data.find(item => item.product_id === productId);\r\n      setSourceQuantityAvailable(productInventory ? productInventory.quantity : 0);\r\n    } catch (error) {\r\n      console.error('Error fetching available quantity:', error);\r\n      // We don't set API error here to avoid blocking the modal\r\n    }\r\n  };\r\n\r\n  const handleSourceWarehouseChange = (event: SelectChangeEvent) => {\r\n    setSourceWarehouseId(event.target.value);\r\n    if (event.target.value === destinationWarehouseId) {\r\n      setDestinationWarehouseId('');\r\n    }\r\n    setErrors({ ...errors, sourceWarehouse: '' });\r\n  };\r\n\r\n  const handleDestinationWarehouseChange = (event: SelectChangeEvent) => {\r\n    setDestinationWarehouseId(event.target.value);\r\n    if (event.target.value === sourceWarehouseId) {\r\n      setErrors({ ...errors, destinationWarehouse: 'Source and destination warehouses cannot be the same' });\r\n    } else {\r\n      setErrors({ ...errors, destinationWarehouse: '' });\r\n    }\r\n  };\r\n\r\n  const validateForm = (): boolean => {\r\n    const newErrors: Record<string, string> = {};\r\n    \r\n    if (!sourceWarehouseId) {\r\n      newErrors.sourceWarehouse = 'Source warehouse is required';\r\n    }\r\n    \r\n    if (!destinationWarehouseId) {\r\n      newErrors.destinationWarehouse = 'Destination warehouse is required';\r\n    }\r\n    \r\n    if (sourceWarehouseId === destinationWarehouseId) {\r\n      newErrors.destinationWarehouse = 'Source and destination warehouses cannot be the same';\r\n    }\r\n    \r\n    if (!quantity) {\r\n      newErrors.quantity = 'Transfer quantity is required';\r\n    } else if (isNaN(Number(quantity)) || Number(quantity) <= 0) {\r\n      newErrors.quantity = 'Quantity must be a positive number';\r\n    } else if (sourceQuantityAvailable !== null && Number(quantity) > sourceQuantityAvailable) {\r\n      newErrors.quantity = `Only ${sourceQuantityAvailable} units available for transfer`;\r\n    }\r\n    \r\n    setErrors(newErrors);\r\n    return Object.keys(newErrors).length === 0;\r\n  };\r\n\r\n  const handleTransfer = async () => {\r\n    if (!validateForm()) return;\r\n    \r\n    setLoading(true);\r\n    setApiError(null);\r\n    \r\n    try {\r\n      await inventoryService.transferInventory({\r\n        product_id: productId,\r\n        source_warehouse_id: sourceWarehouseId,\r\n        destination_warehouse_id: destinationWarehouseId,\r\n        quantity: Number(quantity),\r\n        notes: notes.trim() || undefined\r\n      });\r\n      \r\n      // Reset form\r\n      setSourceWarehouseId('');\r\n      setDestinationWarehouseId('');\r\n      setQuantity('');\r\n      setNotes('');\r\n      \r\n      if (onTransferComplete) {\r\n        onTransferComplete();\r\n      }\r\n      \r\n      onClose();\r\n    } catch (error: any) {\r\n      console.error('Error transferring inventory:', error);\r\n      setApiError(error.message || 'Failed to transfer inventory. Please try again.');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleClose = () => {\r\n    if (!loading) {\r\n      onClose();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Dialog open={open} onClose={handleClose} maxWidth=\"sm\" fullWidth>\r\n      <DialogTitle>Transfer Inventory: {productName}</DialogTitle>\r\n      <DialogContent>\r\n        {apiError && (\r\n          <Alert severity=\"error\" sx={{ mb: 2 }}>\r\n            {apiError}\r\n          </Alert>\r\n        )}\r\n        \r\n        <Box sx={{ mt: 2 }}>\r\n          {fetchingWarehouses ? (\r\n            <Box sx={{ display: 'flex', justifyContent: 'center', py: 4 }}>\r\n              <CircularProgress />\r\n            </Box>\r\n          ) : (\r\n            <Box component=\"form\" noValidate sx={{ mt: 1 }}>\r\n              <FormControl fullWidth margin=\"normal\" error={!!errors.sourceWarehouse}>\r\n                <InputLabel id=\"source-warehouse-label\">Source Warehouse</InputLabel>\r\n                <Select\r\n                  labelId=\"source-warehouse-label\"\r\n                  value={sourceWarehouseId}\r\n                  onChange={handleSourceWarehouseChange}\r\n                  label=\"Source Warehouse\"\r\n                  disabled={loading}\r\n                >                  {Array.isArray(warehouses) ? warehouses.map((warehouse) => (\r\n                    <MenuItem key={warehouse.id} value={warehouse.id}>\r\n                      {warehouse.name}\r\n                    </MenuItem>\r\n                  )) : (\r\n                    <MenuItem value=\"\">No warehouses available</MenuItem>\r\n                  )}\r\n                </Select>\r\n                {errors.sourceWarehouse && <FormHelperText>{errors.sourceWarehouse}</FormHelperText>}\r\n              </FormControl>\r\n\r\n              {sourceQuantityAvailable !== null && (\r\n                <Box sx={{ mt: 1, mb: 2 }}>\r\n                  <Typography variant=\"body2\" color=\"text.secondary\">\r\n                    Available quantity: <strong>{sourceQuantityAvailable}</strong> units\r\n                  </Typography>\r\n                </Box>\r\n              )}\r\n\r\n              <FormControl fullWidth margin=\"normal\" error={!!errors.destinationWarehouse}>\r\n                <InputLabel id=\"destination-warehouse-label\">Destination Warehouse</InputLabel>\r\n                <Select\r\n                  labelId=\"destination-warehouse-label\"\r\n                  value={destinationWarehouseId}\r\n                  onChange={handleDestinationWarehouseChange}\r\n                  label=\"Destination Warehouse\"\r\n                  disabled={loading}                >\r\n                  {Array.isArray(warehouses) ? warehouses\r\n                    .filter(w => w.id !== sourceWarehouseId)\r\n                    .map((warehouse) => (\r\n                      <MenuItem key={warehouse.id} value={warehouse.id}>\r\n                        {warehouse.name}\r\n                      </MenuItem>\r\n                    )) : (\r\n                      <MenuItem value=\"\">No warehouses available</MenuItem>\r\n                    )\r\n                  }\r\n                </Select>\r\n                {errors.destinationWarehouse && <FormHelperText>{errors.destinationWarehouse}</FormHelperText>}\r\n              </FormControl>\r\n\r\n              <TextField\r\n                margin=\"normal\"\r\n                fullWidth\r\n                label=\"Quantity to Transfer\"\r\n                type=\"number\"\r\n                value={quantity}\r\n                onChange={(e) => {\r\n                  setQuantity(e.target.value);\r\n                  if (errors.quantity) {\r\n                    setErrors({ ...errors, quantity: '' });\r\n                  }\r\n                }}\r\n                disabled={loading}\r\n                error={!!errors.quantity}\r\n                helperText={errors.quantity}\r\n                inputProps={{ min: 1 }}\r\n              />\r\n\r\n              <TextField\r\n                margin=\"normal\"\r\n                fullWidth\r\n                label=\"Notes (Optional)\"\r\n                multiline\r\n                rows={3}\r\n                value={notes}\r\n                onChange={(e) => setNotes(e.target.value)}\r\n                disabled={loading}\r\n              />\r\n            </Box>\r\n          )}\r\n        </Box>\r\n      </DialogContent>\r\n      <DialogActions>\r\n        <Button onClick={handleClose} disabled={loading}>\r\n          Cancel\r\n        </Button>\r\n        <Button \r\n          onClick={handleTransfer} \r\n          variant=\"contained\" \r\n          color=\"primary\" \r\n          disabled={loading || fetchingWarehouses}\r\n        >\r\n          {loading ? <CircularProgress size={24} /> : 'Transfer'}\r\n        </Button>\r\n      </DialogActions>\r\n    </Dialog>\r\n  );\r\n};\r\n\r\nexport default InventoryTransferModal;","usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"d:\\All python project\\Tubex\\Frontend\\app\\src\\components\\payment\\CreatePaymentModal.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'FormHelperText' is defined but never used. Allowed unused vars must match /^_/u.","line":14,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":14,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Autocomplete' is defined but never used. Allowed unused vars must match /^_/u.","line":19,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":19,"endColumn":15},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'searchCustomers' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":40,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":40,"endColumn":26},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'customerOptions' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":42,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":42,"endColumn":25},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'setCustomerOptions' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":42,"column":27,"nodeType":"Identifier","messageId":"unusedVar","endLine":42,"endColumn":45},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'customerSearchTerm' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":43,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":43,"endColumn":28},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'setCustomerSearchTerm' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":43,"column":30,"nodeType":"Identifier","messageId":"unusedVar","endLine":43,"endColumn":51},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'selectedCustomer' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":44,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":44,"endColumn":26},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'setSelectedCustomer' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":44,"column":28,"nodeType":"Identifier","messageId":"unusedVar","endLine":44,"endColumn":47}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\r\nimport {\r\n  Dialog,\r\n  DialogTitle,\r\n  DialogContent,\r\n  DialogActions,\r\n  Button,\r\n  TextField,\r\n  FormControl,\r\n  InputLabel,\r\n  Select,  MenuItem,\r\n  Box,\r\n  Typography,\r\n  FormHelperText,\r\n  InputAdornment,\r\n  CircularProgress,\r\n  Tooltip,\r\n  IconButton,\r\n  Autocomplete\r\n} from '@mui/material';\r\nimport { DatePicker } from '@mui/x-date-pickers/DatePicker';\r\nimport { AdapterDateFns } from '@mui/x-date-pickers/AdapterDateFns';\r\nimport { LocalizationProvider } from '@mui/x-date-pickers/LocalizationProvider';\r\nimport { usePayment } from '../../hooks/usePayment';\r\nimport { useCustomer } from '../../hooks/useCustomer';\r\nimport { Customer } from '../../services/api/customerService';\r\nimport { PaymentMethod, PaymentType, CreatePaymentRequest } from '../../services/api/paymentService';\r\nimport { format } from 'date-fns';\r\nimport { generateTransactionId, generateOrderId, generateInvoiceId } from '../../utils/idGenerator';\r\nimport { Refresh as RefreshIcon } from '@mui/icons-material';\r\n\r\ninterface CreatePaymentModalProps {\r\n  open: boolean;\r\n  onClose: () => void;\r\n  onPaymentCreated: () => void;\r\n}\r\n\r\nconst CreatePaymentModal: React.FC<CreatePaymentModalProps> = ({ open, onClose, onPaymentCreated }) => {\r\n  const { createPayment, loading, error } = usePayment();\r\n  const { searchCustomers } = useCustomer();\r\n  const [formErrors, setFormErrors] = useState<Record<string, string>>({});\r\n  const [customerOptions, setCustomerOptions] = useState<Customer[]>([]);\r\n  const [customerSearchTerm, setCustomerSearchTerm] = useState('');\r\n  const [selectedCustomer, setSelectedCustomer] = useState<Customer | null>(null);\r\n    // Form state\r\n  const [formData, setFormData] = useState<Partial<CreatePaymentRequest>>({\r\n    transactionId: generateTransactionId(),\r\n    customerId: '',\r\n    amount: 0,\r\n    paymentMethod: 'bank_transfer' as PaymentMethod,\r\n    paymentType: 'invoice_payment' as PaymentType,\r\n    paymentDate: format(new Date(), 'yyyy-MM-dd'),\r\n    orderId: '',\r\n    invoiceId: ''\r\n  });\r\n\r\n  // Reset form when modal is opened\r\n  useEffect(() => {\r\n    if (open) {\r\n      setFormData({\r\n        transactionId: generateTransactionId(),\r\n        customerId: '',\r\n        amount: 0,\r\n        paymentMethod: 'bank_transfer' as PaymentMethod,\r\n        paymentType: 'invoice_payment' as PaymentType,\r\n        paymentDate: format(new Date(), 'yyyy-MM-dd'),\r\n        orderId: '',\r\n        invoiceId: ''\r\n      });\r\n      setFormErrors({});\r\n    }\r\n  }, [open]);\r\n\r\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement | { name?: string; value: unknown }>) => {\r\n    const { name, value } = e.target;\r\n    if (name) {\r\n      setFormData(prev => ({ ...prev, [name]: value }));\r\n      \r\n      // Clear error for this field when changed\r\n      if (formErrors[name]) {\r\n        setFormErrors(prev => {\r\n          const newErrors = { ...prev };\r\n          delete newErrors[name];\r\n          return newErrors;\r\n        });\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleDateChange = (date: Date | null) => {\r\n    if (date) {\r\n      setFormData(prev => ({ ...prev, paymentDate: format(date, 'yyyy-MM-dd') }));\r\n      \r\n      // Clear date error if exists\r\n      if (formErrors.paymentDate) {\r\n        setFormErrors(prev => {\r\n          const newErrors = { ...prev };\r\n          delete newErrors.paymentDate;\r\n          return newErrors;\r\n        });\r\n      }\r\n    }\r\n  };\r\n  const validateForm = (): boolean => {\r\n    const errors: Record<string, string> = {};\r\n    \r\n    if (!formData.transactionId) {\r\n      // Generate a transaction ID if it's missing\r\n      setFormData(prev => ({ ...prev, transactionId: generateTransactionId() }));\r\n    }\r\n    \r\n    if (!formData.customerId) {\r\n      errors.customerId = 'Customer ID is required';\r\n    }\r\n    \r\n    if (!formData.amount || formData.amount <= 0) {\r\n      errors.amount = 'Amount must be greater than zero';\r\n    }\r\n    \r\n    if (!formData.paymentDate) {\r\n      errors.paymentDate = 'Payment date is required';\r\n    }\r\n    \r\n    // Auto-generate IDs based on payment type if not provided\r\n    if (formData.paymentType === 'order_payment' && !formData.orderId) {\r\n      setFormData(prev => ({ ...prev, orderId: generateOrderId() }));\r\n    }\r\n    \r\n    if (formData.paymentType === 'invoice_payment' && !formData.invoiceId) {\r\n      setFormData(prev => ({ ...prev, invoiceId: generateInvoiceId() }));\r\n    }\r\n    \r\n    setFormErrors(errors);\r\n    return Object.keys(errors).length === 0;\r\n  };\r\n\r\n  const handleSubmit = async () => {\r\n    if (!validateForm()) return;\r\n    \r\n    const paymentData = formData as CreatePaymentRequest;\r\n    const result = await createPayment(paymentData);\r\n    \r\n    if (result) {\r\n      onPaymentCreated();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Dialog open={open} onClose={loading ? undefined : onClose} maxWidth=\"md\" fullWidth>\r\n      <DialogTitle>Create New Payment</DialogTitle>\r\n      <DialogContent>\r\n        {error && (\r\n          <Typography color=\"error\" variant=\"body2\" sx={{ mb: 2 }}>\r\n            {error}\r\n          </Typography>\r\n        )}\r\n          <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 2, mt: 1 }}>          <Box sx={{ width: { xs: '100%', sm: '48%' } }}>\r\n            <TextField\r\n              label=\"Transaction ID\"\r\n              name=\"transactionId\"\r\n              value={formData.transactionId || ''}\r\n              onChange={handleChange}\r\n              fullWidth\r\n              required\r\n              error={!!formErrors.transactionId}\r\n              helperText={formErrors.transactionId || \"Auto-generated transaction ID\"}\r\n              InputProps={{\r\n                endAdornment: (\r\n                  <InputAdornment position=\"end\">\r\n                    <Tooltip title=\"Generate new transaction ID\">\r\n                      <IconButton \r\n                        onClick={() => setFormData(prev => ({ ...prev, transactionId: generateTransactionId() }))}\r\n                        edge=\"end\"\r\n                        size=\"small\"\r\n                      >\r\n                        <RefreshIcon fontSize=\"small\" />\r\n                      </IconButton>\r\n                    </Tooltip>\r\n                  </InputAdornment>\r\n                ),\r\n              }}\r\n            />\r\n          </Box>\r\n          \r\n          <Box sx={{ width: { xs: '100%', sm: '48%' } }}>\r\n            <TextField\r\n              label=\"Customer ID\"\r\n              name=\"customerId\"\r\n              value={formData.customerId || ''}\r\n              onChange={handleChange}\r\n              fullWidth\r\n              required\r\n              error={!!formErrors.customerId}\r\n              helperText={formErrors.customerId}\r\n            />\r\n          </Box>\r\n          \r\n          <Box sx={{ width: { xs: '100%', sm: '48%' } }}>\r\n            <TextField\r\n              label=\"Amount\"\r\n              name=\"amount\"\r\n              type=\"number\"\r\n              value={formData.amount || ''}\r\n              onChange={handleChange}\r\n              fullWidth\r\n              required\r\n              InputProps={{\r\n                startAdornment: <InputAdornment position=\"start\">$</InputAdornment>,\r\n              }}\r\n              error={!!formErrors.amount}\r\n              helperText={formErrors.amount}\r\n            />\r\n          </Box>\r\n          \r\n          <Box sx={{ width: { xs: '100%', sm: '48%' } }}>\r\n            <LocalizationProvider dateAdapter={AdapterDateFns}>\r\n              <DatePicker\r\n                label=\"Payment Date\"\r\n                value={formData.paymentDate ? new Date(formData.paymentDate) : null}\r\n                onChange={handleDateChange}\r\n                slotProps={{ \r\n                  textField: { \r\n                    fullWidth: true,\r\n                    required: true,\r\n                    error: !!formErrors.paymentDate,\r\n                    helperText: formErrors.paymentDate\r\n                  }\r\n                }}\r\n              />\r\n            </LocalizationProvider>\r\n          </Box>\r\n          \r\n          <Box sx={{ width: { xs: '100%', sm: '48%' } }}>\r\n            <FormControl fullWidth required>\r\n              <InputLabel>Payment Method</InputLabel>\r\n              <Select\r\n                name=\"paymentMethod\"\r\n                value={formData.paymentMethod || ''}\r\n                onChange={handleChange as any}\r\n                label=\"Payment Method\"\r\n              >\r\n                <MenuItem value=\"credit_card\">Credit Card</MenuItem>\r\n                <MenuItem value=\"bank_transfer\">Bank Transfer</MenuItem>\r\n                <MenuItem value=\"cash\">Cash</MenuItem>\r\n                <MenuItem value=\"check\">Check</MenuItem>\r\n                <MenuItem value=\"paypal\">PayPal</MenuItem>\r\n                <MenuItem value=\"stripe\">Stripe</MenuItem>\r\n                <MenuItem value=\"other\">Other</MenuItem>\r\n              </Select>\r\n            </FormControl>\r\n          </Box>\r\n          \r\n          <Box sx={{ width: { xs: '100%', sm: '48%' } }}>\r\n            <FormControl fullWidth required>\r\n              <InputLabel>Payment Type</InputLabel>\r\n              <Select\r\n                name=\"paymentType\"\r\n                value={formData.paymentType || ''}\r\n                onChange={handleChange as any}\r\n                label=\"Payment Type\"\r\n              >\r\n                <MenuItem value=\"order_payment\">Order Payment</MenuItem>\r\n                <MenuItem value=\"invoice_payment\">Invoice Payment</MenuItem>\r\n                <MenuItem value=\"refund\">Refund</MenuItem>\r\n                <MenuItem value=\"advance_payment\">Advance Payment</MenuItem>\r\n                <MenuItem value=\"adjustment\">Adjustment</MenuItem>\r\n              </Select>\r\n            </FormControl>\r\n          </Box>\r\n            <Box sx={{ width: { xs: '100%', sm: '48%' } }}>\r\n            <TextField\r\n              label=\"Order ID (Optional)\"\r\n              name=\"orderId\"\r\n              value={formData.orderId || ''}\r\n              onChange={handleChange}\r\n              fullWidth\r\n              helperText=\"Click refresh to generate a new Order ID\"\r\n              InputProps={{\r\n                endAdornment: (\r\n                  <InputAdornment position=\"end\">\r\n                    <Tooltip title=\"Generate new order ID\">\r\n                      <IconButton \r\n                        onClick={() => setFormData(prev => ({ ...prev, orderId: generateOrderId() }))}\r\n                        edge=\"end\"\r\n                        size=\"small\"\r\n                      >\r\n                        <RefreshIcon fontSize=\"small\" />\r\n                      </IconButton>\r\n                    </Tooltip>\r\n                  </InputAdornment>\r\n                ),\r\n              }}\r\n            />\r\n          </Box>\r\n          \r\n          <Box sx={{ width: { xs: '100%', sm: '48%' } }}>\r\n            <TextField\r\n              label=\"Invoice ID (Optional)\"\r\n              name=\"invoiceId\"\r\n              value={formData.invoiceId || ''}\r\n              onChange={handleChange}\r\n              fullWidth\r\n              helperText=\"Click refresh to generate a new Invoice ID\"\r\n              InputProps={{\r\n                endAdornment: (\r\n                  <InputAdornment position=\"end\">\r\n                    <Tooltip title=\"Generate new invoice ID\">\r\n                      <IconButton \r\n                        onClick={() => setFormData(prev => ({ ...prev, invoiceId: generateInvoiceId() }))}\r\n                        edge=\"end\"\r\n                        size=\"small\"\r\n                      >\r\n                        <RefreshIcon fontSize=\"small\" />\r\n                      </IconButton>\r\n                    </Tooltip>\r\n                  </InputAdornment>\r\n                ),\r\n              }}\r\n            />\r\n          </Box>\r\n          \r\n          <Box sx={{ width: '100%' }}>\r\n            <TextField\r\n              label=\"External Reference ID (Optional)\"\r\n              name=\"externalReferenceId\"\r\n              value={formData.externalReferenceId || ''}            onChange={handleChange}\r\n              fullWidth\r\n            />\r\n          </Box>\r\n          \r\n          <Box sx={{ width: '100%' }}>\r\n            <TextField\r\n              label=\"Notes (Optional)\"\r\n              name=\"notes\"\r\n              value={formData.notes || ''}\r\n              onChange={handleChange}\r\n              fullWidth\r\n              multiline\r\n              rows={3}\r\n            />\r\n          </Box>\r\n        </Box>\r\n      </DialogContent>\r\n      <DialogActions sx={{ p: 2 }}>\r\n        <Button onClick={onClose} disabled={loading}>\r\n          Cancel\r\n        </Button>\r\n        <Button \r\n          onClick={handleSubmit} \r\n          variant=\"contained\" \r\n          color=\"primary\" \r\n          disabled={loading}\r\n          startIcon={loading ? <CircularProgress size={20} /> : undefined}\r\n        >\r\n          {loading ? 'Creating...' : 'Create Payment'}\r\n        </Button>\r\n      </DialogActions>\r\n    </Dialog>\r\n  );\r\n};\r\n\r\nexport default CreatePaymentModal;\r\n","usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"d:\\All python project\\Tubex\\Frontend\\app\\src\\components\\payment\\PaymentManagement.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'useMuiTheme' is defined but never used. Allowed unused vars must match /^_/u.","line":16,"column":15,"nodeType":"Identifier","messageId":"unusedVar","endLine":16,"endColumn":26},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'PaymentMethod' is defined but never used. Allowed unused vars must match /^_/u.","line":39,"column":19,"nodeType":"Identifier","messageId":"unusedVar","endLine":39,"endColumn":32},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'PaymentType' is defined but never used. Allowed unused vars must match /^_/u.","line":39,"column":34,"nodeType":"Identifier","messageId":"unusedVar","endLine":39,"endColumn":45},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'customerOptions' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":76,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":76,"endColumn":25},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'customerSearchTerm' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":77,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":77,"endColumn":28},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'isDeleteConfirmOpen' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":83,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":83,"endColumn":29},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has missing dependencies: 'customerMap', 'fetchPayments', and 'searchCustomers'. Either include them or remove the dependency array.","line":103,"column":6,"nodeType":"ArrayExpression","endLine":103,"endColumn":104,"suggestions":[{"desc":"Update the dependencies array to be: [page, rowsPerPage, startDate, endDate, selectedPaymentMethod, selectedStatus, selectedCustomerId, fetchPayments, customerMap, searchCustomers]","fix":{"range":[3799,3897],"text":"[page, rowsPerPage, startDate, endDate, selectedPaymentMethod, selectedStatus, selectedCustomerId, fetchPayments, customerMap, searchCustomers]"}}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'handleCustomerSearch' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":156,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":156,"endColumn":29},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'handleDeletePayment' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":181,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":181,"endColumn":28}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useEffect, useState } from 'react';\r\nimport {\r\n  Typography,\r\n  Paper,\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableContainer,\r\n  TableHead,\r\n  TableRow,  Button,\r\n  TextField,\r\n  InputAdornment,\r\n  IconButton,\r\n  Chip,\r\n  TablePagination,\r\n  useTheme as useMuiTheme,\r\n  FormControl,\r\n  InputLabel,\r\n  Select,\r\n  MenuItem,\r\n  Box,\r\n  Tooltip\r\n} from '@mui/material';\r\nimport { DatePicker } from '@mui/x-date-pickers/DatePicker';\r\nimport { AdapterDateFns } from '@mui/x-date-pickers/AdapterDateFns';\r\nimport { LocalizationProvider } from '@mui/x-date-pickers/LocalizationProvider';\r\nimport { \r\n  Search as SearchIcon,\r\n  FilterList as FilterIcon,\r\n  Add as AddIcon,\r\n  Refresh as RefreshIcon,\r\n  Edit as EditIcon,\r\n  Delete as DeleteIcon,\r\n  Check as CheckIcon\r\n} from '@mui/icons-material';\r\nimport { useTheme } from '../../contexts/ThemeContext';\r\nimport { usePayment } from '../../hooks/usePayment';\r\nimport { useCustomer } from '../../hooks/useCustomer';\r\nimport { Payment, PaymentMethod, PaymentType, ReconciliationStatus } from '../../services/api/paymentService';\r\nimport { Customer } from '../../services/api/customerService';\r\nimport CreatePaymentModal from './CreatePaymentModal';\r\nimport UpdatePaymentModal from './UpdatePaymentModal';\r\nimport ReconcilePaymentModal from './ReconcilePaymentModal';\r\nimport { format } from 'date-fns';\r\nimport { useSnackbar } from 'notistack';\r\n\r\nconst PaymentManagement: React.FC = () => {\r\n  const { theme: whitelabelTheme } = useTheme();\r\n  const { \r\n    loading, \r\n    error, \r\n    getPayments, \r\n    deletePayment \r\n  } = usePayment();\r\n  const {\r\n    getCustomersByIds,\r\n    searchCustomers\r\n  } = useCustomer();\r\n  const { enqueueSnackbar } = useSnackbar();\r\n\r\n  // State variables\r\n  const [payments, setPayments] = useState<Payment[]>([]);\r\n  const [totalItems, setTotalItems] = useState(0);\r\n  const [page, setPage] = useState(0);\r\n  const [rowsPerPage, setRowsPerPage] = useState(10);\r\n  const [searchTerm, setSearchTerm] = useState('');\r\n  const [customerMap, setCustomerMap] = useState<Record<string, Customer>>({});\r\n    // Filter states\r\n  const [startDate, setStartDate] = useState<Date | null>(null);\r\n  const [endDate, setEndDate] = useState<Date | null>(null);\r\n  const [selectedPaymentMethod, setSelectedPaymentMethod] = useState<string>('');\r\n  const [selectedStatus, setSelectedStatus] = useState<string>('');\r\n  const [selectedCustomerId, setSelectedCustomerId] = useState('');\r\n  const [selectedOrderId, setSelectedOrderId] = useState('');\r\n  const [selectedInvoiceId, setSelectedInvoiceId] = useState('');\r\n  const [customerOptions, setCustomerOptions] = useState<Customer[]>([]);\r\n  const [customerSearchTerm, setCustomerSearchTerm] = useState('');\r\n\r\n  // Modal states\r\n  const [isCreateModalOpen, setIsCreateModalOpen] = useState(false);\r\n  const [isUpdateModalOpen, setIsUpdateModalOpen] = useState(false);\r\n  const [isReconcileModalOpen, setIsReconcileModalOpen] = useState(false);\r\n  const [isDeleteConfirmOpen, setIsDeleteConfirmOpen] = useState(false);\r\n  const [selectedPayment, setSelectedPayment] = useState<Payment | null>(null);\r\n\r\n  // Fetch payments on initial load and when filters change\r\n  useEffect(() => {\r\n    fetchPayments();\r\n    \r\n    // Initialize customer filter options\r\n    if (Object.keys(customerMap).length === 0) {\r\n      // Load some initial customers for the filter dropdown\r\n      searchCustomers({ limit: 10 }).then(result => {\r\n        if (result && result.data.length > 0) {\r\n          const initialCustomers = result.data.reduce((acc, customer) => {\r\n            acc[customer.id] = customer;\r\n            return acc;\r\n          }, {} as Record<string, Customer>);\r\n          setCustomerMap(prevMap => ({ ...prevMap, ...initialCustomers }));\r\n        }\r\n      });\r\n    }\r\n  }, [page, rowsPerPage, startDate, endDate, selectedPaymentMethod, selectedStatus, selectedCustomerId]);const fetchPayments = async () => {\r\n    let filters: any = {\r\n      page: page + 1, // API uses 1-based pagination\r\n      limit: rowsPerPage\r\n    };\r\n\r\n    // Add filters if they are set\r\n    if (startDate) filters.startDate = format(startDate, 'yyyy-MM-dd');\r\n    if (endDate) filters.endDate = format(endDate, 'yyyy-MM-dd');\r\n    if (selectedPaymentMethod) filters.paymentMethod = selectedPaymentMethod;\r\n    if (selectedStatus) filters.reconciliationStatus = selectedStatus;\r\n    if (selectedCustomerId) filters.customerId = selectedCustomerId;\r\n    if (selectedOrderId) filters.orderId = selectedOrderId;\r\n    if (selectedInvoiceId) filters.invoiceId = selectedInvoiceId;\r\n\r\n    const result = await getPayments(filters);\r\n      if (result) {\r\n      // Extract all unique customer IDs\r\n      const customerIds = Array.from(new Set(result.data.map(payment => payment.customerId)));\r\n      \r\n      // Fetch all customers in one batch request\r\n      if (customerIds.length > 0) {\r\n        const customers = await getCustomersByIds(customerIds) || {};\r\n        setCustomerMap(customers);\r\n        \r\n        // Enhance payments with customer data\r\n        const enhancedPayments = result.data.map(payment => ({\r\n          ...payment,\r\n          customerName: customers[payment.customerId]?.name || `Customer ${payment.customerId.substring(0, 8)}`\r\n        }));\r\n        \r\n        setPayments(enhancedPayments);\r\n      } else {\r\n        setPayments(result.data);\r\n      }\r\n      \r\n      setTotalItems(result.pagination.totalItems);\r\n    }\r\n  };\r\n\r\n  const handleChangePage = (_event: unknown, newPage: number) => {\r\n    setPage(newPage);\r\n  };\r\n\r\n  const handleChangeRowsPerPage = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    setRowsPerPage(parseInt(event.target.value, 10));\r\n    setPage(0);\r\n  };\r\n  const handleSearch = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    setSearchTerm(event.target.value);\r\n    // Local filtering for the search term\r\n    // Note: For better performance in larger datasets, consider API-based search\r\n  };\r\n  const handleCustomerSearch = async (searchTerm: string) => {\r\n    setCustomerSearchTerm(searchTerm);\r\n    if (searchTerm.length > 2) {\r\n      const result = await searchCustomers({ search: searchTerm });\r\n      if (result) {\r\n        setCustomerOptions(result.data);\r\n      }\r\n    } else if (searchTerm.length === 0) {\r\n      setCustomerOptions([]);\r\n    }\r\n  };\r\n\r\n  const clearFilters = () => {\r\n    setSelectedPaymentMethod('');\r\n    setSelectedStatus('');\r\n    setStartDate(null);\r\n    setEndDate(null);\r\n    setSelectedCustomerId('');\r\n    setSelectedOrderId('');\r\n    setSelectedInvoiceId('');\r\n    setSearchTerm('');\r\n    setCustomerSearchTerm('');\r\n    setCustomerOptions([]);\r\n  };\r\n\r\n  const handleDeletePayment = async () => {\r\n    if (!selectedPayment) return;\r\n    \r\n    const success = await deletePayment(selectedPayment.id);\r\n    if (success) {\r\n      enqueueSnackbar('Payment successfully deleted', { variant: 'success' });\r\n      fetchPayments();\r\n    } else {\r\n      enqueueSnackbar('Failed to delete payment', { variant: 'error' });\r\n    }\r\n    \r\n    setIsDeleteConfirmOpen(false);\r\n    setSelectedPayment(null);\r\n  };\r\n\r\n  // Handle successful payment creation\r\n  const handlePaymentCreated = () => {\r\n    fetchPayments();\r\n    setIsCreateModalOpen(false);\r\n    enqueueSnackbar('Payment successfully created', { variant: 'success' });\r\n  };\r\n\r\n  // Handle successful payment update\r\n  const handlePaymentUpdated = () => {\r\n    fetchPayments();\r\n    setIsUpdateModalOpen(false);\r\n    setSelectedPayment(null);\r\n    enqueueSnackbar('Payment successfully updated', { variant: 'success' });\r\n  };\r\n\r\n  // Handle successful payment reconciliation\r\n  const handlePaymentReconciled = () => {\r\n    fetchPayments();\r\n    setIsReconcileModalOpen(false);\r\n    setSelectedPayment(null);\r\n    enqueueSnackbar('Payment successfully reconciled', { variant: 'success' });\r\n  };\r\n\r\n  const getStatusChipColor = (status: ReconciliationStatus) => {\r\n    switch (status) {\r\n      case 'reconciled':\r\n        return 'success';\r\n      case 'disputed':\r\n        return 'error';\r\n      case 'pending_review':\r\n        return 'warning';\r\n      case 'unreconciled':\r\n      default:\r\n        return 'default';\r\n    }\r\n  };\r\n\r\n  const formatCurrency = (amount: number) => {\r\n    return new Intl.NumberFormat('en-US', {\r\n      style: 'currency',\r\n      currency: 'USD',\r\n      minimumFractionDigits: 2\r\n    }).format(amount);\r\n  };\r\n\r\n  return (\r\n    <Box sx={{ p: 3 }}>\r\n      <Typography variant=\"h4\" gutterBottom sx={{ color: whitelabelTheme.primaryColor }}>\r\n        Payment Management\r\n      </Typography>\r\n      \r\n      <Box sx={{ mb: 3, display: 'flex', flexDirection: { xs: 'column', md: 'row' }, gap: 2, alignItems: 'flex-start' }}>\r\n        {/* Search field */}\r\n        <TextField\r\n          placeholder=\"Search payments...\"\r\n          variant=\"outlined\"\r\n          size=\"small\"\r\n          value={searchTerm}\r\n          onChange={handleSearch}\r\n          InputProps={{\r\n            startAdornment: (\r\n              <InputAdornment position=\"start\">\r\n                <SearchIcon />\r\n              </InputAdornment>\r\n            )\r\n          }}\r\n          sx={{ minWidth: '250px', flex: { xs: 1, md: 'initial' } }}\r\n        />\r\n        \r\n        <Box sx={{ display: 'flex', gap: 2, flexWrap: 'wrap', flex: 1, justifyContent: 'flex-end' }}>\r\n          <Button\r\n            startIcon={<FilterIcon />}\r\n            variant=\"outlined\"\r\n            onClick={() => {}}\r\n            sx={{ backgroundColor: 'background.paper' }}\r\n          >\r\n            Advanced Filters\r\n          </Button>\r\n          \r\n          <Button\r\n            startIcon={<RefreshIcon />}\r\n            variant=\"outlined\"\r\n            onClick={fetchPayments}\r\n            sx={{ backgroundColor: 'background.paper' }}\r\n          >\r\n            Refresh\r\n          </Button>\r\n          \r\n          <Button\r\n            startIcon={<AddIcon />}\r\n            variant=\"contained\"\r\n            onClick={() => setIsCreateModalOpen(true)}\r\n            sx={{ backgroundColor: whitelabelTheme.primaryColor }}\r\n          >\r\n            New Payment\r\n          </Button>\r\n        </Box>\r\n      </Box>\r\n\r\n      {/* Filter panel */}\r\n      <Paper sx={{ mb: 3, p: 2, display: 'flex', flexDirection: 'column', gap: 2 }}>\r\n        <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>\r\n          <Typography variant=\"h6\">Filters</Typography>\r\n          <Button size=\"small\" onClick={clearFilters}>Clear All</Button>\r\n        </Box>        <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 2 }}>\r\n          <Box sx={{ width: { xs: '100%', sm: '48%', md: '23%' } }}>\r\n            <LocalizationProvider dateAdapter={AdapterDateFns}>\r\n              <DatePicker\r\n                label=\"Start Date\"\r\n                value={startDate}\r\n                onChange={(newValue) => setStartDate(newValue)}\r\n                slotProps={{ textField: { size: 'small', fullWidth: true } }}\r\n              />\r\n            </LocalizationProvider>\r\n          </Box>\r\n          <Box sx={{ width: { xs: '100%', sm: '48%', md: '23%' } }}>\r\n            <LocalizationProvider dateAdapter={AdapterDateFns}>\r\n              <DatePicker\r\n                label=\"End Date\"\r\n                value={endDate}\r\n                onChange={(newValue) => setEndDate(newValue)}\r\n                slotProps={{ textField: { size: 'small', fullWidth: true } }}\r\n              />\r\n            </LocalizationProvider>\r\n          </Box>\r\n          <Box sx={{ width: { xs: '100%', sm: '48%', md: '23%' } }}>\r\n            <FormControl fullWidth size=\"small\">\r\n              <InputLabel>Payment Method</InputLabel>\r\n              <Select\r\n                value={selectedPaymentMethod}\r\n                label=\"Payment Method\"\r\n                onChange={(e) => setSelectedPaymentMethod(e.target.value)}\r\n              >\r\n                <MenuItem value=\"\">All</MenuItem>\r\n                <MenuItem value=\"credit_card\">Credit Card</MenuItem>\r\n                <MenuItem value=\"bank_transfer\">Bank Transfer</MenuItem>\r\n                <MenuItem value=\"cash\">Cash</MenuItem>\r\n                <MenuItem value=\"check\">Check</MenuItem>\r\n                <MenuItem value=\"paypal\">PayPal</MenuItem>\r\n                <MenuItem value=\"stripe\">Stripe</MenuItem>\r\n                <MenuItem value=\"other\">Other</MenuItem>\r\n              </Select>\r\n            </FormControl>\r\n          </Box>\r\n          <Box sx={{ width: { xs: '100%', sm: '48%', md: '23%' } }}>\r\n            <FormControl fullWidth size=\"small\">\r\n              <InputLabel>Status</InputLabel>\r\n              <Select\r\n                value={selectedStatus}\r\n                label=\"Status\"\r\n                onChange={(e) => setSelectedStatus(e.target.value)}\r\n              >\r\n                <MenuItem value=\"\">All</MenuItem>\r\n                <MenuItem value=\"unreconciled\">Unreconciled</MenuItem>\r\n                <MenuItem value=\"reconciled\">Reconciled</MenuItem>\r\n                <MenuItem value=\"disputed\">Disputed</MenuItem>\r\n                <MenuItem value=\"pending_review\">Pending Review</MenuItem>\r\n              </Select>\r\n            </FormControl>\r\n          </Box>          <Box sx={{ width: { xs: '100%', sm: '48%', md: '23%' } }}>\r\n            <FormControl fullWidth size=\"small\">\r\n              <InputLabel>Customer</InputLabel>\r\n              <Select\r\n                value={selectedCustomerId}\r\n                label=\"Customer\"\r\n                onChange={(e) => setSelectedCustomerId(e.target.value)}\r\n                renderValue={(selected) => {\r\n                  if (!selected) return \"All Customers\";\r\n                  return customerMap[selected]?.name || `Customer ${selected.substring(0, 8)}`;\r\n                }}\r\n              >\r\n                <MenuItem value=\"\">All Customers</MenuItem>\r\n                {Object.values(customerMap).map((customer) => (\r\n                  <MenuItem key={customer.id} value={customer.id}>\r\n                    {customer.name}\r\n                  </MenuItem>\r\n                ))}\r\n              </Select>\r\n            </FormControl>\r\n          </Box>\r\n          \r\n          {/* Additional filters row */}          <Box sx={{ width: '100%', display: 'flex', flexWrap: 'wrap', gap: 2, mt: 1 }}>\r\n            <Box sx={{ width: { xs: '100%', sm: '48%', md: '31%' } }}>\r\n              <TextField\r\n                label=\"Order ID\"\r\n                size=\"small\"\r\n                fullWidth\r\n                value={selectedOrderId}\r\n                onChange={(e) => setSelectedOrderId(e.target.value)}\r\n              />\r\n            </Box>\r\n            <Box sx={{ width: { xs: '100%', sm: '48%', md: '31%' } }}>\r\n              <TextField\r\n                label=\"Invoice ID\"\r\n                size=\"small\"\r\n                fullWidth\r\n                value={selectedInvoiceId}\r\n                onChange={(e) => setSelectedInvoiceId(e.target.value)}\r\n              />\r\n            </Box>\r\n            <Box sx={{ width: { xs: '100%', sm: '48%', md: '31%' } }}>\r\n              <Box sx={{ display: 'flex', gap: 1 }}>\r\n                <Button\r\n                  variant=\"contained\"\r\n                  color=\"primary\"\r\n                  onClick={fetchPayments}\r\n                  startIcon={<SearchIcon />}\r\n                  fullWidth\r\n                  sx={{ height: '40px' }}\r\n                >\r\n                  Apply Filters\r\n                </Button>\r\n                <Button\r\n                  variant=\"outlined\"\r\n                  color=\"primary\"\r\n                  onClick={() => {\r\n                    clearFilters();\r\n                    fetchPayments();\r\n                  }}\r\n                  startIcon={<RefreshIcon />}\r\n                  sx={{ height: '40px', minWidth: '100px' }}\r\n                >\r\n                  Reset\r\n                </Button>\r\n              </Box>\r\n            </Box>\r\n          </Box>\r\n        </Box>\r\n      </Paper>\r\n\r\n      {/* Payments table */}\r\n      <Paper sx={{ width: '100%', overflow: 'hidden' }}>\r\n        <TableContainer sx={{ maxHeight: 'calc(100vh - 320px)' }}>\r\n          <Table stickyHeader aria-label=\"sticky table\">\r\n            <TableHead>              <TableRow>\r\n                <TableCell>ID</TableCell>\r\n                <TableCell>Date</TableCell>\r\n                <TableCell>Customer Name</TableCell>\r\n                <TableCell>Amount</TableCell>\r\n                <TableCell>Type</TableCell>\r\n                <TableCell>Method</TableCell>\r\n                <TableCell>Reference</TableCell>\r\n                <TableCell>Status</TableCell>\r\n                <TableCell align=\"right\">Actions</TableCell>\r\n              </TableRow>\r\n            </TableHead>\r\n            <TableBody>\r\n              {loading ? (\r\n                <TableRow>\r\n                  <TableCell colSpan={9} align=\"center\">Loading...</TableCell>\r\n                </TableRow>\r\n              ) : error ? (\r\n                <TableRow>\r\n                  <TableCell colSpan={9} align=\"center\" sx={{ color: 'error.main' }}>\r\n                    Error loading payments: {error}\r\n                  </TableCell>\r\n                </TableRow>\r\n              ) : payments.length === 0 ? (\r\n                <TableRow>\r\n                  <TableCell colSpan={9} align=\"center\">No payments found</TableCell>\r\n                </TableRow>\r\n              ) : (                payments.map((payment) => (\r\n                  <TableRow key={payment.id} hover>                    <TableCell>{payment.transactionId}</TableCell>\r\n                    <TableCell>{format(new Date(payment.paymentDate), 'MMM dd, yyyy')}</TableCell>\r\n                    <TableCell>{payment.customerName || payment.customerId}</TableCell>\r\n                    <TableCell>{formatCurrency(payment.amount)}</TableCell>\r\n                    <TableCell>\r\n                      <Chip\r\n                        label={payment.paymentType.replace('_', ' ')}\r\n                        size=\"small\"\r\n                        color={payment.paymentType === 'refund' ? 'warning' : 'primary'}\r\n                      />\r\n                    </TableCell>\r\n                    <TableCell>{payment.paymentMethod.replace('_', ' ')}</TableCell>\r\n                    <TableCell>\r\n                      {payment.orderId ? `Order: ${payment.orderId.substring(0, 8)}...` : ''}\r\n                      {payment.invoiceId ? `Invoice: ${payment.invoiceId.substring(0, 8)}...` : ''}\r\n                      {!payment.orderId && !payment.invoiceId ? '-' : ''}\r\n                    </TableCell>\r\n                    <TableCell>\r\n                      <Chip\r\n                        label={payment.reconciliationStatus.replace('_', ' ')}\r\n                        size=\"small\"\r\n                        color={getStatusChipColor(payment.reconciliationStatus) as any}\r\n                      />\r\n                    </TableCell>\r\n                    <TableCell align=\"right\">\r\n                      <Tooltip title=\"Edit payment\">\r\n                        <IconButton\r\n                          size=\"small\"\r\n                          onClick={() => {\r\n                            setSelectedPayment(payment);\r\n                            setIsUpdateModalOpen(true);\r\n                          }}\r\n                        >\r\n                          <EditIcon fontSize=\"small\" />\r\n                        </IconButton>\r\n                      </Tooltip>\r\n                      <Tooltip title=\"Reconcile payment\">\r\n                        <IconButton\r\n                          size=\"small\"\r\n                          onClick={() => {\r\n                            setSelectedPayment(payment);\r\n                            setIsReconcileModalOpen(true);\r\n                          }}\r\n                          disabled={payment.reconciliationStatus === 'reconciled'}\r\n                        >\r\n                          <CheckIcon fontSize=\"small\" />\r\n                        </IconButton>\r\n                      </Tooltip>\r\n                      <Tooltip title=\"Delete payment\">\r\n                        <IconButton\r\n                          size=\"small\"\r\n                          color=\"error\"\r\n                          onClick={() => {\r\n                            setSelectedPayment(payment);\r\n                            setIsDeleteConfirmOpen(true);\r\n                          }}\r\n                        >\r\n                          <DeleteIcon fontSize=\"small\" />\r\n                        </IconButton>\r\n                      </Tooltip>\r\n                    </TableCell>\r\n                  </TableRow>\r\n                ))\r\n              )}\r\n            </TableBody>\r\n          </Table>\r\n        </TableContainer>\r\n        <TablePagination\r\n          rowsPerPageOptions={[5, 10, 25, 50]}\r\n          component=\"div\"\r\n          count={totalItems}\r\n          rowsPerPage={rowsPerPage}\r\n          page={page}\r\n          onPageChange={handleChangePage}\r\n          onRowsPerPageChange={handleChangeRowsPerPage}\r\n        />\r\n      </Paper>\r\n\r\n      {/* Create Payment Modal */}\r\n      <CreatePaymentModal\r\n        open={isCreateModalOpen}\r\n        onClose={() => setIsCreateModalOpen(false)}\r\n        onPaymentCreated={handlePaymentCreated}\r\n      />\r\n\r\n      {/* Update Payment Modal */}\r\n      {selectedPayment && (\r\n        <UpdatePaymentModal\r\n          open={isUpdateModalOpen}\r\n          onClose={() => {\r\n            setIsUpdateModalOpen(false);\r\n            setSelectedPayment(null);\r\n          }}\r\n          payment={selectedPayment}\r\n          onPaymentUpdated={handlePaymentUpdated}\r\n        />\r\n      )}\r\n\r\n      {/* Reconcile Payment Modal */}\r\n      {selectedPayment && (\r\n        <ReconcilePaymentModal\r\n          open={isReconcileModalOpen}\r\n          onClose={() => {\r\n            setIsReconcileModalOpen(false);\r\n            setSelectedPayment(null);\r\n          }}\r\n          payment={selectedPayment}\r\n          onPaymentReconciled={handlePaymentReconciled}\r\n        />\r\n      )}\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default PaymentManagement;\r\n","usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"d:\\All python project\\Tubex\\Frontend\\app\\src\\components\\payment\\PaymentManagementRefactored.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'useMuiTheme' is defined but never used. Allowed unused vars must match /^_/u.","line":17,"column":15,"nodeType":"Identifier","messageId":"unusedVar","endLine":17,"endColumn":26},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'PaymentType' is defined but never used. Allowed unused vars must match /^_/u.","line":40,"column":34,"nodeType":"Identifier","messageId":"unusedVar","endLine":40,"endColumn":45},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'whitelabelTheme' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":50,"column":18,"nodeType":"Identifier","messageId":"unusedVar","endLine":50,"endColumn":33},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'apiLoading' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":52,"column":14,"nodeType":"Identifier","messageId":"unusedVar","endLine":52,"endColumn":24},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'apiError' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":53,"column":12,"nodeType":"Identifier","messageId":"unusedVar","endLine":53,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":67,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":67,"endColumn":10},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'sortBy' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":71,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":71,"endColumn":11},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'sortDirection' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":72,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":72,"endColumn":18},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'handleSortByChange' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":77,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":77,"endColumn":23},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'handleSortDirectionChange' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":78,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":78,"endColumn":30},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'dispatch' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":83,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":83,"endColumn":13},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'customerSearchTerm' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":94,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":94,"endColumn":28},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'isDeleteConfirmOpen' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":100,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":100,"endColumn":29},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'fetchPayments'. Either include it or remove the dependency array.","line":178,"column":6,"nodeType":"ArrayExpression","endLine":178,"endColumn":34,"suggestions":[{"desc":"Update the dependencies array to be: [fetchData, fetchPayments, searchCustomers]","fix":{"range":[5937,5965],"text":"[fetchData, fetchPayments, searchCustomers]"}}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'handleCustomerSearch' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":181,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":181,"endColumn":29},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'handleDeletePayment' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":236,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":236,"endColumn":28}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useEffect, useCallback } from 'react';\r\nimport {\r\n  Typography,\r\n  Paper,\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableContainer,\r\n  TableHead,\r\n  TableRow,\r\n  Button,\r\n  TextField,\r\n  InputAdornment,\r\n  IconButton,\r\n  Chip,\r\n  TablePagination,\r\n  useTheme as useMuiTheme,\r\n  FormControl,\r\n  InputLabel,\r\n  Select,\r\n  MenuItem,\r\n  Box,\r\n  Tooltip\r\n} from '@mui/material';\r\nimport { DatePicker } from '@mui/x-date-pickers/DatePicker';\r\nimport { AdapterDateFns } from '@mui/x-date-pickers/AdapterDateFns';\r\nimport { LocalizationProvider } from '@mui/x-date-pickers/LocalizationProvider';\r\nimport { \r\n  Search as SearchIcon,\r\n  FilterList as FilterIcon,\r\n  Add as AddIcon,\r\n  Refresh as RefreshIcon,\r\n  Edit as EditIcon,\r\n  Delete as DeleteIcon,\r\n  Check as CheckIcon\r\n} from '@mui/icons-material';\r\nimport { useTheme } from '../../contexts/ThemeContext';\r\nimport { usePayment } from '../../hooks/usePayment';\r\nimport { useCustomer } from '../../hooks/useCustomer';\r\nimport { Payment, PaymentMethod, PaymentType, ReconciliationStatus } from '../../services/api/paymentService';\r\nimport { Customer } from '../../services/api/customerService';\r\nimport CreatePaymentModal from './CreatePaymentModal';\r\nimport UpdatePaymentModal from './UpdatePaymentModal';\r\nimport ReconcilePaymentModal from './ReconcilePaymentModal';\r\nimport { format } from 'date-fns';\r\nimport { useSnackbar } from 'notistack';\r\nimport useTableData from '../../hooks/useTableData';\r\n\r\nconst PaymentManagement: React.FC = () => {\r\n  const { theme: whitelabelTheme } = useTheme();\r\n  const { \r\n    loading: apiLoading, \r\n    error: apiError, \r\n    getPayments, \r\n    deletePayment \r\n  } = usePayment();\r\n  const {\r\n    getCustomersByIds,\r\n    searchCustomers\r\n  } = useCustomer();\r\n  const { enqueueSnackbar } = useSnackbar();\r\n\r\n  // Use our custom hook for table data management\r\n  const {\r\n    data: payments,\r\n    loading,\r\n    error,\r\n    page,\r\n    rowsPerPage,\r\n    totalCount,\r\n    sortBy,\r\n    sortDirection,\r\n    searchQuery,\r\n    filters,\r\n    handlePageChange,\r\n    handleRowsPerPageChange,\r\n    handleSortByChange,\r\n    handleSortDirectionChange,\r\n    handleSearchQueryChange,\r\n    handleFilterChange,\r\n    resetFilters,\r\n    fetchData,\r\n    dispatch\r\n  } = useTableData<Payment>({\r\n    defaultSortBy: 'created_at',\r\n    defaultSortDirection: 'desc',\r\n    defaultRowsPerPage: 10,\r\n    defaultFilters: {}\r\n  });\r\n\r\n  // Additional state for UI components\r\n  const [customerMap, setCustomerMap] = React.useState<Record<string, Customer>>({});\r\n  const [customerOptions, setCustomerOptions] = React.useState<Customer[]>([]);\r\n  const [customerSearchTerm, setCustomerSearchTerm] = React.useState('');\r\n\r\n  // Modal states\r\n  const [isCreateModalOpen, setIsCreateModalOpen] = React.useState(false);\r\n  const [isUpdateModalOpen, setIsUpdateModalOpen] = React.useState(false);\r\n  const [isReconcileModalOpen, setIsReconcileModalOpen] = React.useState(false);\r\n  const [isDeleteConfirmOpen, setIsDeleteConfirmOpen] = React.useState(false);\r\n  const [selectedPayment, setSelectedPayment] = React.useState<Payment | null>(null);\r\n  // Define the fetch function to pass to useTableData\r\n  const fetchPayments = useCallback(async (params: any) => {\r\n    try {\r\n      // Convert params for the API\r\n      const apiParams = {\r\n        page: params.page,\r\n        limit: params.limit,\r\n        sortBy: params.sortBy,\r\n        sortDirection: params.sortDirection,\r\n        search: params.search,\r\n        startDate: params.startDate ? format(new Date(params.startDate), 'yyyy-MM-dd') : undefined,\r\n        endDate: params.endDate ? format(new Date(params.endDate), 'yyyy-MM-dd') : undefined,\r\n        paymentMethod: params.paymentMethod,\r\n        status: params.status,\r\n        customerId: params.customerId,\r\n        orderId: params.orderId,\r\n        invoiceId: params.invoiceId\r\n      };\r\n\r\n      const response = await getPayments(apiParams);\r\n      if (!response) {\r\n        return { data: [], totalCount: 0 };\r\n      }\r\n      \r\n      const paymentsList = Array.isArray(response.data) ? response.data : [];\r\n      const totalItems = response.pagination?.totalItems || paymentsList.length;\r\n\r\n      // Get all unique customer IDs\r\n      const customerIds = Array.from(new Set(\r\n        paymentsList\r\n          .filter(payment => payment.customerId)\r\n          .map(payment => payment.customerId)\r\n      )) as string[];\r\n\r\n      // Fetch customer details if needed\r\n      if (customerIds.length > 0) {\r\n        try {\r\n          const customersResponse = await getCustomersByIds(customerIds);\r\n          if (customersResponse && Array.isArray(customersResponse.data)) {\r\n            const newCustomerMap = customersResponse.data.reduce((acc, customer) => {\r\n              acc[customer.id] = customer;\r\n              return acc;\r\n            }, {} as Record<string, Customer>);\r\n            \r\n            setCustomerMap(prevMap => ({ ...prevMap, ...newCustomerMap }));\r\n          }\r\n        } catch (error) {\r\n          console.error('Failed to fetch customer details:', error);\r\n        }\r\n      }\r\n\r\n      return {\r\n        data: paymentsList,\r\n        totalCount: totalItems\r\n      };\r\n    } catch (error) {\r\n      console.error('Error fetching payments:', error);\r\n      throw error;\r\n    }\r\n  }, [getPayments, getCustomersByIds]);\r\n\r\n  // Initialize the data\r\n  useEffect(() => {\r\n    fetchData(fetchPayments);\r\n    \r\n    // Initialize customer filter options\r\n    searchCustomers({ limit: 10 }).then(result => {\r\n      if (result && result.data.length > 0) {\r\n        setCustomerOptions(result.data);\r\n        const initialCustomers = result.data.reduce((acc, customer) => {\r\n          acc[customer.id] = customer;\r\n          return acc;\r\n        }, {} as Record<string, Customer>);\r\n        setCustomerMap(prevMap => ({ ...prevMap, ...initialCustomers }));\r\n      }\r\n    }).catch(error => console.error('Failed to load initial customers', error));\r\n  }, [fetchData, searchCustomers]);\r\n\r\n  // Customer search handler\r\n  const handleCustomerSearch = useCallback(async (searchValue: string) => {\r\n    if (!searchValue) {\r\n      setCustomerOptions([]);\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const result = await searchCustomers({ search: searchValue, limit: 10 });\r\n      if (result && result.data) {\r\n        setCustomerOptions(result.data);\r\n      }\r\n    } catch (error) {\r\n      console.error('Error searching customers:', error);\r\n    }\r\n  }, [searchCustomers]);\r\n\r\n  // Filter handlers\r\n  const handleDateChange = useCallback((key: string, value: Date | null) => {\r\n    handleFilterChange(key, value);\r\n  }, [handleFilterChange]);\r\n\r\n  const handlePaymentMethodChange = useCallback((event: React.ChangeEvent<{ value: unknown }>) => {\r\n    handleFilterChange('paymentMethod', event.target.value as string);\r\n  }, [handleFilterChange]);\r\n\r\n  const handleStatusChange = useCallback((event: React.ChangeEvent<{ value: unknown }>) => {\r\n    handleFilterChange('status', event.target.value as string);\r\n  }, [handleFilterChange]);\r\n\r\n  const handleCustomerChange = useCallback((event: React.ChangeEvent<{ value: unknown }>) => {\r\n    const customerId = event.target.value as string;\r\n    handleFilterChange('customerId', customerId);\r\n    setCustomerSearchTerm('');\r\n  }, [handleFilterChange]);\r\n\r\n  // Action handlers\r\n  const handleCreatePayment = useCallback(() => {\r\n    setIsCreateModalOpen(true);\r\n  }, []);\r\n\r\n  const handleUpdatePayment = useCallback((payment: Payment) => {\r\n    setSelectedPayment(payment);\r\n    setIsUpdateModalOpen(true);\r\n  }, []);\r\n\r\n  const handleReconcilePayment = useCallback((payment: Payment) => {\r\n    setSelectedPayment(payment);\r\n    setIsReconcileModalOpen(true);\r\n  }, []);\r\n\r\n  const handleDeletePaymentClick = useCallback((payment: Payment) => {\r\n    setSelectedPayment(payment);\r\n    setIsDeleteConfirmOpen(true);\r\n  }, []);\r\n\r\n  const handleDeletePayment = useCallback(async () => {\r\n    if (!selectedPayment) return;\r\n    \r\n    try {\r\n      await deletePayment(selectedPayment.id);\r\n      \r\n      enqueueSnackbar('Payment deleted successfully', { variant: 'success' });\r\n      \r\n      // Refresh the data\r\n      fetchData(fetchPayments);\r\n    } catch (error) {\r\n      console.error('Error deleting payment:', error);\r\n      enqueueSnackbar('Failed to delete payment', { variant: 'error' });\r\n    } finally {\r\n      setIsDeleteConfirmOpen(false);\r\n      setSelectedPayment(null);\r\n    }\r\n  }, [selectedPayment, deletePayment, enqueueSnackbar, fetchData, fetchPayments]);\r\n  // Render payment method chip\r\n  const renderPaymentMethodChip = (method: PaymentMethod) => {\r\n    const methodConfigs: Record<string, { label: string, color: string }> = {\r\n      [PaymentMethod.CREDIT_CARD]: { label: 'Credit Card', color: 'primary' },\r\n      [PaymentMethod.BANK_TRANSFER]: { label: 'Bank Transfer', color: 'secondary' },\r\n      [PaymentMethod.CASH]: { label: 'Cash', color: 'default' },\r\n      [PaymentMethod.CHECK]: { label: 'Check', color: 'default' },\r\n      [PaymentMethod.PAYPAL]: { label: 'PayPal', color: 'info' },\r\n      [PaymentMethod.OTHER]: { label: 'Other', color: 'default' },\r\n    };\r\n    \r\n    const methodConfig = methodConfigs[method] || { label: method, color: 'default' };\r\n\r\n    return (\r\n      <Chip \r\n        label={methodConfig.label} \r\n        color={methodConfig.color as any}\r\n        size=\"small\"\r\n      />\r\n    );\r\n  };\r\n  // Render payment status chip\r\n  const renderStatusChip = (status: ReconciliationStatus) => {\r\n    const statusConfigs: Record<string, { label: string, color: string }> = {\r\n      [ReconciliationStatus.PENDING]: { label: 'Pending', color: 'warning' },\r\n      [ReconciliationStatus.RECONCILED]: { label: 'Reconciled', color: 'success' },\r\n      [ReconciliationStatus.FAILED]: { label: 'Failed', color: 'error' },\r\n      [ReconciliationStatus.PARTIAL]: { label: 'Partial', color: 'info' },\r\n    };\r\n    \r\n    const statusConfig = statusConfigs[status] || { label: status, color: 'default' };\r\n\r\n    return (\r\n      <Chip \r\n        label={statusConfig.label} \r\n        color={statusConfig.color as any}\r\n        size=\"small\"\r\n      />\r\n    );\r\n  };\r\n\r\n  // Get customer name from the map\r\n  const getCustomerName = (customerId?: string) => {\r\n    if (!customerId) return 'N/A';\r\n    return customerMap[customerId]?.name || 'Unknown Customer';\r\n  };\r\n\r\n  return (\r\n    <Box>\r\n      <Box sx={{ mb: 3, display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>\r\n        <Typography variant=\"h6\">Payments</Typography>\r\n        \r\n        <Box sx={{ display: 'flex', gap: 1 }}>\r\n          <Button\r\n            variant=\"contained\"\r\n            startIcon={<RefreshIcon />}\r\n            onClick={() => fetchData(fetchPayments)}\r\n            size=\"small\"\r\n          >\r\n            Refresh\r\n          </Button>\r\n          \r\n          <Button\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            startIcon={<AddIcon />}\r\n            onClick={handleCreatePayment}\r\n          >\r\n            New Payment\r\n          </Button>\r\n        </Box>\r\n      </Box>\r\n      \r\n      <Paper sx={{ p: 2, mb: 3 }}>\r\n        <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 2, mb: 2 }}>\r\n          {/* Search field */}\r\n          <TextField\r\n            placeholder=\"Search payments...\"\r\n            size=\"small\"\r\n            value={searchQuery}\r\n            onChange={(e) => handleSearchQueryChange(e.target.value)}\r\n            InputProps={{\r\n              startAdornment: (\r\n                <InputAdornment position=\"start\">\r\n                  <SearchIcon />\r\n                </InputAdornment>\r\n              )\r\n            }}\r\n            sx={{ minWidth: 220 }}\r\n          />\r\n          \r\n          {/* Date range filters */}\r\n          <LocalizationProvider dateAdapter={AdapterDateFns}>\r\n            <DatePicker\r\n              label=\"From Date\"\r\n              value={filters.startDate || null}\r\n              onChange={(date) => handleDateChange('startDate', date)}\r\n              slotProps={{ textField: { size: 'small' } }}\r\n              format=\"MM/dd/yyyy\"\r\n            />\r\n            \r\n            <DatePicker\r\n              label=\"To Date\"\r\n              value={filters.endDate || null}\r\n              onChange={(date) => handleDateChange('endDate', date)}\r\n              slotProps={{ textField: { size: 'small' } }}\r\n              format=\"MM/dd/yyyy\"\r\n            />\r\n          </LocalizationProvider>\r\n            {/* Payment method filter */}\r\n          <FormControl size=\"small\" sx={{ minWidth: 150 }}>\r\n            <InputLabel id=\"payment-method-filter-label\">Payment Method</InputLabel>\r\n            <Select\r\n              labelId=\"payment-method-filter-label\"\r\n              value={filters.paymentMethod || ''}\r\n              onChange={handlePaymentMethodChange as any}\r\n              label=\"Payment Method\"\r\n            >\r\n              <MenuItem value=\"\">All Methods</MenuItem>\r\n              {Object.values(PaymentMethod).filter(v => typeof v === 'string').map((method) => (\r\n                <MenuItem key={method as string} value={method as string}>\r\n                  {(method as string).replace(/_/g, ' ')}\r\n                </MenuItem>\r\n              ))}\r\n            </Select>\r\n          </FormControl>\r\n          \r\n          {/* Status filter */}\r\n          <FormControl size=\"small\" sx={{ minWidth: 150 }}>\r\n            <InputLabel id=\"status-filter-label\">Status</InputLabel>\r\n            <Select\r\n              labelId=\"status-filter-label\"\r\n              value={filters.status || ''}\r\n              onChange={handleStatusChange as any}\r\n              label=\"Status\"\r\n            >\r\n              <MenuItem value=\"\">All Statuses</MenuItem>\r\n              {Object.values(ReconciliationStatus).filter(v => typeof v === 'string').map((status) => (\r\n                <MenuItem key={status as string} value={status as string}>\r\n                  {(status as string).replace(/_/g, ' ')}\r\n                </MenuItem>\r\n              ))}\r\n            </Select>\r\n          </FormControl>\r\n          \r\n          {/* Customer filter */}\r\n          <FormControl size=\"small\" sx={{ minWidth: 200 }}>\r\n            <InputLabel id=\"customer-filter-label\">Customer</InputLabel>\r\n            <Select\r\n              labelId=\"customer-filter-label\"\r\n              value={filters.customerId || ''}\r\n              onChange={handleCustomerChange as any}\r\n              label=\"Customer\"\r\n            >\r\n              <MenuItem value=\"\">All Customers</MenuItem>\r\n              {customerOptions.map((customer) => (\r\n                <MenuItem key={customer.id} value={customer.id}>\r\n                  {customer.name}\r\n                </MenuItem>\r\n              ))}\r\n            </Select>\r\n          </FormControl>\r\n          \r\n          {/* Reset filters button */}\r\n          <Button\r\n            variant=\"outlined\"\r\n            size=\"small\"\r\n            startIcon={<FilterIcon />}\r\n            onClick={resetFilters}\r\n          >\r\n            Reset Filters\r\n          </Button>\r\n        </Box>\r\n      </Paper>\r\n      \r\n      <TableContainer component={Paper}>\r\n        <Table>\r\n          <TableHead>\r\n            <TableRow>\r\n              <TableCell>ID</TableCell>\r\n              <TableCell>Customer</TableCell>\r\n              <TableCell>Amount</TableCell>\r\n              <TableCell>Method</TableCell>\r\n              <TableCell>Status</TableCell>\r\n              <TableCell>Date</TableCell>\r\n              <TableCell align=\"right\">Actions</TableCell>\r\n            </TableRow>\r\n          </TableHead>\r\n          \r\n          <TableBody>\r\n            {loading ? (\r\n              Array.from(new Array(5)).map((_, index) => (\r\n                <TableRow key={index}>\r\n                  <TableCell colSpan={7} align=\"center\">Loading...</TableCell>\r\n                </TableRow>\r\n              ))\r\n            ) : payments.length === 0 ? (\r\n              <TableRow>\r\n                <TableCell colSpan={7} align=\"center\">No payments found</TableCell>\r\n              </TableRow>\r\n            ) : (\r\n              payments.map((payment) => (\r\n                <TableRow key={payment.id} hover>                  <TableCell>{payment.referenceNumber || payment.id.substring(0, 8)}</TableCell>\r\n                  <TableCell>{getCustomerName(payment.customerId)}</TableCell>\r\n                  <TableCell>${payment.amount.toFixed(2)}</TableCell>\r\n                  <TableCell>{renderPaymentMethodChip(payment.paymentMethod)}</TableCell>\r\n                  <TableCell>{renderStatusChip(payment.reconciliationStatus)}</TableCell>\r\n                  <TableCell>\r\n                    {payment.paymentDate ? format(new Date(payment.paymentDate), 'MMM dd, yyyy') : 'N/A'}\r\n                  </TableCell>\r\n                  <TableCell align=\"right\">\r\n                    <Box sx={{ display: 'flex', justifyContent: 'flex-end' }}>\r\n                      {payment.reconciliationStatus !== ReconciliationStatus.RECONCILED && (\r\n                        <Tooltip title=\"Reconcile Payment\">\r\n                          <IconButton\r\n                            size=\"small\"\r\n                            color=\"primary\"\r\n                            onClick={() => handleReconcilePayment(payment)}\r\n                          >\r\n                            <CheckIcon fontSize=\"small\" />\r\n                          </IconButton>\r\n                        </Tooltip>\r\n                      )}\r\n                      \r\n                      <Tooltip title=\"Edit Payment\">\r\n                        <IconButton\r\n                          size=\"small\"\r\n                          color=\"primary\"\r\n                          onClick={() => handleUpdatePayment(payment)}\r\n                        >\r\n                          <EditIcon fontSize=\"small\" />\r\n                        </IconButton>\r\n                      </Tooltip>\r\n                      \r\n                      <Tooltip title=\"Delete Payment\">\r\n                        <IconButton\r\n                          size=\"small\"\r\n                          color=\"error\"\r\n                          onClick={() => handleDeletePaymentClick(payment)}\r\n                        >\r\n                          <DeleteIcon fontSize=\"small\" />\r\n                        </IconButton>\r\n                      </Tooltip>\r\n                    </Box>\r\n                  </TableCell>\r\n                </TableRow>\r\n              ))\r\n            )}\r\n          </TableBody>\r\n        </Table>\r\n      </TableContainer>\r\n      \r\n      <TablePagination\r\n        component=\"div\"\r\n        count={totalCount}\r\n        page={page}\r\n        onPageChange={(_, newPage) => handlePageChange(newPage)}\r\n        rowsPerPage={rowsPerPage}\r\n        onRowsPerPageChange={(e) => handleRowsPerPageChange(parseInt(e.target.value, 10))}\r\n        rowsPerPageOptions={[5, 10, 25, 50]}\r\n      />\r\n      \r\n      {/* Create Payment Modal */}\r\n      <CreatePaymentModal\r\n        open={isCreateModalOpen}\r\n        onClose={() => setIsCreateModalOpen(false)}\r\n        onPaymentCreated={() => {\r\n          setIsCreateModalOpen(false);\r\n          fetchData(fetchPayments);\r\n        }}\r\n      />\r\n      \r\n      {/* Update Payment Modal */}\r\n      {selectedPayment && (\r\n        <UpdatePaymentModal\r\n          open={isUpdateModalOpen}\r\n          payment={selectedPayment}\r\n          onClose={() => {\r\n            setIsUpdateModalOpen(false);\r\n            setSelectedPayment(null);\r\n          }}\r\n          onPaymentUpdated={() => {\r\n            setIsUpdateModalOpen(false);\r\n            setSelectedPayment(null);\r\n            fetchData(fetchPayments);\r\n          }}\r\n        />\r\n      )}\r\n      \r\n      {/* Reconcile Payment Modal */}\r\n      {selectedPayment && (\r\n        <ReconcilePaymentModal\r\n          open={isReconcileModalOpen}\r\n          payment={selectedPayment}\r\n          onClose={() => {\r\n            setIsReconcileModalOpen(false);\r\n            setSelectedPayment(null);\r\n          }}\r\n          onPaymentReconciled={() => {\r\n            setIsReconcileModalOpen(false);\r\n            setSelectedPayment(null);\r\n            fetchData(fetchPayments);\r\n          }}\r\n        />\r\n      )}\r\n      \r\n      {/* Delete Payment Confirmation Dialog */}\r\n      {/* This would be implemented with MUI Dialog component */}\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default PaymentManagement;\r\n","usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"d:\\All python project\\Tubex\\Frontend\\app\\src\\components\\payment\\ReconcilePaymentModal.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"d:\\All python project\\Tubex\\Frontend\\app\\src\\components\\payment\\UpdatePaymentModal.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'PaymentMethod' is defined but never used. Allowed unused vars must match /^_/u.","line":23,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":23,"endColumn":16},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'PaymentType' is defined but never used. Allowed unused vars must match /^_/u.","line":24,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":24,"endColumn":14}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\r\nimport {  Dialog,\r\n  DialogTitle,\r\n  DialogContent,\r\n  DialogActions,\r\n  Button,\r\n  TextField,\r\n  FormControl,\r\n  InputLabel,\r\n  Select,\r\n  MenuItem,\r\n  Typography,\r\n  Box,\r\n  InputAdornment,\r\n  CircularProgress\r\n} from '@mui/material';\r\nimport { DatePicker } from '@mui/x-date-pickers/DatePicker';\r\nimport { AdapterDateFns } from '@mui/x-date-pickers/AdapterDateFns';\r\nimport { LocalizationProvider } from '@mui/x-date-pickers/LocalizationProvider';\r\nimport { usePayment } from '../../hooks/usePayment';\r\nimport { \r\n  Payment, \r\n  PaymentMethod, \r\n  PaymentType, \r\n  UpdatePaymentRequest \r\n} from '../../services/api/paymentService';\r\nimport { format } from 'date-fns';\r\n\r\ninterface UpdatePaymentModalProps {\r\n  open: boolean;\r\n  onClose: () => void;\r\n  payment: Payment;\r\n  onPaymentUpdated: () => void;\r\n}\r\n\r\nconst UpdatePaymentModal: React.FC<UpdatePaymentModalProps> = ({ \r\n  open, \r\n  onClose, \r\n  payment, \r\n  onPaymentUpdated \r\n}) => {\r\n  const { updatePayment, loading, error } = usePayment();\r\n  const [formErrors, setFormErrors] = useState<Record<string, string>>({});\r\n  \r\n  // Form state\r\n  const [formData, setFormData] = useState<Partial<UpdatePaymentRequest>>({\r\n    transactionId: payment.transactionId,\r\n    orderId: payment.orderId,\r\n    invoiceId: payment.invoiceId,\r\n    amount: payment.amount,\r\n    paymentMethod: payment.paymentMethod,\r\n    paymentType: payment.paymentType,\r\n    paymentDate: format(new Date(payment.paymentDate), 'yyyy-MM-dd'),\r\n    externalReferenceId: payment.externalReferenceId,\r\n    notes: payment.notes\r\n  });\r\n\r\n  // Update form data when payment changes\r\n  useEffect(() => {\r\n    if (payment && open) {\r\n      setFormData({\r\n        transactionId: payment.transactionId,\r\n        orderId: payment.orderId,\r\n        invoiceId: payment.invoiceId,\r\n        amount: payment.amount,\r\n        paymentMethod: payment.paymentMethod,\r\n        paymentType: payment.paymentType,\r\n        paymentDate: format(new Date(payment.paymentDate), 'yyyy-MM-dd'),\r\n        externalReferenceId: payment.externalReferenceId,\r\n        notes: payment.notes\r\n      });\r\n      setFormErrors({});\r\n    }\r\n  }, [payment, open]);\r\n\r\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement | { name?: string; value: unknown }>) => {\r\n    const { name, value } = e.target;\r\n    if (name) {\r\n      setFormData(prev => ({ ...prev, [name]: value }));\r\n      \r\n      // Clear error for this field when changed\r\n      if (formErrors[name]) {\r\n        setFormErrors(prev => {\r\n          const newErrors = { ...prev };\r\n          delete newErrors[name];\r\n          return newErrors;\r\n        });\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleDateChange = (date: Date | null) => {\r\n    if (date) {\r\n      setFormData(prev => ({ ...prev, paymentDate: format(date, 'yyyy-MM-dd') }));\r\n      \r\n      // Clear date error if exists\r\n      if (formErrors.paymentDate) {\r\n        setFormErrors(prev => {\r\n          const newErrors = { ...prev };\r\n          delete newErrors.paymentDate;\r\n          return newErrors;\r\n        });\r\n      }\r\n    }\r\n  };\r\n\r\n  const validateForm = (): boolean => {\r\n    const errors: Record<string, string> = {};\r\n    \r\n    if (!formData.transactionId) {\r\n      errors.transactionId = 'Transaction ID is required';\r\n    }\r\n    \r\n    if (!formData.amount || formData.amount <= 0) {\r\n      errors.amount = 'Amount must be greater than zero';\r\n    }\r\n    \r\n    if (!formData.paymentDate) {\r\n      errors.paymentDate = 'Payment date is required';\r\n    }\r\n    \r\n    setFormErrors(errors);\r\n    return Object.keys(errors).length === 0;\r\n  };\r\n\r\n  const handleSubmit = async () => {\r\n    if (!validateForm()) return;\r\n    \r\n    const updateData = formData as UpdatePaymentRequest;\r\n    const result = await updatePayment(payment.id, updateData);\r\n    \r\n    if (result) {\r\n      onPaymentUpdated();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Dialog open={open} onClose={loading ? undefined : onClose} maxWidth=\"md\" fullWidth>\r\n      <DialogTitle>Update Payment</DialogTitle>\r\n      <DialogContent>\r\n        {error && (\r\n          <Typography color=\"error\" variant=\"body2\" sx={{ mb: 2 }}>\r\n            {error}\r\n          </Typography>\r\n        )}        <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 2, mt: 1 }}>\r\n          <Box sx={{ width: { xs: '100%', sm: '48%' } }}>\r\n            <TextField\r\n              label=\"Transaction ID\"\r\n              name=\"transactionId\"\r\n              value={formData.transactionId || ''}\r\n              onChange={handleChange}\r\n              fullWidth\r\n              required\r\n              error={!!formErrors.transactionId}\r\n              helperText={formErrors.transactionId}\r\n            />\r\n          </Box>\r\n          \r\n          <Box sx={{ width: { xs: '100%', sm: '48%' } }}>\r\n            <TextField\r\n              label=\"Amount\"\r\n              name=\"amount\"\r\n              type=\"number\"\r\n              value={formData.amount || ''}\r\n              onChange={handleChange}\r\n              fullWidth\r\n              required\r\n              InputProps={{\r\n                startAdornment: <InputAdornment position=\"start\">$</InputAdornment>,\r\n              }}\r\n              error={!!formErrors.amount}\r\n              helperText={formErrors.amount}\r\n            />\r\n          </Box>\r\n          \r\n          <Box sx={{ width: { xs: '100%', sm: '48%' } }}>\r\n            <LocalizationProvider dateAdapter={AdapterDateFns}>\r\n              <DatePicker\r\n                label=\"Payment Date\"\r\n                value={formData.paymentDate ? new Date(formData.paymentDate) : null}\r\n                onChange={handleDateChange}\r\n                slotProps={{ \r\n                  textField: { \r\n                    fullWidth: true,\r\n                    required: true,\r\n                    error: !!formErrors.paymentDate,\r\n                    helperText: formErrors.paymentDate\r\n                  }\r\n                }}\r\n              />\r\n            </LocalizationProvider>\r\n          </Box>\r\n          \r\n          <Box sx={{ width: { xs: '100%', sm: '48%' } }}>\r\n            <FormControl fullWidth required>\r\n              <InputLabel>Payment Method</InputLabel>\r\n              <Select\r\n                name=\"paymentMethod\"\r\n                value={formData.paymentMethod || ''}\r\n                onChange={handleChange as any}\r\n                label=\"Payment Method\"\r\n              >\r\n                <MenuItem value=\"credit_card\">Credit Card</MenuItem>\r\n                <MenuItem value=\"bank_transfer\">Bank Transfer</MenuItem>\r\n                <MenuItem value=\"cash\">Cash</MenuItem>\r\n                <MenuItem value=\"check\">Check</MenuItem>\r\n                <MenuItem value=\"paypal\">PayPal</MenuItem>\r\n                <MenuItem value=\"stripe\">Stripe</MenuItem>\r\n                <MenuItem value=\"other\">Other</MenuItem>\r\n              </Select>\r\n            </FormControl>\r\n          </Box>\r\n          \r\n          <Box sx={{ width: { xs: '100%', sm: '48%' } }}>\r\n            <FormControl fullWidth required>\r\n              <InputLabel>Payment Type</InputLabel>\r\n              <Select\r\n                name=\"paymentType\"\r\n                value={formData.paymentType || ''}\r\n                onChange={handleChange as any}\r\n                label=\"Payment Type\"\r\n              >\r\n                <MenuItem value=\"order_payment\">Order Payment</MenuItem>\r\n                <MenuItem value=\"invoice_payment\">Invoice Payment</MenuItem>\r\n                <MenuItem value=\"refund\">Refund</MenuItem>\r\n                <MenuItem value=\"advance_payment\">Advance Payment</MenuItem>\r\n                <MenuItem value=\"adjustment\">Adjustment</MenuItem>\r\n              </Select>\r\n            </FormControl>\r\n          </Box>\r\n          \r\n          <Box sx={{ width: { xs: '100%', sm: '48%' } }}>\r\n            <TextField\r\n              label=\"Order ID (Optional)\"\r\n              name=\"orderId\"\r\n              value={formData.orderId || ''}\r\n              onChange={handleChange}\r\n              fullWidth\r\n            />\r\n          </Box>\r\n          \r\n          <Box sx={{ width: { xs: '100%', sm: '48%' } }}>\r\n            <TextField\r\n              label=\"Invoice ID (Optional)\"\r\n              name=\"invoiceId\"\r\n              value={formData.invoiceId || ''}\r\n              onChange={handleChange}\r\n              fullWidth\r\n            />\r\n          </Box>\r\n          \r\n          <Box sx={{ width: { xs: '100%', sm: '48%' } }}>\r\n            <TextField\r\n              label=\"External Reference ID (Optional)\"\r\n              name=\"externalReferenceId\"\r\n              value={formData.externalReferenceId || ''}\r\n              onChange={handleChange}\r\n              fullWidth\r\n            />\r\n          </Box>\r\n          \r\n          <Box sx={{ width: '100%' }}>\r\n            <TextField\r\n              label=\"Notes (Optional)\"\r\n              name=\"notes\"\r\n              value={formData.notes || ''}\r\n              onChange={handleChange}\r\n              fullWidth\r\n              multiline\r\n              rows={3}\r\n            />\r\n          </Box>\r\n        </Box>\r\n      </DialogContent>\r\n      <DialogActions sx={{ p: 2 }}>\r\n        <Typography variant=\"caption\" sx={{ mr: 'auto', color: 'text.secondary' }}>\r\n          Payment ID: {payment.id}\r\n        </Typography>\r\n        <Button onClick={onClose} disabled={loading}>\r\n          Cancel\r\n        </Button>\r\n        <Button \r\n          onClick={handleSubmit} \r\n          variant=\"contained\" \r\n          color=\"primary\" \r\n          disabled={loading}\r\n          startIcon={loading ? <CircularProgress size={20} /> : undefined}\r\n        >\r\n          {loading ? 'Updating...' : 'Update Payment'}\r\n        </Button>\r\n      </DialogActions>\r\n    </Dialog>\r\n  );\r\n};\r\n\r\nexport default UpdatePaymentModal;\r\n","usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"d:\\All python project\\Tubex\\Frontend\\app\\src\\components\\settings\\CompanySettingsSelector.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Switch' is defined but never used. Allowed unused vars must match /^_/u.","line":2,"column":89,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":95},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'FormControlLabel' is defined but never used. Allowed unused vars must match /^_/u.","line":2,"column":97,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":113}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\r\nimport { Box, Typography, FormControl, InputLabel, Select, MenuItem, SelectChangeEvent, Switch, FormControlLabel } from '@mui/material';\r\nimport { useCompanySettings } from '../../contexts/CompanySettingsContext';\r\n\r\ninterface CompanySelectorProps {\r\n  companyId: string;\r\n  onCompanyChange?: (companyId: string) => void;\r\n}\r\n\r\n/**\r\n * A component for selecting which company's settings to view/edit\r\n * and option to apply settings company-wide\r\n */\r\nconst CompanySettingsSelector: React.FC<CompanySelectorProps> = ({ \r\n  companyId,\r\n  onCompanyChange \r\n}) => {\r\n  const { isCompanyAdmin } = useCompanySettings();\r\n  \r\n  // This would normally fetch from an API\r\n  // For now we'll use mock data\r\n  const userCompanies = [\r\n    { id: companyId, name: 'Current Company' },\r\n    ...(isCompanyAdmin ? [\r\n      { id: 'all', name: 'All Companies' }  \r\n    ] : [])\r\n  ];\r\n  \r\n  const handleCompanyChange = (event: SelectChangeEvent<string>) => {\r\n    if (onCompanyChange) {\r\n      onCompanyChange(event.target.value);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Box sx={{ mb: 4, p: 2, bgcolor: 'background.paper', borderRadius: 1, border: '1px solid', borderColor: 'divider' }}>\r\n      <Typography variant=\"subtitle1\" sx={{ mb: 2 }}>\r\n        Company Settings Configuration\r\n      </Typography>\r\n      \r\n      {userCompanies.length > 1 && (\r\n        <FormControl fullWidth sx={{ mb: 2 }}>\r\n          <InputLabel id=\"company-select-label\">Select Company</InputLabel>\r\n          <Select\r\n            labelId=\"company-select-label\"\r\n            value={companyId}\r\n            label=\"Select Company\"\r\n            onChange={handleCompanyChange}\r\n          >\r\n            {userCompanies.map(company => (\r\n              <MenuItem key={company.id} value={company.id}>\r\n                {company.name}\r\n              </MenuItem>\r\n            ))}\r\n          </Select>\r\n        </FormControl>\r\n      )}\r\n      \r\n      {isCompanyAdmin && (\r\n        <Box>\r\n          <Typography variant=\"body2\" color=\"text.secondary\" sx={{ mb: 1 }}>\r\n            As a company admin, you can apply settings to all users in your organization or just to your account.\r\n          </Typography>\r\n        </Box>\r\n      )}\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default CompanySettingsSelector;\r\n","usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"d:\\All python project\\Tubex\\Frontend\\app\\src\\components\\settings\\SettingsOverrideDisplay.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'companySettings' is defined but never used. Allowed unused args must match /^_/u.","line":22,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":22,"endColumn":18}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\r\nimport { Box, Typography, Chip, Card, CardContent, Stack, IconButton, Tooltip } from '@mui/material';\r\nimport { \r\n  Palette as ThemeIcon, \r\n  Notifications as NotificationIcon,\r\n  Storage as IntegrationIcon,\r\n  Refresh as ResetIcon\r\n} from '@mui/icons-material';\r\nimport { CompanySettings } from '../../utils/companySettings';\r\n\r\ninterface SettingsOverrideProps {\r\n  companySettings: Partial<CompanySettings>;\r\n  userSettings: Partial<CompanySettings>;\r\n  onResetToCompany: (section: string) => void;\r\n}\r\n\r\n/**\r\n * Component to display which settings are overridden for the current user\r\n * with options to reset to company-wide defaults\r\n */\r\nconst SettingsOverrideDisplay: React.FC<SettingsOverrideProps> = ({\r\n  companySettings,\r\n  userSettings,\r\n  onResetToCompany\r\n}) => {\r\n  // Check which sections have overrides\r\n  const hasAppearanceOverrides = userSettings.appearance && \r\n    Object.keys(userSettings.appearance).length > 0;\r\n\r\n  const hasNotificationOverrides = userSettings.notifications && \r\n    Object.keys(userSettings.notifications).length > 0;\r\n\r\n  const hasIntegrationOverrides = userSettings.integrations && \r\n    Object.keys(userSettings.integrations).length > 0;\r\n\r\n  // If no overrides, don't render the component\r\n  if (!hasAppearanceOverrides && !hasNotificationOverrides && !hasIntegrationOverrides) {\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <Card variant=\"outlined\" sx={{ mb: 4 }}>\r\n      <CardContent>\r\n        <Typography variant=\"h6\" gutterBottom>\r\n          Your Custom Settings\r\n        </Typography>\r\n        <Typography variant=\"body2\" color=\"text.secondary\" paragraph>\r\n          The following settings are customized for your account and differ from company-wide defaults.\r\n        </Typography>\r\n\r\n        <Stack spacing={2}>\r\n          {hasAppearanceOverrides && (\r\n            <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>\r\n              <Stack direction=\"row\" spacing={1} alignItems=\"center\">\r\n                <ThemeIcon color=\"primary\" fontSize=\"small\" />\r\n                <Typography>Appearance Settings</Typography>\r\n                {userSettings.appearance?.darkMode !== undefined && (\r\n                  <Chip size=\"small\" label=\"Dark Mode\" />\r\n                )}\r\n                {userSettings.appearance?.fontSize !== undefined && (\r\n                  <Chip size=\"small\" label=\"Font Size\" />\r\n                )}\r\n                {userSettings.appearance?.language !== undefined && (\r\n                  <Chip size=\"small\" label=\"Language\" />\r\n                )}\r\n              </Stack>\r\n              <Tooltip title=\"Reset to company defaults\">\r\n                <IconButton \r\n                  size=\"small\" \r\n                  onClick={() => onResetToCompany('appearance')}\r\n                  color=\"primary\"\r\n                >\r\n                  <ResetIcon fontSize=\"small\" />\r\n                </IconButton>\r\n              </Tooltip>\r\n            </Box>\r\n          )}\r\n\r\n          {hasNotificationOverrides && (\r\n            <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>\r\n              <Stack direction=\"row\" spacing={1} alignItems=\"center\">\r\n                <NotificationIcon color=\"primary\" fontSize=\"small\" />\r\n                <Typography>Notification Preferences</Typography>\r\n                <Chip size=\"small\" label=\"Custom Notifications\" />\r\n              </Stack>\r\n              <Tooltip title=\"Reset to company defaults\">\r\n                <IconButton \r\n                  size=\"small\" \r\n                  onClick={() => onResetToCompany('notifications')}\r\n                  color=\"primary\"\r\n                >\r\n                  <ResetIcon fontSize=\"small\" />\r\n                </IconButton>\r\n              </Tooltip>\r\n            </Box>\r\n          )}\r\n\r\n          {hasIntegrationOverrides && (\r\n            <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>\r\n              <Stack direction=\"row\" spacing={1} alignItems=\"center\">\r\n                <IntegrationIcon color=\"primary\" fontSize=\"small\" />\r\n                <Typography>Integration Settings</Typography>\r\n                {userSettings.integrations?.apiKey && (\r\n                  <Chip size=\"small\" label=\"API Key\" />\r\n                )}\r\n                {userSettings.integrations?.connectedServices && (\r\n                  <Chip size=\"small\" label=\"Connected Services\" />\r\n                )}\r\n              </Stack>\r\n              <Tooltip title=\"Reset to company defaults\">\r\n                <IconButton \r\n                  size=\"small\" \r\n                  onClick={() => onResetToCompany('integrations')}\r\n                  color=\"primary\"\r\n                >\r\n                  <ResetIcon fontSize=\"small\" />\r\n                </IconButton>\r\n              </Tooltip>\r\n            </Box>\r\n          )}\r\n        </Stack>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default SettingsOverrideDisplay;\r\n","usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"d:\\All python project\\Tubex\\Frontend\\app\\src\\components\\ui\\NotificationSystem.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"d:\\All python project\\Tubex\\Frontend\\app\\src\\components\\ui\\SearchField.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"d:\\All python project\\Tubex\\Frontend\\app\\src\\components\\warehouse\\WarehouseSelector.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'warehousesRequest'. Either include it or remove the dependency array.","line":56,"column":6,"nodeType":"ArrayExpression","endLine":56,"endColumn":17,"suggestions":[{"desc":"Update the dependencies array to be: [companyId, warehousesRequest]","fix":{"range":[1339,1350],"text":"[companyId, warehousesRequest]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useEffect } from 'react';\r\nimport {\r\n  Box,\r\n  Typography,\r\n  CircularProgress,\r\n  FormControl,\r\n  InputLabel,\r\n  Select,\r\n  MenuItem,\r\n  SelectChangeEvent,\r\n  Alert\r\n} from '@mui/material';\r\nimport { Warehouse } from '../../services/api/warehouseService';\r\nimport { useApiRequest } from '../../hooks/useApiRequest';\r\nimport { warehouseService } from '../../services/api';\r\n\r\ninterface WarehouseSelectorProps {\r\n  companyId: string;\r\n  selectedWarehouse: string;\r\n  onWarehouseSelect: (warehouseId: string) => void;\r\n  label?: string;\r\n  fullWidth?: boolean;\r\n  size?: 'small' | 'medium';\r\n  required?: boolean;\r\n}\r\n\r\nconst WarehouseSelector: React.FC<WarehouseSelectorProps> = ({\r\n  companyId,\r\n  selectedWarehouse,\r\n  onWarehouseSelect,\r\n  label = 'Warehouse',\r\n  fullWidth = true,\r\n  size = 'medium',\r\n  required = false\r\n}) => {\r\n  // Use our custom hook for API calls\r\n  const warehousesRequest = useApiRequest<{ data: Warehouse[] }>(\r\n    async () => {\r\n      if (!companyId) {\r\n        return { data: [] };\r\n      }\r\n      return await warehouseService.getWarehouses(companyId);\r\n    },\r\n    [],\r\n    {\r\n      dependencies: [companyId],\r\n      manual: !companyId\r\n    }\r\n  );\r\n\r\n  // Fetch warehouses when companyId changes\r\n  useEffect(() => {\r\n    if (companyId) {\r\n      warehousesRequest.request();\r\n    }\r\n  }, [companyId]);\r\n\r\n  // Handle select change\r\n  const handleChange = (event: SelectChangeEvent<string>) => {\r\n    onWarehouseSelect(event.target.value);\r\n  };\r\n\r\n  // Get warehouses from request data\r\n  const warehouses = warehousesRequest.data?.data || [];\r\n\r\n  if (warehousesRequest.error) {\r\n    return <Alert severity=\"error\">Failed to load warehouses</Alert>;\r\n  }\r\n\r\n  return (\r\n    <FormControl fullWidth={fullWidth} size={size} required={required}>\r\n      <InputLabel id=\"warehouse-select-label\">{label}</InputLabel>\r\n      <Select\r\n        labelId=\"warehouse-select-label\"\r\n        value={selectedWarehouse}\r\n        label={label}\r\n        onChange={handleChange}\r\n        displayEmpty={!required}\r\n        disabled={warehousesRequest.isLoading}\r\n      >\r\n        {!required && (\r\n          <MenuItem value=\"\">\r\n            <em>None</em>\r\n          </MenuItem>\r\n        )}\r\n        \r\n        {warehousesRequest.isLoading ? (\r\n          <MenuItem disabled>\r\n            <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>\r\n              <CircularProgress size={20} />\r\n              <Typography>Loading warehouses...</Typography>\r\n            </Box>\r\n          </MenuItem>\r\n        ) : (\r\n          warehouses.map((warehouse) => (\r\n            <MenuItem key={warehouse.id} value={warehouse.id}>\r\n              {warehouse.name}\r\n            </MenuItem>\r\n          ))\r\n        )}\r\n        \r\n        {!warehousesRequest.isLoading && warehouses.length === 0 && (\r\n          <MenuItem disabled>\r\n            <Typography>No warehouses available</Typography>\r\n          </MenuItem>\r\n        )}\r\n      </Select>\r\n    </FormControl>\r\n  );\r\n};\r\n\r\nexport default WarehouseSelector;\r\n","usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"d:\\All python project\\Tubex\\Frontend\\app\\src\\components\\whitelabel\\AdminPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"d:\\All python project\\Tubex\\Frontend\\app\\src\\components\\whitelabel\\ConfirmationDialog.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'theme' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":33,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":33,"endColumn":16}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\r\nimport {\r\n  Dialog,\r\n  DialogTitle,\r\n  DialogContent,\r\n  DialogContentText,\r\n  DialogActions,\r\n  Button\r\n} from '@mui/material';\r\nimport { useTheme } from '../../contexts/ThemeContext';\r\n\r\ninterface ConfirmationDialogProps {\r\n  open: boolean;\r\n  title: string;\r\n  content: string;\r\n  onConfirm: () => void;\r\n  onCancel: () => void;\r\n  confirmText?: string;\r\n  cancelText?: string;\r\n  confirmColor?: 'primary' | 'secondary' | 'error' | 'info' | 'success' | 'warning';\r\n}\r\n\r\nconst ConfirmationDialog: React.FC<ConfirmationDialogProps> = ({\r\n  open,\r\n  title,\r\n  content,\r\n  onConfirm,\r\n  onCancel,\r\n  confirmText = 'Confirm',\r\n  cancelText = 'Cancel',\r\n  confirmColor = 'primary'\r\n}) => {\r\n  const { theme } = useTheme();\r\n\r\n  return (\r\n    <Dialog\r\n      open={open}\r\n      onClose={onCancel}\r\n      aria-labelledby=\"confirmation-dialog-title\"\r\n      aria-describedby=\"confirmation-dialog-description\"\r\n    >\r\n      <DialogTitle id=\"confirmation-dialog-title\">\r\n        {title}\r\n      </DialogTitle>\r\n      \r\n      <DialogContent>\r\n        <DialogContentText id=\"confirmation-dialog-description\">\r\n          {content}\r\n        </DialogContentText>\r\n      </DialogContent>\r\n      \r\n      <DialogActions>\r\n        <Button \r\n          onClick={onCancel} \r\n          color=\"inherit\"\r\n        >\r\n          {cancelText}\r\n        </Button>\r\n        <Button \r\n          onClick={onConfirm} \r\n          color={confirmColor}\r\n          variant=\"contained\"\r\n          autoFocus\r\n        >\r\n          {confirmText}\r\n        </Button>\r\n      </DialogActions>\r\n    </Dialog>\r\n  );\r\n};\r\n\r\nexport default ConfirmationDialog;\r\n","usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"d:\\All python project\\Tubex\\Frontend\\app\\src\\components\\whitelabel\\DashboardCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"d:\\All python project\\Tubex\\Frontend\\app\\src\\components\\whitelabel\\DataTable.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"d:\\All python project\\Tubex\\Frontend\\app\\src\\components\\whitelabel\\FormButtons.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"d:\\All python project\\Tubex\\Frontend\\app\\src\\components\\whitelabel\\FormContainer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"d:\\All python project\\Tubex\\Frontend\\app\\src\\components\\whitelabel\\SideNavigation.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'DescriptionIcon' is defined but never used. Allowed unused vars must match /^_/u.","line":23,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":23,"endColumn":23},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'SettingsIcon' is defined but never used. Allowed unused vars must match /^_/u.","line":25,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":25,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'WarehouseIcon' is defined but never used. Allowed unused vars must match /^_/u.","line":26,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":26,"endColumn":21},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'PaymentIcon' is defined but never used. Allowed unused vars must match /^_/u.","line":27,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":27,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'ReceiptIcon' is defined but never used. Allowed unused vars must match /^_/u.","line":33,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":33,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'LocalOfferIcon' is defined but never used. Allowed unused vars must match /^_/u.","line":34,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":34,"endColumn":22}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useEffect, useState } from 'react';\r\nimport {\r\n  Box,\r\n  Drawer,\r\n  List,\r\n  ListItem,\r\n  ListItemIcon,\r\n  ListItemText,\r\n  ListItemButton,\r\n  Collapse,\r\n  Divider,\r\n  Tooltip,\r\n  IconButton,\r\n  useTheme as useMuiTheme,\r\n} from '@mui/material';\r\nimport { useLocation, useNavigate } from 'react-router-dom';\r\nimport { useTheme } from '../../contexts/ThemeContext';\r\n\r\n// Icons\r\nimport DashboardIcon from '@mui/icons-material/Dashboard';\r\nimport InventoryIcon from '@mui/icons-material/Inventory';\r\nimport ShoppingCartIcon from '@mui/icons-material/ShoppingCart';\r\nimport DescriptionIcon from '@mui/icons-material/Description';\r\nimport AccountCircleIcon from '@mui/icons-material/AccountCircle';\r\nimport SettingsIcon from '@mui/icons-material/Settings';\r\nimport WarehouseIcon from '@mui/icons-material/Warehouse';\r\nimport PaymentIcon from '@mui/icons-material/Payment';\r\nimport ChevronRightIcon from '@mui/icons-material/ChevronRight';\r\nimport ExpandMoreIcon from '@mui/icons-material/ExpandMore';\r\nimport BarChartIcon from '@mui/icons-material/BarChart';\r\nimport MenuOpenIcon from '@mui/icons-material/MenuOpen';\r\nimport MenuIcon from '@mui/icons-material/Menu';\r\nimport ReceiptIcon from '@mui/icons-material/Receipt';\r\nimport LocalOfferIcon from '@mui/icons-material/LocalOffer';\r\n\r\n// Define navigation items\r\nconst navigationItems = [\r\n  {\r\n    id: 'dashboard',\r\n    label: 'Dashboard',\r\n    path: '/dashboard',\r\n    icon: <DashboardIcon />,\r\n  },\r\n  {\r\n    id: 'analytics',\r\n    label: 'Analytics',\r\n    path: '/analytics',\r\n    icon: <BarChartIcon />,\r\n  },\r\n  {\r\n    id: 'inventory',\r\n    label: 'Inventory',\r\n    icon: <InventoryIcon />,\r\n    children: [\r\n      { id: 'products', label: 'Products', path: '/products' },\r\n      { id: 'inventory', label: 'Inventory', path: '/inventory' },\r\n      { id: 'warehouses', label: 'Warehouses', path: '/warehouses' },\r\n    ],\r\n  },\r\n  {\r\n    id: 'sales',\r\n    label: 'Sales',\r\n    icon: <ShoppingCartIcon />,\r\n    children: [\r\n      { id: 'orders', label: 'Orders', path: '/orders' },\r\n      { id: 'payments', label: 'Payments', path: '/payments' },\r\n      { id: 'invoices', label: 'Invoices', path: '/invoices' },\r\n      { id: 'quotes', label: 'Quotes', path: '/quotes' },\r\n      { id: 'pricelists', label: 'Price Lists', path: '/pricelists' },\r\n    ],\r\n  },\r\n  {\r\n    id: 'account',\r\n    label: 'Account',\r\n    icon: <AccountCircleIcon />,\r\n    children: [\r\n      { id: 'profile', label: 'My Profile', path: '/profile' },\r\n      { id: 'settings', label: 'Settings', path: '/settings' },\r\n    ],\r\n  },\r\n];\r\n\r\nconst STORAGE_KEY = 'tubex_side_nav_expanded_groups';\r\n\r\nconst drawerWidth = 240;\r\n\r\nconst DRAWER_STATE_KEY = 'tubex_side_nav_open';\r\n\r\nconst SideNavigation: React.FC = () => {\r\n  // Load drawer open state from localStorage\r\n  const [open, setOpen] = useState(() => {\r\n    try {\r\n      const saved = localStorage.getItem(DRAWER_STATE_KEY);\r\n      return saved !== null ? saved === 'true' : true;\r\n    } catch {\r\n      return true;\r\n    }\r\n  });\r\n  \r\n  // Load expanded groups from localStorage\r\n  const [expandedGroups, setExpandedGroups] = useState<Record<string, boolean>>(() => {\r\n    try {\r\n      const saved = localStorage.getItem(STORAGE_KEY);\r\n      if (saved) return JSON.parse(saved);\r\n    } catch {}\r\n    const initial: Record<string, boolean> = {};\r\n    navigationItems.forEach((item) => {\r\n      if (item.children) {\r\n        initial[item.id] = item.id === 'inventory';\r\n      }\r\n    });\r\n    return initial;\r\n  });\r\n  \r\n  // Persist group expansion to localStorage\r\n  useEffect(() => {\r\n    try {\r\n      localStorage.setItem(STORAGE_KEY, JSON.stringify(expandedGroups));\r\n    } catch (e) {\r\n      console.warn('Failed to save navigation state to localStorage', e);\r\n    }\r\n  }, [expandedGroups]);\r\n  \r\n  // Persist drawer state to localStorage\r\n  useEffect(() => {\r\n    try {\r\n      localStorage.setItem(DRAWER_STATE_KEY, String(open));\r\n    } catch (e) {\r\n      console.warn('Failed to save drawer state to localStorage', e);\r\n    }\r\n  }, [open]);\r\n  \r\n  const location = useLocation();\r\n  const navigate = useNavigate();\r\n  const { theme: customTheme } = useTheme();\r\n  const muiTheme = useMuiTheme();\r\n  \r\n  const toggleDrawer = () => {\r\n    setOpen(!open);\r\n  };\r\n  \r\n  const toggleGroup = (groupId: string) => {\r\n    setExpandedGroups(prev => {\r\n      const next = { ...prev, [groupId]: !prev[groupId] };\r\n      return next;\r\n    });\r\n  };\r\n  \r\n  const isActiveRoute = (path: string) => {\r\n    return location.pathname === path;\r\n  };\r\n  \r\n  const isActiveGroup = (groupId: string) => {\r\n    const group = navigationItems.find(item => item.id === groupId);\r\n    if (!group || !group.children) return false;\r\n    \r\n    return group.children.some(child => location.pathname.startsWith(child.path));\r\n  };\r\n\r\n  // Helper: only use user state for expansion, never auto-expand by route\r\n  const isGroupExpanded = (groupId: string) => {\r\n    return !!expandedGroups[groupId];\r\n  };\r\n\r\n  return (\r\n    <Drawer\r\n      variant=\"permanent\"\r\n      sx={{\r\n        width: open ? drawerWidth : 56,\r\n        flexShrink: 0,\r\n        '& .MuiDrawer-paper': {\r\n          width: open ? drawerWidth : 56,\r\n          boxSizing: 'border-box',\r\n          overflow: open ? 'auto' : 'hidden',\r\n          transition: muiTheme.transitions.create(['width'], {\r\n            easing: muiTheme.transitions.easing.sharp,\r\n            duration: muiTheme.transitions.duration.enteringScreen,\r\n          }),\r\n          backgroundColor: customTheme?.backgroundColor || muiTheme.palette.background.paper,\r\n          borderRight: `1px solid ${muiTheme.palette.divider}`,\r\n          color: customTheme?.textColor || 'inherit',\r\n        },\r\n      }}\r\n    >\r\n      <Box\r\n        sx={{\r\n          display: 'flex',\r\n          alignItems: 'center',\r\n          justifyContent: open ? 'flex-end' : 'center',\r\n          p: 1,\r\n          minHeight: 64,\r\n        }}\r\n      >\r\n        <IconButton onClick={toggleDrawer}>\r\n          {open ? <MenuOpenIcon /> : <MenuIcon />}\r\n        </IconButton>\r\n      </Box>\r\n      \r\n      <Divider />\r\n      \r\n      <List sx={{ pt: 0 }}>\r\n        {navigationItems.map((item) => (\r\n          item.children ? (\r\n            <React.Fragment key={item.id}>\r\n              <ListItem \r\n                disablePadding\r\n                sx={{\r\n                  display: 'block',\r\n                  backgroundColor: isActiveGroup(item.id) ? \r\n                    `${customTheme?.primaryColor || muiTheme.palette.primary.main}22` : \r\n                    'transparent',\r\n                }}\r\n              >\r\n                <ListItemButton\r\n                  onClick={() => toggleGroup(item.id)}\r\n                  sx={{\r\n                    minHeight: 48,\r\n                    justifyContent: open ? 'initial' : 'center',\r\n                    px: 2.5,\r\n                  }}\r\n                >\r\n                  <ListItemIcon\r\n                    sx={{\r\n                      minWidth: 0,\r\n                      mr: open ? 2 : 'auto',\r\n                      justifyContent: 'center',\r\n                      color: isActiveGroup(item.id) ? \r\n                        customTheme?.primaryColor || muiTheme.palette.primary.main : \r\n                        'inherit',\r\n                    }}\r\n                  >\r\n                    <Tooltip title={open ? '' : item.label} placement=\"right\" arrow>\r\n                      <Box component=\"span\">{item.icon}</Box>\r\n                    </Tooltip>\r\n                  </ListItemIcon>\r\n                  {open && (\r\n                    <>\r\n                      <ListItemText \r\n                        primary={item.label} \r\n                        primaryTypographyProps={{\r\n                          fontWeight: isActiveGroup(item.id) ? 600 : 400,\r\n                          color: isActiveGroup(item.id) ? \r\n                            customTheme?.primaryColor || muiTheme.palette.primary.main : \r\n                            'inherit',\r\n                        }}\r\n                      />\r\n                      {expandedGroups[item.id] ? <ExpandMoreIcon /> : <ChevronRightIcon />}\r\n                    </>\r\n                  )}\r\n                </ListItemButton>\r\n              </ListItem>\r\n              \r\n              {open && (\r\n                <Collapse in={isGroupExpanded(item.id)} timeout=\"auto\" unmountOnExit>\r\n                  <List disablePadding>\r\n                    {item.children.map((child) => (\r\n                      <ListItemButton\r\n                        key={child.id}\r\n                        onClick={() => navigate(child.path)}\r\n                        sx={{\r\n                          pl: 4,\r\n                          py: 1,\r\n                          backgroundColor: isActiveRoute(child.path) ? \r\n                            `${customTheme?.primaryColor || muiTheme.palette.primary.main}22` : \r\n                            'transparent',\r\n                        }}\r\n                      >\r\n                        <ListItemText \r\n                          primary={child.label} \r\n                          primaryTypographyProps={{\r\n                            fontWeight: isActiveRoute(child.path) ? 600 : 400,\r\n                            fontSize: '0.9rem',\r\n                            color: isActiveRoute(child.path) ? \r\n                              customTheme?.primaryColor || muiTheme.palette.primary.main : \r\n                              'inherit',\r\n                          }}\r\n                        />\r\n                      </ListItemButton>\r\n                    ))}\r\n                  </List>\r\n                </Collapse>\r\n              )}\r\n            </React.Fragment>\r\n          ) : (\r\n            <ListItem \r\n              key={item.id} \r\n              disablePadding\r\n              sx={{\r\n                display: 'block',\r\n                backgroundColor: isActiveRoute(item.path) ? \r\n                  `${customTheme?.primaryColor || muiTheme.palette.primary.main}22` : \r\n                  'transparent',\r\n              }}\r\n            >\r\n              <ListItemButton\r\n                onClick={() => navigate(item.path)}\r\n                sx={{\r\n                  minHeight: 48,\r\n                  justifyContent: open ? 'initial' : 'center',\r\n                  px: 2.5,\r\n                }}\r\n              >\r\n                <ListItemIcon\r\n                  sx={{\r\n                    minWidth: 0,\r\n                    mr: open ? 2 : 'auto',\r\n                    justifyContent: 'center',\r\n                    color: isActiveRoute(item.path) ? \r\n                      customTheme?.primaryColor || muiTheme.palette.primary.main : \r\n                      'inherit',\r\n                  }}\r\n                >\r\n                  <Tooltip title={open ? '' : item.label} placement=\"right\" arrow>\r\n                    <Box component=\"span\">{item.icon}</Box>\r\n                  </Tooltip>\r\n                </ListItemIcon>\r\n                {open && (\r\n                  <ListItemText \r\n                    primary={item.label} \r\n                    primaryTypographyProps={{\r\n                      fontWeight: isActiveRoute(item.path) ? 600 : 400,\r\n                      color: isActiveRoute(item.path) ? \r\n                        customTheme?.primaryColor || muiTheme.palette.primary.main : \r\n                        'inherit',\r\n                    }}\r\n                  />\r\n                )}\r\n              </ListItemButton>\r\n            </ListItem>\r\n          )\r\n        ))}\r\n      </List>\r\n    </Drawer>\r\n  );\r\n};\r\n\r\nexport default SideNavigation;\r\n","usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"d:\\All python project\\Tubex\\Frontend\\app\\src\\components\\whitelabel\\TenantConfigPanel.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'setPreviewVisible' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":19,"column":26,"nodeType":"Identifier","messageId":"unusedVar","endLine":19,"endColumn":43}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\r\nimport { Box, Typography, TextField, Button, Paper, Divider } from '@mui/material';\r\nimport { useTheme, Theme } from '../../contexts/ThemeContext';\r\nimport { saveTenantConfig } from './WhiteLabelUtils';\r\n\r\ninterface TenantConfigPanelProps {\r\n  tenantId: string;\r\n}\r\n\r\n// Extended theme interface to include optional fields for form\r\ninterface ExtendedTheme extends Theme {\r\n  fontFamily?: string;\r\n  buttonRadius?: number;\r\n}\r\n\r\nconst TenantConfigPanel: React.FC<TenantConfigPanelProps> = ({ tenantId }) => {\r\n  const { theme, updateTheme } = useTheme();\r\n  const [formState, setFormState] = useState<Partial<ExtendedTheme>>(theme);\r\n  const [previewVisible, setPreviewVisible] = useState(false);\r\n  \r\n  // Update form state when theme changes\r\n  useEffect(() => {\r\n    setFormState(theme);\r\n  }, [theme]);\r\n  \r\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    const { name, value } = e.target;\r\n    setFormState((prev: Partial<ExtendedTheme>) => ({\r\n      ...prev,\r\n      [name]: value\r\n    }));\r\n  };\r\n  \r\n  const handleSubmit = (e: React.FormEvent) => {\r\n    e.preventDefault();\r\n    \r\n    // Update the theme context\r\n    updateTheme(formState);\r\n    \r\n    // Save tenant configuration to localStorage (or API in production)\r\n    saveTenantConfig(tenantId, formState);\r\n  };\r\n  \r\n  // Handle reset by applying default theme\r\n  const handleReset = () => {\r\n    // Create our own reset functionality since resetTheme doesn't exist in context\r\n    const defaultTheme = {\r\n      primaryColor: '#1976d2',\r\n      secondaryColor: '#dc004e',\r\n      backgroundColor: '#ffffff',\r\n      textColor: '#333333',\r\n      logoUrl: '/logo.svg',\r\n      companyName: 'Tubex'\r\n    };\r\n    \r\n    updateTheme(defaultTheme);\r\n    setFormState(defaultTheme);\r\n  };\r\n  \r\n  return (\r\n    <Paper elevation={3} sx={{ p: 3 }}>\r\n      <Typography variant=\"h5\" gutterBottom>\r\n        White Label Configuration\r\n      </Typography>\r\n      <Typography variant=\"subtitle2\" color=\"text.secondary\" gutterBottom>\r\n        Tenant ID: {tenantId}\r\n      </Typography>\r\n      \r\n      <Divider sx={{ my: 2 }} />\r\n      \r\n      <form onSubmit={handleSubmit}>\r\n        <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 3 }}>\r\n          <Box sx={{ flex: '1 1 auto', width: { xs: '100%', sm: '48%' } }}>\r\n            <Typography variant=\"subtitle1\">Branding</Typography>\r\n            \r\n            <TextField\r\n              fullWidth\r\n              margin=\"normal\"\r\n              label=\"Company Name\"\r\n              name=\"companyName\"\r\n              value={formState.companyName || ''}\r\n              onChange={handleChange}\r\n            />\r\n            \r\n            <TextField\r\n              fullWidth\r\n              margin=\"normal\"\r\n              label=\"Logo URL\"\r\n              name=\"logoUrl\"\r\n              value={formState.logoUrl || ''}\r\n              onChange={handleChange}\r\n            />\r\n          </Box>\r\n          \r\n          <Box sx={{ flex: '1 1 auto', width: { xs: '100%', sm: '48%' } }}>\r\n            <Typography variant=\"subtitle1\">Styling</Typography>\r\n            \r\n            <TextField\r\n              fullWidth\r\n              margin=\"normal\"\r\n              label=\"Primary Color\"\r\n              name=\"primaryColor\"\r\n              type=\"color\"\r\n              value={formState.primaryColor || '#3f51b5'}\r\n              onChange={handleChange}\r\n              inputProps={{ style: { height: '50px' } }}\r\n            />\r\n            \r\n            <TextField\r\n              fullWidth\r\n              margin=\"normal\"\r\n              label=\"Secondary Color\"\r\n              name=\"secondaryColor\"\r\n              type=\"color\"\r\n              value={formState.secondaryColor || '#f50057'}\r\n              onChange={handleChange}\r\n              inputProps={{ style: { height: '50px' } }}\r\n            />\r\n            \r\n            <TextField\r\n              fullWidth\r\n              margin=\"normal\"\r\n              label=\"Font Family\"\r\n              name=\"fontFamily\"\r\n              value={formState.fontFamily || 'Roboto, sans-serif'}\r\n              onChange={handleChange}\r\n            />\r\n            \r\n            <TextField\r\n              fullWidth\r\n              margin=\"normal\"\r\n              label=\"Button Radius (px)\"\r\n              name=\"buttonRadius\"\r\n              type=\"number\"\r\n              InputProps={{ inputProps: { min: 0, max: 24 } }}\r\n              value={formState.buttonRadius || 4}\r\n              onChange={handleChange}\r\n            />\r\n          </Box>\r\n        </Box>\r\n        \r\n        <Box sx={{ mt: 3, display: 'flex', justifyContent: 'space-between' }}>\r\n          <Button variant=\"outlined\" onClick={handleReset}>\r\n            Reset to Default\r\n          </Button>\r\n          \r\n          <Button \r\n            type=\"submit\" \r\n            variant=\"contained\" \r\n            color=\"primary\"\r\n          >\r\n            Save Configuration\r\n          </Button>\r\n        </Box>\r\n      </form>\r\n      \r\n      {previewVisible && (\r\n        <Box sx={{ mt: 4 }}>\r\n          <Typography variant=\"h6\">Preview</Typography>\r\n          {/* Preview components could be added here */}\r\n        </Box>\r\n      )}\r\n    </Paper>\r\n  );\r\n};\r\n\r\nexport default TenantConfigPanel;","usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"d:\\All python project\\Tubex\\Frontend\\app\\src\\components\\whitelabel\\WhiteLabelButton.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"d:\\All python project\\Tubex\\Frontend\\app\\src\\components\\whitelabel\\WhiteLabelFooter.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"d:\\All python project\\Tubex\\Frontend\\app\\src\\components\\whitelabel\\WhiteLabelHeader.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"d:\\All python project\\Tubex\\Frontend\\app\\src\\components\\whitelabel\\WhiteLabelLayout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"d:\\All python project\\Tubex\\Frontend\\app\\src\\components\\whitelabel\\WhiteLabelProvider.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"d:\\All python project\\Tubex\\Frontend\\app\\src\\components\\whitelabel\\WhiteLabelStyleInjector.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"d:\\All python project\\Tubex\\Frontend\\app\\src\\components\\whitelabel\\WhiteLabelUtils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"d:\\All python project\\Tubex\\Frontend\\app\\src\\components\\whitelabel\\batch\\BatchManagement.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"d:\\All python project\\Tubex\\Frontend\\app\\src\\components\\whitelabel\\index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"d:\\All python project\\Tubex\\Frontend\\app\\src\\components\\whitelabel\\inventory\\InventoryAdjustForm.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'fetchInventoryDetails'. Either include it or remove the dependency array.","line":47,"column":6,"nodeType":"ArrayExpression","endLine":47,"endColumn":19,"suggestions":[{"desc":"Update the dependencies array to be: [fetchInventoryDetails, inventoryId]","fix":{"range":[1254,1267],"text":"[fetchInventoryDetails, inventoryId]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\r\nimport { \r\n  TextField, \r\n  Box,\r\n  Typography,\r\n  Radio,\r\n  RadioGroup,\r\n  FormControlLabel,\r\n  Paper,\r\n  Alert,\r\n  AlertTitle\r\n} from '@mui/material';\r\nimport FormContainer from '../FormContainer';\r\nimport FormButtons from '../FormButtons';\r\nimport { inventoryService } from '../../../services/api';\r\n\r\ninterface InventoryAdjustFormProps {\r\n  companyId: string;\r\n  inventoryId: string;\r\n  onSave?: () => void;\r\n  onCancel?: () => void;\r\n}\r\n\r\nconst InventoryAdjustForm: React.FC<InventoryAdjustFormProps> = ({\r\n  companyId,\r\n  inventoryId,\r\n  onSave,\r\n  onCancel,\r\n}) => {\r\n  const [inventoryItem, setInventoryItem] = useState<any>(null);\r\n  const [adjustmentType, setAdjustmentType] = useState('add'); // add, subtract, set\r\n  const [formData, setFormData] = useState({\r\n    adjustment: '',\r\n    reason: '',\r\n    batch_number: '',\r\n    manufacturing_date: '',\r\n    expiry_date: '',\r\n  });\r\n  \r\n  const [errors, setErrors] = useState<Record<string, string>>({});\r\n  const [loading, setLoading] = useState(false);\r\n  const [fetchLoading, setFetchLoading] = useState(false);\r\n  const [apiError, setApiError] = useState<string | null>(null);\r\n  \r\n  useEffect(() => {\r\n    fetchInventoryDetails();\r\n  }, [inventoryId]);\r\n  \r\n  const fetchInventoryDetails = async () => {\r\n    setFetchLoading(true);\r\n    setApiError(null);\r\n    \r\n    try {\r\n      const item = await inventoryService.getInventoryItem(inventoryId);\r\n      setInventoryItem(item.data);\r\n    } catch (err: any) {\r\n      setApiError(err.message || 'Failed to load inventory details');\r\n      console.error('Error fetching inventory:', err);\r\n    } finally {\r\n      setFetchLoading(false);\r\n    }\r\n  };\r\n  \r\n  const validateForm = () => {\r\n    const newErrors: Record<string, string> = {};\r\n    \r\n    if (!formData.adjustment.trim()) {\r\n      newErrors.adjustment = 'Quantity adjustment is required';\r\n    } else {\r\n      const value = parseFloat(formData.adjustment);\r\n      if (isNaN(value)) {\r\n        newErrors.adjustment = 'Must be a valid number';\r\n      } else if (value <= 0 && adjustmentType !== 'subtract') {\r\n        newErrors.adjustment = 'Quantity must be positive';\r\n      } else if (adjustmentType === 'subtract' && value > inventoryItem?.quantity) {\r\n        newErrors.adjustment = 'Cannot subtract more than available quantity';\r\n      }\r\n    }\r\n    \r\n    if (!formData.reason.trim()) {\r\n      newErrors.reason = 'Reason for adjustment is required';\r\n    }\r\n    \r\n    if (formData.manufacturing_date && formData.expiry_date) {\r\n      const mfgDate = new Date(formData.manufacturing_date);\r\n      const expDate = new Date(formData.expiry_date);\r\n      \r\n      if (expDate <= mfgDate) {\r\n        newErrors.expiry_date = 'Expiry date must be after manufacturing date';\r\n      }\r\n    }\r\n    \r\n    setErrors(newErrors);\r\n    return Object.keys(newErrors).length === 0;\r\n  };\r\n  \r\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement | { name?: string; value: unknown }>) => {\r\n    const { name, value } = e.target;\r\n    if (!name) return;\r\n    \r\n    setFormData((prev) => ({\r\n      ...prev,\r\n      [name]: value\r\n    }));\r\n    \r\n    // Clear error for the field being edited\r\n    if (errors[name]) {\r\n      setErrors((prev) => ({\r\n        ...prev,\r\n        [name]: ''\r\n      }));\r\n    }\r\n  };\r\n  \r\n  const handleAdjustmentTypeChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    setAdjustmentType(e.target.value);\r\n  };\r\n  \r\n  const calculateFinalQuantity = () => {\r\n    if (!inventoryItem || !formData.adjustment) return inventoryItem?.quantity || 0;\r\n    \r\n    const adjustmentValue = parseFloat(formData.adjustment);\r\n    if (isNaN(adjustmentValue)) return inventoryItem?.quantity || 0;\r\n    \r\n    switch (adjustmentType) {\r\n      case 'add':\r\n        return inventoryItem.quantity + adjustmentValue;\r\n      case 'subtract':\r\n        return inventoryItem.quantity - adjustmentValue;\r\n      case 'set':\r\n        return adjustmentValue;\r\n      default:\r\n        return inventoryItem.quantity;\r\n    }\r\n  };\r\n  \r\n  const handleSubmit = async () => {\r\n    if (!validateForm()) return;\r\n    \r\n    setLoading(true);\r\n    setApiError(null);\r\n    \r\n    try {\r\n      // Convert adjustment type and value to the expected API format\r\n      let adjustment = parseFloat(formData.adjustment);\r\n      if (adjustmentType === 'subtract') {\r\n        adjustment = -adjustment; // Negative for subtraction\r\n      } else if (adjustmentType === 'set') {\r\n        // Calculate the difference between current and new quantity\r\n        adjustment = parseFloat(formData.adjustment) - inventoryItem.quantity;\r\n      }\r\n      \r\n      const adjustmentData: {\r\n        adjustment: number;\r\n        reason: string;\r\n        batch_number?: string;\r\n        manufacturing_date?: string; // Added this property\r\n        expiry_date?: string; // Added this property\r\n      } = {\r\n        adjustment,\r\n        reason: formData.reason,\r\n        batch_number: formData.batch_number || undefined,\r\n        manufacturing_date: formData.manufacturing_date, // Fixed type error\r\n        expiry_date: formData.expiry_date, // Fixed type error\r\n      };\r\n      \r\n      if (formData.manufacturing_date && formData.expiry_date) {\r\n        adjustmentData['manufacturing_date'] = formData.manufacturing_date;\r\n        adjustmentData['expiry_date'] = formData.expiry_date;\r\n      }\r\n      \r\n      await inventoryService.adjustInventoryQuantity(companyId, inventoryId, adjustmentData);\r\n      \r\n      if (onSave) {\r\n        onSave();\r\n      }\r\n    } catch (err: any) {\r\n      setApiError(err.message || 'Failed to adjust inventory');\r\n      console.error('Error adjusting inventory:', err);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n  \r\n  const productName = inventoryItem?.product?.name || 'Product';\r\n  const currentQuantity = inventoryItem?.quantity || 0;\r\n  const unit = inventoryItem?.unit || '';\r\n  \r\n  return (\r\n    <FormContainer \r\n      title=\"Adjust Inventory\"\r\n      subtitle={productName}\r\n      loading={fetchLoading}\r\n      error={apiError}\r\n      maxWidth=\"700px\"\r\n    >\r\n      {inventoryItem && (\r\n        <Box sx={{ display: 'flex', flexDirection: 'column', gap: 3 }}>\r\n          <Box>\r\n            <Box sx={{ mb: 3 }}>\r\n              <Typography variant=\"subtitle1\" gutterBottom>\r\n                Current Quantity: <strong>{currentQuantity} {unit}</strong>\r\n              </Typography>\r\n              <Typography variant=\"body2\" color=\"text.secondary\">\r\n                Warehouse: {inventoryItem.warehouse?.name || 'N/A'}\r\n              </Typography>\r\n              {inventoryItem.batch_number && (\r\n                <Typography variant=\"body2\" color=\"text.secondary\">\r\n                  Batch: {inventoryItem.batch_number}\r\n                </Typography>\r\n              )}\r\n            </Box>\r\n          \r\n            <Paper sx={{ p: 2, bgcolor: 'background.default' }}>\r\n              <Typography variant=\"subtitle2\" gutterBottom>\r\n                Adjustment Type\r\n              </Typography>\r\n              <RadioGroup\r\n                row\r\n                name=\"adjustmentType\"\r\n                value={adjustmentType}\r\n                onChange={handleAdjustmentTypeChange}\r\n              >\r\n                <FormControlLabel value=\"add\" control={<Radio />} label=\"Add\" />\r\n                <FormControlLabel value=\"subtract\" control={<Radio />} label=\"Subtract\" />\r\n                <FormControlLabel value=\"set\" control={<Radio />} label=\"Set exact quantity\" />\r\n              </RadioGroup>\r\n            </Paper>\r\n          </Box>\r\n          \r\n          <Box sx={{ display: 'flex', flexDirection: 'column', gap: 2 }}>\r\n            <Box sx={{ flex: 1 }}>\r\n              <TextField\r\n                name=\"adjustment\"\r\n                label={`${adjustmentType === 'set' ? 'Quantity' : 'Adjustment'} (${unit})`}\r\n                fullWidth\r\n                required\r\n                value={formData.adjustment}\r\n                onChange={handleChange}\r\n                error={!!errors.adjustment}\r\n                helperText={errors.adjustment}\r\n                disabled={loading}\r\n                type=\"number\"\r\n                inputProps={{ step: '0.01', min: 0 }}\r\n              />\r\n            </Box>\r\n            <Box sx={{ flex: 1 }}>\r\n              <TextField\r\n                name=\"reason\"\r\n                label=\"Reason for Adjustment\"\r\n                fullWidth\r\n                multiline\r\n                rows={2}\r\n                required\r\n                placeholder=\"Explain why this adjustment is being made\"\r\n                value={formData.reason}\r\n                onChange={handleChange}\r\n                error={!!errors.reason}\r\n                helperText={errors.reason}\r\n                disabled={loading}\r\n              />\r\n            </Box>\r\n          </Box>\r\n          \r\n          <Box sx={{ display: 'flex', gap: 2 }}>\r\n            <Paper \r\n              sx={{ \r\n                p: 2,\r\n                flex: '1 1 50%',\r\n                display: 'flex', \r\n                alignItems: 'center', \r\n                justifyContent: 'center',\r\n                bgcolor: 'primary.light',\r\n                color: 'primary.contrastText',\r\n              }}\r\n            >\r\n              <Typography variant=\"h6\">\r\n                Final: {calculateFinalQuantity()} {unit}\r\n              </Typography>\r\n            </Paper>\r\n          </Box>\r\n          \r\n          <Box>\r\n            <Alert severity=\"info\">\r\n              <AlertTitle>Batch Information</AlertTitle>\r\n              If you're adding new stock with a different batch number or expiration date, \r\n              please provide the details below.\r\n            </Alert>\r\n          </Box>\r\n          \r\n          {adjustmentType === 'add' && (\r\n            <Box sx={{ display: 'flex', flexDirection: 'column', gap: 2 }}>\r\n              <Box>\r\n                <TextField\r\n                  name=\"batch_number\"\r\n                  label=\"Batch Number (optional)\"\r\n                  fullWidth\r\n                  value={formData.batch_number}\r\n                  onChange={handleChange}\r\n                  disabled={loading || adjustmentType !== 'add'}\r\n                />\r\n              </Box>\r\n              \r\n              <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 2 }}>\r\n                <Box sx={{ flex: '1 1 calc(50% - 8px)', minWidth: '200px' }}>\r\n                  <TextField\r\n                    name=\"manufacturing_date\"\r\n                    label=\"Manufacturing Date (optional)\"\r\n                    type=\"date\"\r\n                    fullWidth\r\n                    InputLabelProps={{ shrink: true }}\r\n                    value={formData.manufacturing_date}\r\n                    onChange={handleChange}\r\n                    disabled={loading || adjustmentType !== 'add'}\r\n                  />\r\n                </Box>\r\n                \r\n                <Box sx={{ flex: '1 1 calc(50% - 8px)', minWidth: '200px' }}>\r\n                  <TextField\r\n                    name=\"expiry_date\"\r\n                    label=\"Expiry Date (optional)\"\r\n                    type=\"date\"\r\n                    fullWidth\r\n                    InputLabelProps={{ shrink: true }}\r\n                    value={formData.expiry_date}\r\n                    onChange={handleChange}\r\n                    disabled={loading || adjustmentType !== 'add'}\r\n                    error={!!errors.expiry_date}\r\n                    helperText={errors.expiry_date}\r\n                  />\r\n                </Box>\r\n              </Box>\r\n            </Box>\r\n          )}\r\n        </Box>\r\n      )}\r\n      \r\n      <Box sx={{ mt: 4 }}>\r\n        <FormButtons\r\n          onCancel={onCancel}\r\n          onSubmit={handleSubmit}\r\n          loading={loading}\r\n          submitText=\"Save Adjustment\"\r\n        />\r\n      </Box>\r\n    </FormContainer>\r\n  );\r\n};\r\n\r\nexport default InventoryAdjustForm;","usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"d:\\All python project\\Tubex\\Frontend\\app\\src\\components\\whitelabel\\inventory\\InventoryAdjustment.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'setQuantity' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":34,"column":20,"nodeType":"Identifier","messageId":"unusedVar","endLine":34,"endColumn":31},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'setReason' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":35,"column":18,"nodeType":"Identifier","messageId":"unusedVar","endLine":35,"endColumn":27},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'setReference' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":36,"column":21,"nodeType":"Identifier","messageId":"unusedVar","endLine":36,"endColumn":33},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'setErrors' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":38,"column":18,"nodeType":"Identifier","messageId":"unusedVar","endLine":38,"endColumn":27},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'fetchInventoryDetails'. Either include it or remove the dependency array.","line":42,"column":6,"nodeType":"ArrayExpression","endLine":42,"endColumn":19,"suggestions":[{"desc":"Update the dependencies array to be: [fetchInventoryDetails, inventoryId]","fix":{"range":[1335,1348],"text":"[fetchInventoryDetails, inventoryId]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\r\nimport {\r\n  Box,\r\n  TextField,\r\n  FormControl,\r\n  FormControlLabel,\r\n  RadioGroup,\r\n  Radio,\r\n  FormLabel,\r\n  Typography,\r\n  Alert,\r\n} from '@mui/material';\r\nimport FormContainer from '../FormContainer';\r\nimport FormButtons from '../FormButtons';\r\nimport { inventoryService } from '../../../services/api';\r\n\r\ninterface InventoryAdjustmentProps {\r\n  inventoryId: string;\r\n  onCancel?: () => void;\r\n  onComplete?: (success: boolean) => void;\r\n}\r\n\r\nconst InventoryAdjustment: React.FC<InventoryAdjustmentProps> = ({\r\n  inventoryId,\r\n  onCancel,\r\n  onComplete,\r\n}) => {\r\n  const [loading, setLoading] = useState(false);\r\n  const [fetchLoading, setFetchLoading] = useState(false);\r\n  const [error, setError] = useState<string | null>(null);\r\n  \r\n  const [inventoryDetails, setInventoryDetails] = useState<any>(null);\r\n  const [adjustmentType, setAdjustmentType] = useState<'add' | 'subtract' | 'set'>('add');\r\n  const [quantity, setQuantity] = useState<string>('');\r\n  const [reason, setReason] = useState<string>('');\r\n  const [reference, setReference] = useState<string>('');\r\n  const [formData, setFormData] = useState({ adjustment: '', reason: '' });\r\n  const [errors, setErrors] = useState({ adjustment: '', reason: '' });\r\n\r\n  useEffect(() => {\r\n    fetchInventoryDetails();\r\n  }, [inventoryId]);\r\n\r\n  const fetchInventoryDetails = async () => {\r\n    if (!inventoryId) return;\r\n    \r\n    setFetchLoading(true);\r\n    setError(null);\r\n    \r\n    try {\r\n      const response = await inventoryService.getInventory({ companyId: inventoryId });\r\n      setInventoryDetails(response.data);\r\n    } catch (err: any) {\r\n      setError(err.message || 'Failed to load inventory details');\r\n      console.error('Error fetching inventory details:', err);\r\n    } finally {\r\n      setFetchLoading(false);\r\n    }\r\n  };\r\n  \r\n  const validateForm = () => {\r\n    if (!quantity || Number.isNaN(parseFloat(quantity)) || parseFloat(quantity) <= 0) {\r\n      setError('Please enter a valid quantity');\r\n      return false;\r\n    }\r\n    \r\n    if (!reason) {\r\n      setError('Please provide a reason for this adjustment');\r\n      return false;\r\n    }\r\n    \r\n    return true;\r\n  };\r\n  \r\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    const { name, value } = e.target;\r\n    setFormData((prev) => ({ ...prev, [name]: value }));\r\n  };\r\n\r\n  const handleSubmit = async () => {\r\n    if (!validateForm() || !inventoryDetails) return;\r\n    \r\n    setLoading(true);\r\n    setError(null);\r\n    \r\n    try {\r\n      const numericQuantity = parseFloat(quantity);\r\n      \r\n      // Build adjustment parameters based on adjustment type\r\n      let adjustment: number;\r\n      switch (adjustmentType) {\r\n        case 'add':\r\n          adjustment = numericQuantity;\r\n          break;\r\n        case 'subtract':\r\n          adjustment = -numericQuantity;\r\n          break;\r\n        case 'set':\r\n          adjustment = numericQuantity - inventoryDetails.quantity;\r\n          break;\r\n        default:\r\n          adjustment = numericQuantity;\r\n      }\r\n      \r\n      await inventoryService.adjustInventory(inventoryId, {\r\n        adjustment,\r\n        reason,\r\n        reference: reference || undefined,\r\n      });\r\n      \r\n      if (onComplete) {\r\n        onComplete(true);\r\n      }\r\n    } catch (err: any) {\r\n      setError(err.message || 'Failed to adjust inventory');\r\n      console.error('Error adjusting inventory:', err);\r\n      if (onComplete) {\r\n        onComplete(false);\r\n      }\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  if (fetchLoading || !inventoryDetails) {\r\n    return (\r\n      <FormContainer \r\n        title=\"Inventory Adjustment\" \r\n        loading={fetchLoading}\r\n        error={error}\r\n      >\r\n        <Box sx={{ py: 4 }}>\r\n          <Typography align=\"center\">Loading inventory details...</Typography>\r\n        </Box>\r\n      </FormContainer>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <FormContainer \r\n      title=\"Inventory Adjustment\" \r\n      subtitle={`Adjust inventory for ${inventoryDetails.product_name}`}\r\n      error={error}\r\n      loading={loading}\r\n    >\r\n      <Box sx={{ display: 'flex', flexDirection: 'column', gap: 3 }}>\r\n        <Box>\r\n          <Box sx={{ mb: 2 }}>\r\n            <Typography variant=\"subtitle1\">Current Information</Typography>\r\n          </Box>\r\n          \r\n          <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 2 }}>\r\n            <Box sx={{ flex: '1 1 calc(50% - 8px)', minWidth: '250px' }}>\r\n              <TextField\r\n                fullWidth\r\n                label=\"Product\"\r\n                value={inventoryDetails.product_name || ''}\r\n                InputProps={{ readOnly: true }}\r\n              />\r\n            </Box>\r\n            <Box sx={{ flex: '1 1 calc(50% - 8px)', minWidth: '250px' }}>\r\n              <TextField\r\n                fullWidth\r\n                label=\"Current Quantity\"\r\n                value={`${inventoryDetails.quantity} ${inventoryDetails.unit || ''}`}\r\n                InputProps={{ readOnly: true }}\r\n              />\r\n            </Box>\r\n            <Box sx={{ flex: '1 1 calc(50% - 8px)', minWidth: '250px' }}>\r\n              <TextField\r\n                fullWidth\r\n                label=\"Warehouse\"\r\n                value={inventoryDetails.warehouse_name || ''}\r\n                InputProps={{ readOnly: true }}\r\n              />\r\n            </Box>\r\n            <Box sx={{ flex: '1 1 calc(50% - 8px)', minWidth: '250px' }}>\r\n              <TextField\r\n                fullWidth\r\n                label=\"Last Updated\"\r\n                value={inventoryDetails.last_updated ? \r\n                  new Date(inventoryDetails.last_updated).toLocaleString() : 'N/A'}\r\n                InputProps={{ readOnly: true }}\r\n              />\r\n            </Box>\r\n          </Box>\r\n        </Box>\r\n        \r\n        <Box>\r\n          <Box sx={{ mb: 2 }}>\r\n            <Typography variant=\"subtitle1\">Adjustment Details</Typography>\r\n          </Box>\r\n          \r\n          <FormControl component=\"fieldset\" sx={{ mb: 3, width: '100%' }}>\r\n            <FormLabel component=\"legend\">Adjustment Type</FormLabel>\r\n            <RadioGroup\r\n              row\r\n              value={adjustmentType}\r\n              onChange={(e) => setAdjustmentType(e.target.value as 'add' | 'subtract' | 'set')}\r\n            >\r\n              <FormControlLabel value=\"add\" control={<Radio />} label=\"Add\" />\r\n              <FormControlLabel value=\"subtract\" control={<Radio />} label=\"Subtract\" />\r\n              <FormControlLabel value=\"set\" control={<Radio />} label=\"Set to value\" />\r\n            </RadioGroup>\r\n          </FormControl>\r\n          \r\n          <Box sx={{ display: 'flex', flexDirection: 'column', gap: 2 }}>\r\n            <TextField\r\n              name=\"adjustment\"\r\n              label=\"Adjustment\"\r\n              fullWidth\r\n              required\r\n              value={formData.adjustment}\r\n              onChange={handleChange}\r\n              error={!!errors.adjustment}\r\n              helperText={errors.adjustment}\r\n            />\r\n            <TextField\r\n              name=\"reason\"\r\n              label=\"Reason\"\r\n              fullWidth\r\n              required\r\n              value={formData.reason}\r\n              onChange={handleChange}\r\n              error={!!errors.reason}\r\n              helperText={errors.reason}\r\n            />\r\n          </Box>\r\n          \r\n          {adjustmentType === 'set' && parseFloat(quantity || '0') !== inventoryDetails.quantity && (\r\n            <Box sx={{ mt: 2 }}>\r\n              <Alert severity=\"info\">\r\n                This will {parseFloat(quantity || '0') > inventoryDetails.quantity ? 'add' : 'remove'} {\r\n                  Math.abs(parseFloat(quantity || '0') - inventoryDetails.quantity)\r\n                } {inventoryDetails.unit || ''} to the current inventory.\r\n              </Alert>\r\n            </Box>\r\n          )}\r\n        </Box>\r\n      </Box>\r\n      \r\n      <Box sx={{ mt: 4 }}>\r\n        <FormButtons\r\n          onCancel={onCancel}\r\n          onSubmit={handleSubmit}\r\n          loading={loading}\r\n          submitText=\"Save Adjustment\"\r\n        />\r\n      </Box>\r\n    </FormContainer>\r\n  );\r\n};\r\n\r\nexport default InventoryAdjustment;","usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"d:\\All python project\\Tubex\\Frontend\\app\\src\\components\\whitelabel\\inventory\\InventoryForm.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"d:\\All python project\\Tubex\\Frontend\\app\\src\\components\\whitelabel\\inventory\\InventoryList.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'onTransferClick' is defined but never used. Allowed unused args must match /^_/u.","line":183,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":183,"endColumn":18},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'companyId'. Either include it or remove the dependency array.","line":297,"column":6,"nodeType":"ArrayExpression","endLine":297,"endColumn":22,"suggestions":[{"desc":"Update the dependencies array to be: [companyId, fetchInventory]","fix":{"range":[9199,9215],"text":"[companyId, fetchInventory]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useReducer, useEffect, useCallback } from 'react';\r\nimport {\r\n  Box,\r\n  Button,\r\n  Typography,\r\n  TextField,\r\n  InputAdornment,\r\n  FormControl,\r\n  InputLabel,\r\n  Select,\r\n  MenuItem,\r\n  Chip,\r\n  IconButton,\r\n  Tooltip,\r\n  useTheme as useMuiTheme,\r\n  SelectChangeEvent,\r\n  Alert\r\n} from '@mui/material';\r\nimport SearchIcon from '@mui/icons-material/Search';\r\nimport TuneIcon from '@mui/icons-material/Tune';\r\nimport AddIcon from '@mui/icons-material/Add';\r\nimport EditIcon from '@mui/icons-material/Edit';\r\nimport TransferWithinAStationIcon from '@mui/icons-material/TransferWithinAStation';\r\nimport WarningIcon from '@mui/icons-material/Warning';\r\nimport DataTable, { Column } from '../DataTable';\r\nimport { useTheme } from '../../../contexts/ThemeContext';\r\nimport { inventoryService } from '../../../services/api';\r\nimport { InventoryItem } from '../../../services/api/inventoryService';\r\n\r\ninterface InventoryListProps {\r\n  companyId: string; // Required parameter\r\n  warehouseId?: string;\r\n  onAdjustInventory?: (inventoryId: string) => void;\r\n  onTransferInventory?: (inventoryId: string) => void;\r\n  onAddInventory?: () => void;\r\n  hideActions?: boolean;\r\n  maxHeight?: number | string;\r\n  onInventorySelect?: (inventoryId: string) => void;\r\n  onTransferClick?: (product: { id: string; name: string }) => void;\r\n};\r\n\r\n// Define types for inventory and warehouse\r\ninterface Inventory extends InventoryItem {\r\n  product_name?: string;\r\n  unit?: string;\r\n  warehouse_name?: string;\r\n  threshold?: number;\r\n  warehouse_capacity?: number;\r\n  last_updated?: string;\r\n  [key: string]: any; // For additional properties\r\n}\r\n\r\ninterface Warehouse {\r\n  id: string;\r\n  name: string;\r\n  [key: string]: any; // For additional properties\r\n}\r\n\r\n// Define state interface\r\ninterface InventoryListState {\r\n  inventory: Inventory[];\r\n  loading: boolean;\r\n  error: string | null;\r\n  searchTerm: string;\r\n  selectedWarehouse: string;\r\n  warehouses: Warehouse[];\r\n  page: number;\r\n  rowsPerPage: number;\r\n  totalCount: number;\r\n  batchFilter: string;\r\n  sortBy: string;\r\n  sortDirection: 'asc' | 'desc';\r\n}\r\n\r\n// Define action types\r\ntype InventoryListAction =\r\n  | { type: 'SET_INVENTORY'; payload: { data: Inventory[], totalCount: number } }\r\n  | { type: 'SET_LOADING'; payload: boolean }\r\n  | { type: 'SET_ERROR'; payload: string | null }\r\n  | { type: 'SET_SEARCH_TERM'; payload: string }\r\n  | { type: 'SET_SELECTED_WAREHOUSE'; payload: string }\r\n  | { type: 'SET_WAREHOUSES'; payload: Warehouse[] }\r\n  | { type: 'SET_PAGE'; payload: number }\r\n  | { type: 'SET_ROWS_PER_PAGE'; payload: number }\r\n  | { type: 'SET_BATCH_FILTER'; payload: string }\r\n  | { type: 'SET_SORT_BY'; payload: string }\r\n  | { type: 'SET_SORT_DIRECTION'; payload: 'asc' | 'desc' };\r\n\r\n// Define initial state\r\nconst initialState: InventoryListState = {\r\n  inventory: [],\r\n  loading: false,\r\n  error: null,\r\n  searchTerm: '',\r\n  selectedWarehouse: '',\r\n  warehouses: [],\r\n  page: 0,\r\n  rowsPerPage: 10,\r\n  totalCount: 0,\r\n  batchFilter: '',\r\n  sortBy: 'product_name',\r\n  sortDirection: 'asc'\r\n};\r\n\r\n// Define reducer function\r\nconst inventoryListReducer = (state: InventoryListState, action: InventoryListAction): InventoryListState => {\r\n  switch (action.type) {\r\n    case 'SET_INVENTORY':\r\n      return {\r\n        ...state,\r\n        inventory: action.payload.data,\r\n        totalCount: action.payload.totalCount\r\n      };\r\n    case 'SET_LOADING':\r\n      return {\r\n        ...state,\r\n        loading: action.payload\r\n      };\r\n    case 'SET_ERROR':\r\n      return {\r\n        ...state,\r\n        error: action.payload\r\n      };\r\n    case 'SET_SEARCH_TERM':\r\n      return {\r\n        ...state,\r\n        searchTerm: action.payload\r\n      };\r\n    case 'SET_SELECTED_WAREHOUSE':\r\n      return {\r\n        ...state,\r\n        selectedWarehouse: action.payload,\r\n        page: 0 // Reset to first page when changing warehouse\r\n      };\r\n    case 'SET_WAREHOUSES':\r\n      return {\r\n        ...state,\r\n        warehouses: action.payload\r\n      };\r\n    case 'SET_PAGE':\r\n      return {\r\n        ...state,\r\n        page: action.payload\r\n      };\r\n    case 'SET_ROWS_PER_PAGE':\r\n      return {\r\n        ...state,\r\n        rowsPerPage: action.payload,\r\n        page: 0 // Reset to first page when changing rows per page\r\n      };\r\n    case 'SET_BATCH_FILTER':\r\n      return {\r\n        ...state,\r\n        batchFilter: action.payload,\r\n        page: 0 // Reset to first page when changing filter\r\n      };\r\n    case 'SET_SORT_BY':\r\n      return {\r\n        ...state,\r\n        sortBy: action.payload,\r\n        page: 0 // Reset to first page when changing sort\r\n      };\r\n    case 'SET_SORT_DIRECTION':\r\n      return {\r\n        ...state,\r\n        sortDirection: action.payload,\r\n        page: 0 // Reset to first page when changing sort direction\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nconst InventoryList: React.FC<InventoryListProps> = ({\r\n  companyId,\r\n  warehouseId,\r\n  onAdjustInventory,\r\n  onTransferInventory,\r\n  onAddInventory,\r\n  hideActions = false,\r\n  maxHeight,\r\n  onInventorySelect,\r\n  onTransferClick,\r\n}) => {\r\n  // Theme hooks\r\n  const { theme: whitelabelTheme } = useTheme();\r\n  const muiTheme = useMuiTheme();\r\n\r\n  // Use reducer for state management\r\n  const [state, dispatch] = useReducer(inventoryListReducer, {\r\n    ...initialState,\r\n    selectedWarehouse: warehouseId || ''\r\n  });\r\n  \r\n  // Custom button style based on the whitelabel theme\r\n  const buttonStyle = {\r\n    backgroundColor: whitelabelTheme?.primaryColor || muiTheme.palette.primary.main,\r\n    color: '#fff',\r\n    borderRadius: whitelabelTheme?.buttonRadius !== undefined ? `${whitelabelTheme.buttonRadius}px` : undefined,\r\n    '&:hover': {\r\n      backgroundColor: whitelabelTheme?.primaryColor ? \r\n        `${whitelabelTheme.primaryColor}dd` : muiTheme.palette.primary.dark,\r\n    },\r\n  };\r\n  const fetchInventory = useCallback(async () => {\r\n    if (!companyId) {\r\n      dispatch({ type: 'SET_ERROR', payload: 'Company ID is required' });\r\n      return;\r\n    }\r\n\r\n    dispatch({ type: 'SET_LOADING', payload: true });\r\n    dispatch({ type: 'SET_ERROR', payload: null });\r\n    \r\n    try {\r\n      const params: any = {\r\n        page: state.page + 1, // API uses 1-based page indexing\r\n        limit: state.rowsPerPage,\r\n        search: state.searchTerm || undefined,\r\n        warehouseId: state.selectedWarehouse || undefined,\r\n        companyId: companyId,\r\n        sortBy: state.sortBy,\r\n        sortDirection: state.sortDirection,\r\n      };\r\n      \r\n      if (state.batchFilter) {\r\n        params.batchId = state.batchFilter;\r\n      }\r\n      \r\n      const response = await inventoryService.getInventory(params);\r\n      dispatch({ \r\n        type: 'SET_INVENTORY', \r\n        payload: {\r\n          data: response.data || [],\r\n          totalCount: response.pagination?.total || 0\r\n        }\r\n      });\r\n    } catch (err: any) {\r\n      dispatch({ type: 'SET_ERROR', payload: err.message || 'Failed to load inventory' });\r\n      console.error('Error fetching inventory:', err);\r\n    } finally {\r\n      dispatch({ type: 'SET_LOADING', payload: false });\r\n    }\r\n  }, [companyId, state.page, state.rowsPerPage, state.searchTerm, state.selectedWarehouse, \r\n      state.batchFilter, state.sortBy, state.sortDirection]);\r\n  \r\n  const fetchWarehouses = useCallback(async () => {\r\n    if (warehouseId) return; // Don't fetch warehouses if one is specified\r\n    if (!companyId) {\r\n      console.error('Company ID is required to fetch warehouses');\r\n      return;\r\n    }\r\n    \r\n    try {\r\n      const response = await inventoryService.getWarehouses(companyId);\r\n      \r\n      // Handle different potential response structures\r\n      let warehousesList: Array<any> = [];\r\n      \r\n      // If response.data is an array\r\n      if (Array.isArray(response.data)) {\r\n        warehousesList = response.data;\r\n      } \r\n      // If response.data contains a warehouses property that is an array\r\n      else if (response.data && typeof response.data === 'object' && 'warehouses' in response.data && \r\n              Array.isArray((response.data as any).warehouses)) {\r\n        warehousesList = (response.data as any).warehouses;\r\n      }\r\n      // If response.data.data contains the warehouses array\r\n      else if (response.data && typeof response.data === 'object' && 'data' in response.data && \r\n              Array.isArray((response.data as any).data)) {\r\n        warehousesList = (response.data as any).data;\r\n      }\r\n      // Default to empty array if no matching structure is found\r\n      else {\r\n        console.error('Unexpected API response format:', response);\r\n        warehousesList = [];\r\n      }\r\n      \r\n      dispatch({ type: 'SET_WAREHOUSES', payload: warehousesList });\r\n    } catch (err: any) {\r\n      console.error('Error fetching warehouses:', err);\r\n      // Always set warehouses to an empty array on error\r\n      dispatch({ type: 'SET_WAREHOUSES', payload: [] });\r\n    }\r\n  }, [companyId, warehouseId]);\r\n    // useEffect hooks\r\n  useEffect(() => {\r\n    if (companyId) {\r\n      fetchWarehouses();\r\n    }\r\n  }, [companyId, warehouseId, fetchWarehouses]);\r\n  \r\n  useEffect(() => {\r\n    if (companyId) {\r\n      fetchInventory();\r\n    }\r\n  }, [fetchInventory]);\r\n  \r\n  const handleSearch = useCallback(() => {\r\n    dispatch({ type: 'SET_PAGE', payload: 0 }); // Reset to first page when searching\r\n    fetchInventory();\r\n  }, [fetchInventory]);\r\n  \r\n  const handleSearchKeyPress = useCallback((e: React.KeyboardEvent) => {\r\n    if (e.key === 'Enter') {\r\n      handleSearch();\r\n    }\r\n  }, [handleSearch]);\r\n  \r\n  const handleWarehouseChange = useCallback((event: SelectChangeEvent<string>) => {\r\n    const { value } = event.target;\r\n    dispatch({ type: 'SET_SELECTED_WAREHOUSE', payload: value });\r\n    // Page reset is handled in the reducer\r\n  }, []);\r\n  \r\n  const formatQuantityWithUnit = (quantity: number, unit: string) => {\r\n    return `${quantity.toLocaleString()} ${unit || ''}`;\r\n  };\r\n\r\n  const getStockLevelIndicator = (current: number, threshold: number, capacity: number) => {\r\n    let color: 'default' | 'success' | 'warning' | 'error' = 'default';\r\n    let label = 'Normal';\r\n    \r\n    const ratio = current / capacity;\r\n    \r\n    if (current <= threshold) {\r\n      color = 'error';\r\n      label = 'Low';\r\n    } else if (ratio >= 0.9) {\r\n      color = 'warning';\r\n      label = 'High';\r\n    } else if (ratio >= 0.5) {\r\n      color = 'success';\r\n      label = 'Good';\r\n    }\r\n    \r\n    return <Chip size=\"small\" color={color} label={label} />;\r\n  };\r\n  \r\n  // Validate the required companyId after all hooks are called\r\n  if (!companyId) {\r\n    return (\r\n      <Box sx={{ p: 2 }}>\r\n        <Alert severity=\"error\">\r\n          Company ID is required to display inventory\r\n        </Alert>\r\n      </Box>\r\n    );\r\n  }\r\n  \r\n  // Define columns\r\n  const columns: Column[] = [\r\n    {\r\n      id: 'product_name',\r\n      label: 'Product',\r\n      minWidth: 170,\r\n    },\r\n    {\r\n      id: 'quantity',\r\n      label: 'Quantity',\r\n      minWidth: 120,\r\n      align: 'right',\r\n      format: (value, row) => formatQuantityWithUnit(value, row?.unit)\r\n    },\r\n    {\r\n      id: 'warehouse_name',\r\n      label: 'Warehouse',\r\n      minWidth: 150,\r\n    },\r\n    {\r\n      id: 'batch_number',\r\n      label: 'Batch',\r\n      minWidth: 120,\r\n    },\r\n    {\r\n      id: 'stock_level',\r\n      label: 'Status',\r\n      minWidth: 120,\r\n      format: (_, row) => getStockLevelIndicator(\r\n        row.quantity, \r\n        row.threshold || 0, \r\n        row.warehouse_capacity || 1000\r\n      )\r\n    },\r\n    {\r\n      id: 'last_updated',\r\n      label: 'Last Updated',\r\n      minWidth: 150,\r\n      format: (value) => value ? new Date(value).toLocaleString() : 'N/A'\r\n    }\r\n  ];\r\n  \r\n  // Add actions column if required\r\n  if (!hideActions) {\r\n    columns.push({\r\n      id: 'actions',\r\n      label: 'Actions',\r\n      minWidth: 120,\r\n      align: 'right',\r\n      format: (_, row) => (\r\n        <Box>\r\n          {onAdjustInventory && (\r\n            <Tooltip title=\"Adjust Inventory\">\r\n              <IconButton \r\n                size=\"small\" \r\n                onClick={(e) => {\r\n                  e.stopPropagation();\r\n                  onAdjustInventory(row.id);\r\n                }}\r\n              >\r\n                <EditIcon fontSize=\"small\" />\r\n              </IconButton>\r\n            </Tooltip>\r\n          )}\r\n          \r\n          {onTransferInventory && (\r\n            <Tooltip title=\"Transfer Inventory\">\r\n              <IconButton \r\n                size=\"small\" \r\n                onClick={(e) => {\r\n                  e.stopPropagation();\r\n                  onTransferInventory(row.id);\r\n                }}\r\n              >\r\n                <TransferWithinAStationIcon fontSize=\"small\" />\r\n              </IconButton>\r\n            </Tooltip>\r\n          )}\r\n        </Box>\r\n      )\r\n    });\r\n  }\r\n  \r\n  return (\r\n    <Box sx={{ maxHeight }}>\r\n      <Box sx={{ \r\n        mb: 3, \r\n        display: 'flex', \r\n        flexDirection: { xs: 'column', md: 'row' }, \r\n        gap: 2, \r\n        justifyContent: 'space-between', \r\n        alignItems: { xs: 'stretch', md: 'center' } \r\n      }}>\r\n        <Typography variant=\"h6\" component=\"h2\">\r\n          Inventory\r\n          {state.inventory.some(item => item.quantity <= (item.threshold || 0)) && (\r\n            <Tooltip title=\"Some products have low stock\">\r\n              <WarningIcon \r\n                color=\"warning\" \r\n                fontSize=\"small\" \r\n                sx={{ ml: 1, verticalAlign: 'middle' }} \r\n              />\r\n            </Tooltip>\r\n          )}\r\n        </Typography>\r\n        \r\n        <Box sx={{ \r\n          display: 'flex', \r\n          flexDirection: { xs: 'column', sm: 'row' }, \r\n          gap: 2 \r\n        }}>\r\n          <Box sx={{ display: 'flex', gap: 2 }}>\r\n            <TextField\r\n              placeholder=\"Search products...\"\r\n              size=\"small\"\r\n              value={state.searchTerm}\r\n              onChange={(e) => dispatch({ type: 'SET_SEARCH_TERM', payload: e.target.value })}\r\n              onKeyPress={handleSearchKeyPress}\r\n              InputProps={{\r\n                startAdornment: (\r\n                  <InputAdornment position=\"start\">\r\n                    <SearchIcon />\r\n                  </InputAdornment>\r\n                ),\r\n                endAdornment: state.searchTerm && (\r\n                  <InputAdornment position=\"end\">\r\n                    <Button \r\n                      size=\"small\" \r\n                      onClick={() => {\r\n                        dispatch({ type: 'SET_SEARCH_TERM', payload: '' });\r\n                        if (!state.searchTerm) return;\r\n                        setTimeout(() => handleSearch(), 0);\r\n                      }}\r\n                    >\r\n                      Clear\r\n                    </Button>\r\n                  </InputAdornment>\r\n                ),\r\n              }}\r\n            />\r\n            \r\n            {!warehouseId && state.warehouses.length > 0 && (\r\n              <FormControl sx={{ minWidth: 150 }} size=\"small\">\r\n                <InputLabel id=\"warehouse-filter-label\">Warehouse</InputLabel>\r\n                <Select\r\n                  labelId=\"warehouse-filter-label\"\r\n                  value={state.selectedWarehouse}\r\n                  onChange={handleWarehouseChange}\r\n                  label=\"Warehouse\"\r\n                >\r\n                  <MenuItem value=\"\">All Warehouses</MenuItem>\r\n                  {Array.isArray(state.warehouses) ? state.warehouses.map((warehouse) => (\r\n                    <MenuItem key={warehouse.id} value={warehouse.id}>\r\n                      {warehouse.name}\r\n                    </MenuItem>\r\n                  )) : null}\r\n                </Select>\r\n              </FormControl>\r\n            )}\r\n            \r\n            <Tooltip title=\"Advanced Filters\">\r\n              <IconButton>\r\n                <TuneIcon />\r\n              </IconButton>\r\n            </Tooltip>\r\n          </Box>\r\n          \r\n          {onAddInventory && (\r\n            <Button\r\n              variant=\"contained\"\r\n              startIcon={<AddIcon />}\r\n              onClick={onAddInventory}\r\n              sx={buttonStyle}\r\n            >\r\n              Add Inventory\r\n            </Button>\r\n          )}\r\n        </Box>\r\n      </Box>\r\n      \r\n      <DataTable\r\n        columns={columns}\r\n        data={state.inventory}\r\n        loading={state.loading}\r\n        error={state.error}\r\n        pagination={{\r\n          page: state.page,\r\n          totalCount: state.totalCount,\r\n          rowsPerPage: state.rowsPerPage,\r\n          onPageChange: (newPage) => dispatch({ type: 'SET_PAGE', payload: newPage }),\r\n          onRowsPerPageChange: (newRowsPerPage) => {\r\n            dispatch({ type: 'SET_ROWS_PER_PAGE', payload: newRowsPerPage });\r\n            // Page reset is handled in the reducer\r\n          },\r\n        }}\r\n        onRowClick={onInventorySelect ? (row) => onInventorySelect(row.id) : undefined}\r\n      />\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default InventoryList;","usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"d:\\All python project\\Tubex\\Frontend\\app\\src\\components\\whitelabel\\inventory\\InventoryListRefactored.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'InventoryItem' is defined but never used. Allowed unused vars must match /^_/u.","line":28,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":28,"endColumn":23},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'onTransferClick' is defined but never used. Allowed unused args must match /^_/u.","line":187,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":187,"endColumn":18},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'companyId'. Either include it or remove the dependency array.","line":313,"column":6,"nodeType":"ArrayExpression","endLine":313,"endColumn":22,"suggestions":[{"desc":"Update the dependencies array to be: [companyId, fetchInventory]","fix":{"range":[9814,9830],"text":"[companyId, fetchInventory]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useReducer, useEffect, useCallback } from 'react';\r\nimport {\r\n  Box,\r\n  Button,\r\n  Typography,\r\n  TextField,\r\n  InputAdornment,\r\n  FormControl,\r\n  InputLabel,\r\n  Select,\r\n  MenuItem,\r\n  Chip,\r\n  IconButton,\r\n  Tooltip,\r\n  useTheme as useMuiTheme,\r\n  SelectChangeEvent,\r\n  Alert\r\n} from '@mui/material';\r\nimport SearchIcon from '@mui/icons-material/Search';\r\nimport TuneIcon from '@mui/icons-material/Tune';\r\nimport AddIcon from '@mui/icons-material/Add';\r\nimport EditIcon from '@mui/icons-material/Edit';\r\nimport TransferWithinAStationIcon from '@mui/icons-material/TransferWithinAStation';\r\nimport WarningIcon from '@mui/icons-material/Warning';\r\nimport DataTable, { Column } from '../DataTable';\r\nimport { useTheme } from '../../../contexts/ThemeContext';\r\nimport { inventoryService } from '../../../services/api';\r\nimport { InventoryItem } from '../../../services/api/inventoryService';\r\n\r\ninterface InventoryListProps {\r\n  companyId: string; // Required parameter\r\n  warehouseId?: string;\r\n  onAdjustInventory?: (inventoryId: string) => void;\r\n  onTransferInventory?: (inventoryId: string) => void;\r\n  onAddInventory?: () => void;\r\n  hideActions?: boolean;\r\n  maxHeight?: number | string;\r\n  onInventorySelect?: (inventoryId: string) => void;\r\n  onTransferClick?: (product: { id: string; name: string }) => void;\r\n}\r\n\r\n// Define types for inventory and warehouse\r\ninterface Inventory {\r\n  id: string;\r\n  product_name: string;\r\n  quantity: number;\r\n  unit: string;\r\n  warehouse_name: string;\r\n  warehouse_id: string;\r\n  batch_number?: string;\r\n  threshold?: number;\r\n  warehouse_capacity?: number;\r\n  last_updated?: string;\r\n  [key: string]: any; // For additional properties\r\n}\r\n\r\ninterface Warehouse {\r\n  id: string;\r\n  name: string;\r\n  [key: string]: any; // For additional properties\r\n}\r\n\r\n// Define state interface\r\ninterface InventoryListState {\r\n  inventory: Inventory[];\r\n  loading: boolean;\r\n  error: string | null;\r\n  searchTerm: string;\r\n  selectedWarehouse: string;\r\n  warehouses: Warehouse[];\r\n  page: number;\r\n  rowsPerPage: number;\r\n  totalCount: number;\r\n  batchFilter: string;\r\n  sortBy: string;\r\n  sortDirection: 'asc' | 'desc';\r\n}\r\n\r\n// Define action types\r\ntype InventoryListAction =\r\n  | { type: 'SET_INVENTORY'; payload: { data: Inventory[], totalCount: number } }\r\n  | { type: 'SET_LOADING'; payload: boolean }\r\n  | { type: 'SET_ERROR'; payload: string | null }\r\n  | { type: 'SET_SEARCH_TERM'; payload: string }\r\n  | { type: 'SET_SELECTED_WAREHOUSE'; payload: string }\r\n  | { type: 'SET_WAREHOUSES'; payload: Warehouse[] }\r\n  | { type: 'SET_PAGE'; payload: number }\r\n  | { type: 'SET_ROWS_PER_PAGE'; payload: number }\r\n  | { type: 'SET_BATCH_FILTER'; payload: string }\r\n  | { type: 'SET_SORT_BY'; payload: string }\r\n  | { type: 'SET_SORT_DIRECTION'; payload: 'asc' | 'desc' };\r\n\r\n// Define initial state\r\nconst initialState: InventoryListState = {\r\n  inventory: [],\r\n  loading: false,\r\n  error: null,\r\n  searchTerm: '',\r\n  selectedWarehouse: '',\r\n  warehouses: [],\r\n  page: 0,\r\n  rowsPerPage: 10,\r\n  totalCount: 0,\r\n  batchFilter: '',\r\n  sortBy: 'product_name',\r\n  sortDirection: 'asc'\r\n};\r\n\r\n// Define reducer function\r\nconst inventoryListReducer = (state: InventoryListState, action: InventoryListAction): InventoryListState => {\r\n  switch (action.type) {\r\n    case 'SET_INVENTORY':\r\n      return {\r\n        ...state,\r\n        inventory: action.payload.data,\r\n        totalCount: action.payload.totalCount\r\n      };\r\n    case 'SET_LOADING':\r\n      return {\r\n        ...state,\r\n        loading: action.payload\r\n      };\r\n    case 'SET_ERROR':\r\n      return {\r\n        ...state,\r\n        error: action.payload\r\n      };\r\n    case 'SET_SEARCH_TERM':\r\n      return {\r\n        ...state,\r\n        searchTerm: action.payload\r\n      };\r\n    case 'SET_SELECTED_WAREHOUSE':\r\n      return {\r\n        ...state,\r\n        selectedWarehouse: action.payload,\r\n        page: 0 // Reset to first page when changing warehouse\r\n      };\r\n    case 'SET_WAREHOUSES':\r\n      return {\r\n        ...state,\r\n        warehouses: action.payload\r\n      };\r\n    case 'SET_PAGE':\r\n      return {\r\n        ...state,\r\n        page: action.payload\r\n      };\r\n    case 'SET_ROWS_PER_PAGE':\r\n      return {\r\n        ...state,\r\n        rowsPerPage: action.payload,\r\n        page: 0 // Reset to first page when changing rows per page\r\n      };\r\n    case 'SET_BATCH_FILTER':\r\n      return {\r\n        ...state,\r\n        batchFilter: action.payload,\r\n        page: 0 // Reset to first page when changing filter\r\n      };\r\n    case 'SET_SORT_BY':\r\n      return {\r\n        ...state,\r\n        sortBy: action.payload,\r\n        page: 0 // Reset to first page when changing sort\r\n      };\r\n    case 'SET_SORT_DIRECTION':\r\n      return {\r\n        ...state,\r\n        sortDirection: action.payload,\r\n        page: 0 // Reset to first page when changing sort direction\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nconst InventoryList: React.FC<InventoryListProps> = ({\r\n  companyId,\r\n  warehouseId,\r\n  onAdjustInventory,\r\n  onTransferInventory,\r\n  onAddInventory,\r\n  hideActions = false,\r\n  maxHeight,\r\n  onInventorySelect,\r\n  onTransferClick,\r\n}) => {\r\n  // Theme hooks\r\n  const { theme: whitelabelTheme } = useTheme();\r\n  const muiTheme = useMuiTheme();\r\n\r\n  // Use reducer for state management\r\n  const [state, dispatch] = useReducer(inventoryListReducer, {\r\n    ...initialState,\r\n    selectedWarehouse: warehouseId || ''\r\n  });\r\n\r\n  // Custom button style based on the whitelabel theme\r\n  const buttonStyle = {\r\n    backgroundColor: whitelabelTheme?.primaryColor || muiTheme.palette.primary.main,\r\n    color: '#fff',\r\n    borderRadius: whitelabelTheme?.buttonRadius !== undefined ? `${whitelabelTheme.buttonRadius}px` : undefined,\r\n    '&:hover': {\r\n      backgroundColor: whitelabelTheme?.primaryColor ? \r\n        `${whitelabelTheme.primaryColor}dd` : muiTheme.palette.primary.dark,\r\n    },\r\n  };\r\n\r\n  const fetchInventory = useCallback(async () => {\r\n    if (!companyId) {\r\n      dispatch({ type: 'SET_ERROR', payload: 'Company ID is required' });\r\n      return;\r\n    }\r\n\r\n    dispatch({ type: 'SET_LOADING', payload: true });\r\n    dispatch({ type: 'SET_ERROR', payload: null });\r\n    \r\n    try {\r\n      const params: any = {\r\n        page: state.page + 1, // API uses 1-based page indexing\r\n        limit: state.rowsPerPage,\r\n        search: state.searchTerm || undefined,\r\n        warehouseId: state.selectedWarehouse || undefined,\r\n        companyId: companyId,\r\n        sortBy: state.sortBy,\r\n        sortDirection: state.sortDirection,\r\n      };\r\n      \r\n      if (state.batchFilter) {\r\n        params.batchId = state.batchFilter;\r\n      }\r\n        const response = await inventoryService.getInventory(params);      // Map the response data from InventoryItem[] to Inventory[] by adding any missing properties\r\n      const mappedData = (response.data || []).map(item => {\r\n        const inventoryItem: Inventory = {\r\n          ...item as any,\r\n          product_name: item.product?.name || 'Unknown Product',\r\n          unit: '', // Since unit is not in the InventoryItem, we set default empty string\r\n          warehouse_name: item.warehouse?.name || 'Unknown Warehouse',\r\n          warehouse_id: item.warehouse_id\r\n        };\r\n        return inventoryItem;\r\n      });\r\n      \r\n      dispatch({ \r\n        type: 'SET_INVENTORY', \r\n        payload: {\r\n          data: mappedData,\r\n          totalCount: response.pagination?.total || 0\r\n        }\r\n      });\r\n    } catch (err: any) {\r\n      dispatch({ type: 'SET_ERROR', payload: err.message || 'Failed to load inventory' });\r\n      console.error('Error fetching inventory:', err);\r\n    } finally {\r\n      dispatch({ type: 'SET_LOADING', payload: false });\r\n    }\r\n  }, [companyId, state.page, state.rowsPerPage, state.searchTerm, state.selectedWarehouse, \r\n      state.batchFilter, state.sortBy, state.sortDirection]);\r\n  \r\n  const fetchWarehouses = useCallback(async () => {\r\n    if (warehouseId) return; // Don't fetch warehouses if one is specified\r\n    if (!companyId) {\r\n      console.error('Company ID is required to fetch warehouses');\r\n      return;\r\n    }\r\n    \r\n    try {\r\n      const response = await inventoryService.getWarehouses(companyId);\r\n      \r\n      // Handle different potential response structures\r\n      let warehousesList: Array<any> = [];\r\n      \r\n      // If response.data is an array\r\n      if (Array.isArray(response.data)) {\r\n        warehousesList = response.data;\r\n      } \r\n      // If response.data contains a warehouses property that is an array\r\n      else if (response.data && typeof response.data === 'object' && 'warehouses' in response.data && \r\n              Array.isArray((response.data as any).warehouses)) {\r\n        warehousesList = (response.data as any).warehouses;\r\n      }\r\n      // If response.data.data contains the warehouses array\r\n      else if (response.data && typeof response.data === 'object' && 'data' in response.data && \r\n              Array.isArray((response.data as any).data)) {\r\n        warehousesList = (response.data as any).data;\r\n      }\r\n      // Default to empty array if no matching structure is found\r\n      else {\r\n        console.error('Unexpected API response format:', response);\r\n        warehousesList = [];\r\n      }\r\n      \r\n      dispatch({ type: 'SET_WAREHOUSES', payload: warehousesList });\r\n    } catch (err: any) {\r\n      console.error('Error fetching warehouses:', err);\r\n      // Always set warehouses to an empty array on error\r\n      dispatch({ type: 'SET_WAREHOUSES', payload: [] });\r\n    }\r\n  }, [companyId, warehouseId]);\r\n  \r\n  // useEffect hooks\r\n  useEffect(() => {\r\n    if (companyId) {\r\n      fetchWarehouses();\r\n    }\r\n  }, [companyId, warehouseId, fetchWarehouses]);\r\n  \r\n  useEffect(() => {\r\n    if (companyId) {\r\n      fetchInventory();\r\n    }\r\n  }, [fetchInventory]);\r\n  \r\n  const handleSearch = useCallback(() => {\r\n    dispatch({ type: 'SET_PAGE', payload: 0 }); // Reset to first page when searching\r\n    fetchInventory();\r\n  }, [fetchInventory]);\r\n  \r\n  const handleSearchKeyPress = useCallback((e: React.KeyboardEvent) => {\r\n    if (e.key === 'Enter') {\r\n      handleSearch();\r\n    }\r\n  }, [handleSearch]);\r\n  \r\n  const handleWarehouseChange = useCallback((event: SelectChangeEvent<string>) => {\r\n    const { value } = event.target;\r\n    dispatch({ type: 'SET_SELECTED_WAREHOUSE', payload: value });\r\n    // Page reset is handled in the reducer\r\n  }, []);\r\n  \r\n  const formatQuantityWithUnit = (quantity: number, unit: string) => {\r\n    return `${quantity.toLocaleString()} ${unit || ''}`;\r\n  };\r\n\r\n  const getStockLevelIndicator = (current: number, threshold: number, capacity: number) => {\r\n    let color: 'default' | 'success' | 'warning' | 'error' = 'default';\r\n    let label = 'Normal';\r\n    \r\n    const ratio = current / capacity;\r\n    \r\n    if (current <= threshold) {\r\n      color = 'error';\r\n      label = 'Low';\r\n    } else if (ratio >= 0.9) {\r\n      color = 'warning';\r\n      label = 'High';\r\n    } else if (ratio >= 0.5) {\r\n      color = 'success';\r\n      label = 'Good';\r\n    }\r\n    \r\n    return <Chip size=\"small\" color={color} label={label} />;\r\n  };\r\n  \r\n  // Validate the required companyId after all hooks are called\r\n  if (!companyId) {\r\n    return (\r\n      <Box sx={{ p: 2 }}>\r\n        <Alert severity=\"error\">\r\n          Company ID is required to display inventory\r\n        </Alert>\r\n      </Box>\r\n    );\r\n  }\r\n  \r\n  // Define columns\r\n  const columns: Column[] = [\r\n    {\r\n      id: 'product_name',\r\n      label: 'Product',\r\n      minWidth: 170,\r\n    },\r\n    {\r\n      id: 'quantity',\r\n      label: 'Quantity',\r\n      minWidth: 120,\r\n      align: 'right',\r\n      format: (value, row) => formatQuantityWithUnit(value, row?.unit)\r\n    },\r\n    {\r\n      id: 'warehouse_name',\r\n      label: 'Warehouse',\r\n      minWidth: 150,\r\n    },\r\n    {\r\n      id: 'batch_number',\r\n      label: 'Batch',\r\n      minWidth: 120,\r\n    },\r\n    {\r\n      id: 'stock_level',\r\n      label: 'Status',\r\n      minWidth: 120,\r\n      format: (_, row) => getStockLevelIndicator(\r\n        row.quantity, \r\n        row.threshold || 0, \r\n        row.warehouse_capacity || 1000\r\n      )\r\n    },\r\n    {\r\n      id: 'last_updated',\r\n      label: 'Last Updated',\r\n      minWidth: 150,\r\n      format: (value) => value ? new Date(value).toLocaleString() : 'N/A'\r\n    }\r\n  ];\r\n  \r\n  // Add actions column if required\r\n  if (!hideActions) {\r\n    columns.push({\r\n      id: 'actions',\r\n      label: 'Actions',\r\n      minWidth: 120,\r\n      align: 'right',\r\n      format: (_, row) => (\r\n        <Box>\r\n          {onAdjustInventory && (\r\n            <Tooltip title=\"Adjust Inventory\">\r\n              <IconButton \r\n                size=\"small\" \r\n                onClick={(e) => {\r\n                  e.stopPropagation();\r\n                  onAdjustInventory(row.id);\r\n                }}\r\n              >\r\n                <EditIcon fontSize=\"small\" />\r\n              </IconButton>\r\n            </Tooltip>\r\n          )}\r\n          \r\n          {onTransferInventory && (\r\n            <Tooltip title=\"Transfer Inventory\">\r\n              <IconButton \r\n                size=\"small\" \r\n                onClick={(e) => {\r\n                  e.stopPropagation();\r\n                  onTransferInventory(row.id);\r\n                }}\r\n              >\r\n                <TransferWithinAStationIcon fontSize=\"small\" />\r\n              </IconButton>\r\n            </Tooltip>\r\n          )}\r\n        </Box>\r\n      )\r\n    });\r\n  }\r\n  \r\n  return (\r\n    <Box sx={{ maxHeight }}>\r\n      <Box sx={{ \r\n        mb: 3, \r\n        display: 'flex', \r\n        flexDirection: { xs: 'column', md: 'row' }, \r\n        gap: 2, \r\n        justifyContent: 'space-between', \r\n        alignItems: { xs: 'stretch', md: 'center' } \r\n      }}>\r\n        <Typography variant=\"h6\" component=\"h2\">\r\n          Inventory\r\n          {state.inventory.some(item => item.quantity <= (item.threshold || 0)) && (\r\n            <Tooltip title=\"Some products have low stock\">\r\n              <WarningIcon \r\n                color=\"warning\" \r\n                fontSize=\"small\" \r\n                sx={{ ml: 1, verticalAlign: 'middle' }} \r\n              />\r\n            </Tooltip>\r\n          )}\r\n        </Typography>\r\n        \r\n        <Box sx={{ \r\n          display: 'flex', \r\n          flexDirection: { xs: 'column', sm: 'row' }, \r\n          gap: 2 \r\n        }}>\r\n          <Box sx={{ display: 'flex', gap: 2 }}>\r\n            <TextField\r\n              placeholder=\"Search products...\"\r\n              size=\"small\"\r\n              value={state.searchTerm}\r\n              onChange={(e) => dispatch({ type: 'SET_SEARCH_TERM', payload: e.target.value })}\r\n              onKeyPress={handleSearchKeyPress}\r\n              InputProps={{\r\n                startAdornment: (\r\n                  <InputAdornment position=\"start\">\r\n                    <SearchIcon />\r\n                  </InputAdornment>\r\n                ),\r\n                endAdornment: state.searchTerm && (\r\n                  <InputAdornment position=\"end\">\r\n                    <Button \r\n                      size=\"small\" \r\n                      onClick={() => {\r\n                        dispatch({ type: 'SET_SEARCH_TERM', payload: '' });\r\n                        if (!state.searchTerm) return;\r\n                        setTimeout(() => handleSearch(), 0);\r\n                      }}\r\n                    >\r\n                      Clear\r\n                    </Button>\r\n                  </InputAdornment>\r\n                ),\r\n              }}\r\n            />\r\n            \r\n            {!warehouseId && state.warehouses.length > 0 && (\r\n              <FormControl sx={{ minWidth: 150 }} size=\"small\">\r\n                <InputLabel id=\"warehouse-filter-label\">Warehouse</InputLabel>\r\n                <Select\r\n                  labelId=\"warehouse-filter-label\"\r\n                  value={state.selectedWarehouse}\r\n                  onChange={handleWarehouseChange}\r\n                  label=\"Warehouse\"\r\n                >\r\n                  <MenuItem value=\"\">All Warehouses</MenuItem>\r\n                  {Array.isArray(state.warehouses) ? state.warehouses.map((warehouse) => (\r\n                    <MenuItem key={warehouse.id} value={warehouse.id}>\r\n                      {warehouse.name}\r\n                    </MenuItem>\r\n                  )) : null}\r\n                </Select>\r\n              </FormControl>\r\n            )}\r\n            \r\n            <Tooltip title=\"Advanced Filters\">\r\n              <IconButton>\r\n                <TuneIcon />\r\n              </IconButton>\r\n            </Tooltip>\r\n          </Box>\r\n          \r\n          {onAddInventory && (\r\n            <Button\r\n              variant=\"contained\"\r\n              startIcon={<AddIcon />}\r\n              onClick={onAddInventory}\r\n              sx={buttonStyle}\r\n            >\r\n              Add Inventory\r\n            </Button>\r\n          )}\r\n        </Box>\r\n      </Box>\r\n      \r\n      <DataTable\r\n        columns={columns}\r\n        data={state.inventory}\r\n        loading={state.loading}\r\n        error={state.error}\r\n        pagination={{\r\n          page: state.page,\r\n          totalCount: state.totalCount,\r\n          rowsPerPage: state.rowsPerPage,\r\n          onPageChange: (newPage) => dispatch({ type: 'SET_PAGE', payload: newPage }),\r\n          onRowsPerPageChange: (newRowsPerPage) => {\r\n            dispatch({ type: 'SET_ROWS_PER_PAGE', payload: newRowsPerPage });\r\n            // Page reset is handled in the reducer\r\n          },\r\n        }}\r\n        onRowClick={onInventorySelect ? (row) => onInventorySelect(row.id) : undefined}\r\n      />\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default InventoryList;\r\n","usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"d:\\All python project\\Tubex\\Frontend\\app\\src\\components\\whitelabel\\invoices\\InvoiceDetail.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'fetchInvoiceDetails'. Either include it or remove the dependency array.","line":71,"column":6,"nodeType":"ArrayExpression","endLine":71,"endColumn":17,"suggestions":[{"desc":"Update the dependencies array to be: [fetchInvoiceDetails, invoiceId]","fix":{"range":[2199,2210],"text":"[fetchInvoiceDetails, invoiceId]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\r\nimport { \r\n  Box, \r\n  Typography, \r\n  Paper, \r\n  Divider, \r\n  Chip, \r\n  Button, \r\n  Stack,\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableContainer,\r\n  TableHead,\r\n  TableRow,\r\n  IconButton,\r\n  Menu,\r\n  MenuItem,\r\n  Dialog,\r\n  DialogTitle,\r\n  DialogContent,\r\n  DialogActions,\r\n  CircularProgress,\r\n  TextField\r\n} from '@mui/material';\r\nimport {\r\n  GetApp as DownloadIcon,\r\n  Print as PrintIcon,\r\n  MoreVert as MoreVertIcon,\r\n  Email as EmailIcon,\r\n  CheckCircle as CheckCircleIcon,\r\n} from '@mui/icons-material';\r\nimport { format } from 'date-fns';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { \r\n  getInvoiceById, \r\n  generateInvoicePdf, \r\n  sendInvoiceByEmail,\r\n  markInvoiceAsPaid,\r\n  InvoiceStatus, \r\n  type Invoice\r\n} from '../../../services/api/invoiceService';\r\n\r\ninterface InvoiceDetailProps {\r\n  invoiceId: string;\r\n  onEdit?: () => void;\r\n}\r\n\r\nconst InvoiceDetail: React.FC<InvoiceDetailProps> = ({ invoiceId, onEdit }) => {\r\n  const navigate = useNavigate();\r\n  const [invoice, setInvoice] = useState<Invoice | null>(null);\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState<string | null>(null);\r\n  const [actionMenuAnchor, setActionMenuAnchor] = useState<null | HTMLElement>(null);\r\n  const [emailDialogOpen, setEmailDialogOpen] = useState(false);\r\n  const [paymentDialogOpen, setPaymentDialogOpen] = useState(false);\r\n  const [emailRecipient, setEmailRecipient] = useState('');\r\n  const [emailSubject, setEmailSubject] = useState('');\r\n  const [emailMessage, setEmailMessage] = useState('');\r\n  const [sendingEmail, setSendingEmail] = useState(false);\r\n  const [emailError, setEmailError] = useState<string | null>(null);\r\n  const [paymentAmount, setPaymentAmount] = useState('');\r\n  const [paymentDate, setPaymentDate] = useState(format(new Date(), 'yyyy-MM-dd'));\r\n  const [paymentMethod, setPaymentMethod] = useState('');\r\n  const [paymentNotes, setPaymentNotes] = useState('');\r\n  const [processingPayment, setProcessingPayment] = useState(false);\r\n  const [paymentError, setPaymentError] = useState<string | null>(null);\r\n\r\n  useEffect(() => {\r\n    fetchInvoiceDetails();\r\n  }, [invoiceId]);\r\n\r\n  const fetchInvoiceDetails = async () => {\r\n    setLoading(true);\r\n    setError(null);\r\n    try {\r\n      const response = await getInvoiceById(invoiceId);\r\n      setInvoice(response);\r\n      \r\n      // Pre-fill email fields\r\n      if (response) {\r\n        setEmailRecipient(''); // This should ideally be filled with customer email from the backend\r\n        setEmailSubject(`Invoice ${response.invoiceNumber} from Your Company`);\r\n        setEmailMessage(`Dear Customer,\\n\\nPlease find attached invoice ${response.invoiceNumber} for your recent order.\\n\\nThank you for your business.\\n\\nBest regards,\\nYour Company`);\r\n        \r\n        // Pre-fill payment amount\r\n        if (response.total) {\r\n          setPaymentAmount(response.total.toString());\r\n        }\r\n      }\r\n    } catch (err: any) {\r\n      setError(err.message || 'Failed to fetch invoice details');\r\n      console.error('Error fetching invoice details:', err);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleActionMenuOpen = (event: React.MouseEvent<HTMLElement>) => {\r\n    setActionMenuAnchor(event.currentTarget);\r\n  };\r\n\r\n  const handleActionMenuClose = () => {\r\n    setActionMenuAnchor(null);\r\n  };\r\n\r\n  const handleEmailDialogOpen = () => {\r\n    setEmailDialogOpen(true);\r\n    handleActionMenuClose();\r\n  };\r\n\r\n  const handleEmailDialogClose = () => {\r\n    setEmailDialogOpen(false);\r\n    setEmailError(null);\r\n  };\r\n\r\n  const handlePaymentDialogOpen = () => {\r\n    setPaymentDialogOpen(true);\r\n    handleActionMenuClose();\r\n  };\r\n\r\n  const handlePaymentDialogClose = () => {\r\n    setPaymentDialogOpen(false);\r\n    setPaymentError(null);\r\n  };\r\n\r\n  const handleSendEmail = async () => {\r\n    if (!emailRecipient) {\r\n      setEmailError('Recipient email is required');\r\n      return;\r\n    }\r\n\r\n    setSendingEmail(true);\r\n    setEmailError(null);\r\n\r\n    try {\r\n      await sendInvoiceByEmail(invoiceId, {\r\n        recipientEmail: emailRecipient,\r\n        subject: emailSubject,\r\n        message: emailMessage,\r\n      });\r\n      handleEmailDialogClose();\r\n      // Show success message or notification\r\n    } catch (err: any) {\r\n      setEmailError(err.message || 'Failed to send email');\r\n      console.error('Error sending invoice email:', err);\r\n    } finally {\r\n      setSendingEmail(false);\r\n    }\r\n  };\r\n\r\n  const handleRecordPayment = async () => {\r\n    if (!paymentAmount || !paymentMethod) {\r\n      setPaymentError('Amount and payment method are required');\r\n      return;\r\n    }\r\n\r\n    setProcessingPayment(true);\r\n    setPaymentError(null);\r\n\r\n    try {\r\n      await markInvoiceAsPaid(invoiceId, {\r\n        amount: parseFloat(paymentAmount),\r\n        paymentDate,\r\n        paymentMethod,\r\n        notes: paymentNotes\r\n      });\r\n      handlePaymentDialogClose();\r\n      fetchInvoiceDetails(); // Refresh invoice data\r\n      // Show success message or notification\r\n    } catch (err: any) {\r\n      setPaymentError(err.message || 'Failed to record payment');\r\n      console.error('Error recording payment:', err);\r\n    } finally {\r\n      setProcessingPayment(false);\r\n    }\r\n  };\r\n\r\n  const handleDownloadPdf = async () => {\r\n    try {\r\n      const pdfBlob = await generateInvoicePdf(invoiceId);\r\n      const url = URL.createObjectURL(pdfBlob);\r\n      const link = document.createElement('a');\r\n      link.href = url;\r\n      link.download = `Invoice-${invoice?.invoiceNumber || invoiceId}.pdf`;\r\n      document.body.appendChild(link);\r\n      link.click();\r\n      document.body.removeChild(link);\r\n      URL.revokeObjectURL(url);\r\n    } catch (err: any) {\r\n      console.error('Error downloading PDF:', err);\r\n      // Show error message\r\n    }\r\n  };\r\n\r\n  const handlePrint = async () => {\r\n    try {\r\n      const pdfBlob = await generateInvoicePdf(invoiceId);\r\n      const url = URL.createObjectURL(pdfBlob);\r\n      const iframe = document.createElement('iframe');\r\n      iframe.style.display = 'none';\r\n      iframe.src = url;\r\n      document.body.appendChild(iframe);\r\n      iframe.onload = () => {\r\n        iframe.contentWindow?.print();\r\n      };\r\n      \r\n      // Cleanup after print dialog closes (this is approximate)\r\n      setTimeout(() => {\r\n        document.body.removeChild(iframe);\r\n        URL.revokeObjectURL(url);\r\n      }, 5000);\r\n    } catch (err: any) {\r\n      console.error('Error printing invoice:', err);\r\n      // Show error message\r\n    }\r\n  };\r\n\r\n  const handleEdit = () => {\r\n    if (onEdit) {\r\n      onEdit();\r\n    } else {\r\n      navigate(`/invoices/${invoiceId}/edit`);\r\n    }\r\n    handleActionMenuClose();\r\n  };\r\n\r\n  const handleBack = () => {\r\n    navigate('/invoices');\r\n  };\r\n\r\n  const getStatusChipColor = (status: InvoiceStatus) => {\r\n    switch (status) {\r\n      case InvoiceStatus.PAID:\r\n        return 'success';\r\n      case InvoiceStatus.OVERDUE:\r\n        return 'error';\r\n      case InvoiceStatus.PARTIALLY_PAID:\r\n        return 'info';\r\n      default:\r\n        return 'default';\r\n    }\r\n  };\r\n\r\n  const formatCurrency = (amount: number) => {\r\n    return new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(amount);\r\n  };\r\n\r\n  const formatDate = (dateString?: string) => {\r\n    if (!dateString) return 'N/A';\r\n    return format(new Date(dateString), 'MMMM dd, yyyy');\r\n  };\r\n\r\n  if (loading) {\r\n    return (\r\n      <Box display=\"flex\" justifyContent=\"center\" alignItems=\"center\" minHeight=\"60vh\">\r\n        <CircularProgress />\r\n      </Box>\r\n    );\r\n  }\r\n\r\n  if (error) {\r\n    return (\r\n      <Box textAlign=\"center\" p={3}>\r\n        <Typography color=\"error\" variant=\"h6\">\r\n          {error}\r\n        </Typography>\r\n        <Button onClick={fetchInvoiceDetails} sx={{ mt: 2 }}>\r\n          Retry\r\n        </Button>\r\n      </Box>\r\n    );\r\n  }\r\n\r\n  if (!invoice) {\r\n    return (\r\n      <Box textAlign=\"center\" p={3}>\r\n        <Typography variant=\"h6\">\r\n          Invoice not found\r\n        </Typography>\r\n        <Button onClick={handleBack} sx={{ mt: 2 }}>\r\n          Back to Invoices\r\n        </Button>\r\n      </Box>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Box>\r\n      {/* Sticky Header */}\r\n      <Box position=\"sticky\" top={0} zIndex={10} bgcolor=\"background.paper\" boxShadow={1} mb={3} px={2} py={2} borderRadius={2}>\r\n        <Box display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\">\r\n          <Box display=\"flex\" alignItems=\"center\" gap={2}>\r\n            <Button variant=\"outlined\" onClick={handleBack} sx={{ mr: 2 }}>\r\n              Back\r\n            </Button>\r\n            <Typography variant=\"h5\" component=\"span\">\r\n              Invoice #{invoice.invoiceNumber}\r\n            </Typography>\r\n            <Chip \r\n              label={invoice.status ? invoice.status.replace('_', ' ').toUpperCase() : 'DRAFT'} \r\n              size=\"small\" \r\n              color={getStatusChipColor(invoice.status as InvoiceStatus)}\r\n              sx={{ ml: 2, verticalAlign: 'middle' }}\r\n            />\r\n          </Box>\r\n          <Box display=\"flex\" alignItems=\"center\" gap={1}>\r\n            <Button \r\n              variant=\"outlined\" \r\n              startIcon={<DownloadIcon />}\r\n              onClick={handleDownloadPdf}\r\n            >\r\n              Download\r\n            </Button>\r\n            <Button \r\n              variant=\"outlined\" \r\n              startIcon={<PrintIcon />}\r\n              onClick={handlePrint}\r\n            >\r\n              Print\r\n            </Button>\r\n            <IconButton onClick={handleActionMenuOpen} sx={{ ml: 1 }}>\r\n              <MoreVertIcon />\r\n            </IconButton>\r\n            <Menu\r\n              anchorEl={actionMenuAnchor}\r\n              open={Boolean(actionMenuAnchor)}\r\n              onClose={handleActionMenuClose}\r\n            >\r\n              <MenuItem onClick={handleEdit}>Edit Invoice</MenuItem>\r\n              <MenuItem onClick={handleEmailDialogOpen}>\r\n                <EmailIcon fontSize=\"small\" sx={{ mr: 1 }} />\r\n                Send by Email\r\n              </MenuItem>\r\n              {invoice.status !== InvoiceStatus.PAID && (\r\n                <MenuItem onClick={handlePaymentDialogOpen}>\r\n                  <CheckCircleIcon fontSize=\"small\" sx={{ mr: 1 }} />\r\n                  Record Payment\r\n                </MenuItem>\r\n              )}\r\n            </Menu>\r\n          </Box>\r\n        </Box>\r\n      </Box>\r\n\r\n      <Paper sx={{ p: { xs: 2, md: 4 }, mb: 3, borderRadius: 3, boxShadow: 2 }}>\r\n        <Box sx={{ display: 'flex', flexDirection: 'column', gap: 4 }}>\r\n          {/* Header Info */}\r\n          <Box sx={{ width: '100%', display: 'flex', flexDirection: { xs: 'column', md: 'row' }, gap: 4 }}>\r\n            <Box sx={{ flex: 1, bgcolor: 'grey.50', p: 2, borderRadius: 2 }}>\r\n              <Typography variant=\"subtitle1\" fontWeight={700} gutterBottom sx={{ color: 'primary.main' }}>\r\n                Invoice Information\r\n              </Typography>\r\n              <Box>\r\n                <Typography variant=\"body2\">\r\n                  <strong>Invoice Number:</strong> {invoice.invoiceNumber}\r\n                </Typography>\r\n                <Typography variant=\"body2\">\r\n                  <strong>Issue Date:</strong> {formatDate(invoice.issueDate)}\r\n                </Typography>\r\n                <Typography variant=\"body2\">\r\n                  <strong>Due Date:</strong> {formatDate(invoice.dueDate)}\r\n                </Typography>\r\n                <Typography variant=\"body2\">\r\n                  <strong>Payment Term:</strong> {invoice.paymentTerm.replace('_', ' ')}\r\n                </Typography>\r\n              </Box>\r\n            </Box>\r\n            <Box sx={{ flex: 1, bgcolor: 'grey.50', p: 2, borderRadius: 2 }}>\r\n              <Typography variant=\"subtitle1\" fontWeight={700} gutterBottom sx={{ color: 'primary.main' }}>\r\n                Customer Information\r\n              </Typography>\r\n              <Box>\r\n                <Typography variant=\"body2\">\r\n                  <strong>Customer ID:</strong> {invoice.customerId}\r\n                </Typography>\r\n                <Typography variant=\"body2\">\r\n                  <strong>Billing Address:</strong>\r\n                </Typography>\r\n                <Typography variant=\"body2\" sx={{ whiteSpace: 'pre-wrap' }}>\r\n                  {invoice.billingAddress}\r\n                </Typography>\r\n              </Box>\r\n            </Box>\r\n          </Box>\r\n\r\n          {/* Invoice Items */}\r\n          <Box sx={{ width: '100%' }}>\r\n            <Typography variant=\"subtitle1\" fontWeight={700} gutterBottom sx={{ color: 'primary.main', mb: 1 }}>\r\n              Invoice Items\r\n            </Typography>\r\n            <TableContainer component={Paper} variant=\"outlined\" sx={{ borderRadius: 2, boxShadow: 0 }}>\r\n              <Table>\r\n                <TableHead sx={{ bgcolor: 'grey.100' }}>\r\n                  <TableRow>\r\n                    <TableCell><strong>Description</strong></TableCell>\r\n                    <TableCell align=\"right\"><strong>Quantity</strong></TableCell>\r\n                    <TableCell align=\"right\"><strong>Unit Price</strong></TableCell>\r\n                    <TableCell align=\"right\"><strong>Discount</strong></TableCell>\r\n                    <TableCell align=\"right\"><strong>Tax</strong></TableCell>\r\n                    <TableCell align=\"right\"><strong>Total</strong></TableCell>\r\n                  </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n                  {invoice.items.map((item, index) => {\r\n                    const itemTotal = item.quantity * item.unitPrice;\r\n                    const discountAmount = item.discount || 0;\r\n                    const taxAmount = item.tax || 0;\r\n                    const lineTotal = itemTotal - discountAmount + taxAmount;\r\n                    return (\r\n                      <TableRow key={index} hover sx={{ transition: 'background 0.2s', cursor: 'pointer' }}>\r\n                        <TableCell>{item.description || `Product ID: ${item.productId}`}</TableCell>\r\n                        <TableCell align=\"right\">{item.quantity}</TableCell>\r\n                        <TableCell align=\"right\">{formatCurrency(item.unitPrice)}</TableCell>\r\n                        <TableCell align=\"right\">{item.discount ? formatCurrency(item.discount) : '-'}</TableCell>\r\n                        <TableCell align=\"right\">{item.tax ? formatCurrency(item.tax) : '-'}</TableCell>\r\n                        <TableCell align=\"right\">{formatCurrency(lineTotal)}</TableCell>\r\n                      </TableRow>\r\n                    );\r\n                  })}\r\n                </TableBody>\r\n              </Table>\r\n            </TableContainer>\r\n          </Box>\r\n\r\n          {/* Totals */}\r\n          <Box sx={{ width: '100%' }}>\r\n            <Box sx={{ display: 'flex', justifyContent: 'flex-end', mt: 2 }}>\r\n              <Box sx={{ width: { xs: '100%', sm: '320px' }, bgcolor: 'grey.100', p: 2, borderRadius: 2, boxShadow: 0 }}>\r\n                <Stack spacing={1}>\r\n                  <Box display=\"flex\" justifyContent=\"space-between\">\r\n                    <Typography variant=\"body2\">Subtotal:</Typography>\r\n                    <Typography variant=\"body2\">{formatCurrency(invoice.subtotal || 0)}</Typography>\r\n                  </Box>\r\n                  <Box display=\"flex\" justifyContent=\"space-between\">\r\n                    <Typography variant=\"body2\">Discount:</Typography>\r\n                    <Typography variant=\"body2\">{formatCurrency(invoice.discountTotal || 0)}</Typography>\r\n                  </Box>\r\n                  <Box display=\"flex\" justifyContent=\"space-between\">\r\n                    <Typography variant=\"body2\">Tax:</Typography>\r\n                    <Typography variant=\"body2\">{formatCurrency(invoice.taxTotal || 0)}</Typography>\r\n                  </Box>\r\n                  <Divider />\r\n                  <Box display=\"flex\" justifyContent=\"space-between\">\r\n                    <Typography variant=\"subtitle1\" fontWeight={700}><strong>Total:</strong></Typography>\r\n                    <Typography variant=\"subtitle1\" fontWeight={700}><strong>{formatCurrency(invoice.total || 0)}</strong></Typography>\r\n                  </Box>\r\n                </Stack>\r\n              </Box>\r\n            </Box>\r\n          </Box>\r\n\r\n          {/* Notes */}\r\n          {invoice.notes && (\r\n            <Box sx={{ width: '100%' }}>\r\n              <Typography variant=\"subtitle1\" fontWeight={700} gutterBottom sx={{ color: 'primary.main' }}>\r\n                Notes\r\n              </Typography>\r\n              <Paper variant=\"outlined\" sx={{ p: 2, bgcolor: 'grey.50', borderRadius: 2 }}>\r\n                <Typography variant=\"body2\" sx={{ whiteSpace: 'pre-wrap' }}>\r\n                  {invoice.notes}\r\n                </Typography>\r\n              </Paper>\r\n            </Box>\r\n          )}\r\n        </Box>\r\n      </Paper>\r\n\r\n      {/* Email Dialog */}\r\n      <Dialog open={emailDialogOpen} onClose={handleEmailDialogClose} maxWidth=\"md\" fullWidth>\r\n        <DialogTitle>Send Invoice by Email</DialogTitle>\r\n        <DialogContent>\r\n          <Box sx={{ display: 'flex', flexDirection: 'column', gap: 2, mt: 1 }}>\r\n            <Typography variant=\"body2\" gutterBottom>\r\n              Send invoice #{invoice.invoiceNumber} to the customer via email.\r\n            </Typography>\r\n            <TextField\r\n              label=\"Recipient Email\"\r\n              value={emailRecipient}\r\n              onChange={(e) => setEmailRecipient(e.target.value)}\r\n              fullWidth\r\n              required\r\n              error={!emailRecipient && !!emailError}\r\n              helperText={!emailRecipient && emailError ? 'Recipient email is required' : ''}\r\n              sx={{ mb: 1 }}\r\n            />\r\n            <TextField\r\n              label=\"Email Subject\"\r\n              value={emailSubject}\r\n              onChange={(e) => setEmailSubject(e.target.value)}\r\n              fullWidth\r\n              sx={{ mb: 1 }}\r\n            />\r\n            <TextField\r\n              label=\"Email Message\"\r\n              value={emailMessage}\r\n              onChange={(e) => setEmailMessage(e.target.value)}\r\n              multiline\r\n              rows={6}\r\n              fullWidth\r\n              sx={{ mb: 1 }}\r\n            />\r\n            {emailError && (\r\n              <Typography color=\"error\">{emailError}</Typography>\r\n            )}\r\n          </Box>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={handleEmailDialogClose} disabled={sendingEmail}>\r\n            Cancel\r\n          </Button>\r\n          <Button\r\n            onClick={handleSendEmail}\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            disabled={sendingEmail}\r\n            startIcon={sendingEmail ? <CircularProgress size={20} /> : <EmailIcon />}\r\n          >\r\n            {sendingEmail ? 'Sending...' : 'Send'}\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n\r\n      {/* Payment Dialog */}\r\n      <Dialog open={paymentDialogOpen} onClose={handlePaymentDialogClose} maxWidth=\"sm\" fullWidth>\r\n        <DialogTitle>Record Payment</DialogTitle>\r\n        <DialogContent>\r\n          <Box sx={{ display: 'flex', flexDirection: 'column', gap: 2, mt: 1 }}>\r\n            <Typography variant=\"body2\" gutterBottom>\r\n              Record a payment for invoice #{invoice.invoiceNumber}\r\n            </Typography>\r\n            <Box sx={{ display: 'flex', flexDirection: { xs: 'column', md: 'row' }, gap: 2 }}>\r\n              <Box sx={{ flex: 1 }}>\r\n                <TextField\r\n                  label=\"Amount\"\r\n                  type=\"number\"\r\n                  value={paymentAmount}\r\n                  onChange={(e) => setPaymentAmount(e.target.value)}\r\n                  fullWidth\r\n                  required\r\n                  InputProps={{\r\n                    startAdornment: <Box component=\"span\" sx={{ mr: 1 }}>$</Box>\r\n                  }}\r\n                  error={!paymentAmount && !!paymentError}\r\n                  sx={{ mb: 1 }}\r\n                />\r\n              </Box>\r\n              <Box sx={{ flex: 1 }}>\r\n                <TextField\r\n                  label=\"Payment Date\"\r\n                  type=\"date\"\r\n                  value={paymentDate}\r\n                  onChange={(e) => setPaymentDate(e.target.value)}\r\n                  fullWidth\r\n                  InputLabelProps={{ shrink: true }}\r\n                  sx={{ mb: 1 }}\r\n                />\r\n              </Box>\r\n            </Box>\r\n            <TextField\r\n              label=\"Payment Method\"\r\n              value={paymentMethod}\r\n              onChange={(e) => setPaymentMethod(e.target.value)}\r\n              fullWidth\r\n              required\r\n              select\r\n              error={!paymentMethod && !!paymentError}\r\n              sx={{ mb: 1 }}\r\n            >\r\n              <MenuItem value=\"cash\">Cash</MenuItem>\r\n              <MenuItem value=\"check\">Check</MenuItem>\r\n              <MenuItem value=\"credit_card\">Credit Card</MenuItem>\r\n              <MenuItem value=\"bank_transfer\">Bank Transfer</MenuItem>\r\n              <MenuItem value=\"paypal\">PayPal</MenuItem>\r\n              <MenuItem value=\"other\">Other</MenuItem>\r\n            </TextField>\r\n            <TextField\r\n              label=\"Notes\"\r\n              value={paymentNotes}\r\n              onChange={(e) => setPaymentNotes(e.target.value)}\r\n              fullWidth\r\n              multiline\r\n              rows={3}\r\n              sx={{ mb: 1 }}\r\n            />\r\n            {paymentError && (\r\n              <Typography color=\"error\">{paymentError}</Typography>\r\n            )}\r\n          </Box>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={handlePaymentDialogClose} disabled={processingPayment}>\r\n            Cancel\r\n          </Button>\r\n          <Button\r\n            onClick={handleRecordPayment}\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            disabled={processingPayment}\r\n            startIcon={processingPayment ? <CircularProgress size={20} /> : <CheckCircleIcon />}\r\n          >\r\n            {processingPayment ? 'Processing...' : 'Record Payment'}\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default InvoiceDetail;\r\n","usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"d:\\All python project\\Tubex\\Frontend\\app\\src\\components\\whitelabel\\invoices\\InvoiceForm.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'SaveIcon' is defined but never used. Allowed unused vars must match /^_/u.","line":33,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":33,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'InvoiceStatus' is defined but never used. Allowed unused vars must match /^_/u.","line":43,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":43,"endColumn":16},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'calculateTotals'. Either include it or remove the dependency array.","line":108,"column":6,"nodeType":"ArrayExpression","endLine":108,"endColumn":21,"suggestions":[{"desc":"Update the dependencies array to be: [calculateTotals, invoice.items]","fix":{"range":[2520,2535],"text":"[calculateTotals, invoice.items]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\r\nimport {\r\n  Box,\r\n  Typography,\r\n  TextField,\r\n  Button,\r\n  Paper,\r\n  FormControl,\r\n  InputLabel,\r\n  Select,\r\n  MenuItem,\r\n  IconButton,\r\n  Divider,\r\n  Autocomplete,\r\n  InputAdornment,\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableContainer,\r\n  TableHead,\r\n  TableRow,\r\n  Dialog,\r\n  DialogTitle,\r\n  DialogContent,\r\n  DialogActions,\r\n  FormHelperText,\r\n  CircularProgress,\r\n} from '@mui/material';\r\nimport {\r\n  Add as AddIcon,\r\n  Delete as DeleteIcon,\r\n  CalendarToday as CalendarIcon,\r\n  Save as SaveIcon,\r\n} from '@mui/icons-material';\r\nimport { format } from 'date-fns';\r\nimport FormContainer from '../FormContainer';\r\nimport FormButtons from '../FormButtons';\r\nimport {\r\n  createInvoice,\r\n  updateInvoice,\r\n  getInvoiceById,\r\n  PaymentTerm,\r\n  InvoiceStatus,\r\n  type Invoice,\r\n  type InvoiceItem,\r\n  type CreateInvoiceRequest\r\n} from '../../../services/api/invoiceService';\r\nimport { productService } from '../../../services/api';\r\n\r\ninterface InvoiceFormProps {\r\n  invoiceId?: string;\r\n  onSave?: (invoice: Invoice) => void;\r\n  onCancel?: () => void;\r\n}\r\n\r\ninterface Customer {\r\n  id: string;\r\n  name: string;\r\n  email?: string;\r\n  billingAddress?: string;\r\n}\r\n\r\ninterface ProductOption {\r\n  id: string;\r\n  name: string;\r\n  price: number;\r\n  description?: string;\r\n}\r\n\r\nconst InvoiceForm: React.FC<InvoiceFormProps> = ({\r\n  invoiceId,\r\n  onSave,\r\n  onCancel,\r\n}) => {\r\n  const isEditMode = !!invoiceId;\r\n\r\n  const [invoice, setInvoice] = useState<Partial<Invoice>>({\r\n    items: [],\r\n    paymentTerm: PaymentTerm.DAYS_30,\r\n    billingAddress: '',\r\n    issueDate: format(new Date(), 'yyyy-MM-dd'),\r\n  });\r\n\r\n  const [customers, setCustomers] = useState<Customer[]>([]);\r\n  const [products, setProducts] = useState<ProductOption[]>([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [fetchLoading, setFetchLoading] = useState(false);\r\n  const [errors, setErrors] = useState<Record<string, string>>({});\r\n  const [isCalculating, setIsCalculating] = useState(false);\r\n  const [isDirty, setIsDirty] = useState(false);\r\n  const [showConfirmDialog, setShowConfirmDialog] = useState(false);\r\n\r\n  // Fetch data on component mount\r\n  useEffect(() => {\r\n    fetchData();\r\n  }, []);\r\n\r\n  // Fetch invoice details if in edit mode\r\n  useEffect(() => {\r\n    if (isEditMode && invoiceId) {\r\n      fetchInvoiceDetails(invoiceId);\r\n    }\r\n  }, [invoiceId, isEditMode]);\r\n\r\n  // Calculate totals whenever items change\r\n  useEffect(() => {\r\n    calculateTotals();\r\n  }, [invoice.items]);\r\n\r\n  const fetchData = async () => {\r\n    setFetchLoading(true);\r\n    try {\r\n      // Fetch customers\r\n      // This is a placeholder - replace with actual API call\r\n      // const customersResponse = await customerService.getCustomers();\r\n      // setCustomers(customersResponse.data);\r\n      \r\n      // Mock customers for now\r\n      setCustomers([\r\n        { id: 'cust1', name: 'Acme Corp', email: 'billing@acmecorp.com', billingAddress: '123 Main St\\nNew York, NY 10001\\nUSA' },\r\n        { id: 'cust2', name: 'Globex Industries', email: 'accounts@globex.com', billingAddress: '456 Business Ave\\nChicago, IL 60601\\nUSA' },\r\n        { id: 'cust3', name: 'Umbrella Corporation', email: 'finance@umbrella.com', billingAddress: '789 Corporate Blvd\\nLos Angeles, CA 90001\\nUSA' },\r\n      ]);\r\n\r\n      // Fetch products\r\n      const productsResponse = await productService.getProducts();\r\n      const productOptions = productsResponse.data.map((product: any) => ({\r\n        id: product.id,\r\n        name: product.name,\r\n        price: product.base_price || 0,\r\n        description: product.description || '',\r\n      }));\r\n      setProducts(productOptions);\r\n    } catch (error) {\r\n      console.error('Error fetching data:', error);\r\n    } finally {\r\n      setFetchLoading(false);\r\n    }\r\n  };\r\n\r\n  const fetchInvoiceDetails = async (id: string) => {\r\n    setFetchLoading(true);\r\n    try {\r\n      const response = await getInvoiceById(id);\r\n      setInvoice(response);\r\n    } catch (error) {\r\n      console.error('Error fetching invoice:', error);\r\n    } finally {\r\n      setFetchLoading(false);\r\n    }\r\n  };\r\n\r\n  const calculateTotals = () => {\r\n    if (!invoice.items || invoice.items.length === 0) {\r\n      setInvoice(prev => ({\r\n        ...prev,\r\n        subtotal: 0,\r\n        discountTotal: 0,\r\n        taxTotal: 0,\r\n        total: 0,\r\n      }));\r\n      return;\r\n    }\r\n\r\n    setIsCalculating(true);\r\n    \r\n    let subtotal = 0;\r\n    let discountTotal = 0;\r\n    let taxTotal = 0;\r\n\r\n    invoice.items.forEach(item => {\r\n      const lineTotal = item.quantity * item.unitPrice;\r\n      subtotal += lineTotal;\r\n      \r\n      if (item.discount) {\r\n        discountTotal += item.discount;\r\n      }\r\n      \r\n      if (item.tax) {\r\n        taxTotal += item.tax;\r\n      }\r\n    });\r\n\r\n    const total = subtotal - discountTotal + taxTotal;\r\n\r\n    setInvoice(prev => ({\r\n      ...prev,\r\n      subtotal: parseFloat(subtotal.toFixed(2)),\r\n      discountTotal: parseFloat(discountTotal.toFixed(2)),\r\n      taxTotal: parseFloat(taxTotal.toFixed(2)),\r\n      total: parseFloat(total.toFixed(2)),\r\n    }));\r\n\r\n    setIsCalculating(false);\r\n  };\r\n\r\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement | { name?: string; value: unknown }>) => {\r\n    const { name, value } = e.target;\r\n    if (!name) return;\r\n\r\n    setInvoice(prev => ({\r\n      ...prev,\r\n      [name]: value\r\n    }));\r\n\r\n    // Clear error for the field\r\n    if (errors[name]) {\r\n      setErrors(prev => {\r\n        const newErrors = { ...prev };\r\n        delete newErrors[name];\r\n        return newErrors;\r\n      });\r\n    }\r\n\r\n    setIsDirty(true);\r\n  };\r\n\r\n  const handleSelectChange = (name: string, value: unknown) => {\r\n    setInvoice(prev => ({\r\n      ...prev,\r\n      [name]: value\r\n    }));\r\n\r\n    // Clear error for the field\r\n    if (errors[name]) {\r\n      setErrors(prev => {\r\n        const newErrors = { ...prev };\r\n        delete newErrors[name];\r\n        return newErrors;\r\n      });\r\n    }\r\n\r\n    setIsDirty(true);\r\n  };\r\n\r\n  const handleCustomerSelect = (customer: Customer | null) => {\r\n    if (customer) {\r\n      setInvoice(prev => ({\r\n        ...prev,\r\n        customerId: customer.id,\r\n        billingAddress: customer.billingAddress || ''\r\n      }));\r\n\r\n      // Clear errors\r\n      if (errors.customerId || errors.billingAddress) {\r\n        setErrors(prev => {\r\n          const newErrors = { ...prev };\r\n          delete newErrors.customerId;\r\n          delete newErrors.billingAddress;\r\n          return newErrors;\r\n        });\r\n      }\r\n    } else {\r\n      setInvoice(prev => ({\r\n        ...prev,\r\n        customerId: '',\r\n        billingAddress: ''\r\n      }));\r\n    }\r\n\r\n    setIsDirty(true);\r\n  };\r\n\r\n  const handleAddItem = () => {\r\n    setInvoice(prev => ({\r\n      ...prev,\r\n      items: [\r\n        ...(prev.items || []),\r\n        {\r\n          productId: '',\r\n          description: '',\r\n          quantity: 1,\r\n          unitPrice: 0,\r\n        }\r\n      ]\r\n    }));\r\n\r\n    setIsDirty(true);\r\n  };\r\n\r\n  const handleRemoveItem = (index: number) => {\r\n    setInvoice(prev => ({\r\n      ...prev,\r\n      items: prev.items?.filter((_, i) => i !== index) || []\r\n    }));\r\n\r\n    setIsDirty(true);\r\n  };\r\n\r\n  const handleItemChange = (index: number, field: keyof InvoiceItem, value: any) => {\r\n    setInvoice(prev => {\r\n      const updatedItems = [...(prev.items || [])];\r\n      if (updatedItems[index]) {\r\n        updatedItems[index] = {\r\n          ...updatedItems[index],\r\n          [field]: value\r\n        };\r\n      }\r\n      return {\r\n        ...prev,\r\n        items: updatedItems\r\n      };\r\n    });\r\n\r\n    // Clear item error\r\n    const errorKey = `items[${index}].${field}`;\r\n    if (errors[errorKey]) {\r\n      setErrors(prev => {\r\n        const newErrors = { ...prev };\r\n        delete newErrors[errorKey];\r\n        return newErrors;\r\n      });\r\n    }\r\n\r\n    setIsDirty(true);\r\n  };\r\n\r\n  const handleProductSelect = (index: number, product: ProductOption | null) => {\r\n    if (product) {\r\n      setInvoice(prev => {\r\n        const updatedItems = [...(prev.items || [])];\r\n        if (updatedItems[index]) {\r\n          updatedItems[index] = {\r\n            ...updatedItems[index],\r\n            productId: product.id,\r\n            description: product.description || product.name,\r\n            unitPrice: product.price\r\n          };\r\n        }\r\n        return {\r\n          ...prev,\r\n          items: updatedItems\r\n        };\r\n      });\r\n    }\r\n\r\n    setIsDirty(true);\r\n  };\r\n\r\n  const validateForm = (): boolean => {\r\n    const newErrors: Record<string, string> = {};\r\n\r\n    // Validate required fields\r\n    if (!invoice.customerId) {\r\n      newErrors.customerId = 'Customer is required';\r\n    }\r\n\r\n    if (!invoice.billingAddress || invoice.billingAddress.trim() === '') {\r\n      newErrors.billingAddress = 'Billing address is required';\r\n    }\r\n\r\n    if (!invoice.paymentTerm) {\r\n      newErrors.paymentTerm = 'Payment term is required';\r\n    }\r\n\r\n    // Validate items\r\n    if (!invoice.items || invoice.items.length === 0) {\r\n      newErrors.items = 'At least one item is required';\r\n    } else {\r\n      invoice.items.forEach((item, index) => {\r\n        if (!item.productId) {\r\n          newErrors[`items[${index}].productId`] = 'Product is required';\r\n        }\r\n        if (item.quantity <= 0) {\r\n          newErrors[`items[${index}].quantity`] = 'Quantity must be greater than 0';\r\n        }\r\n        if (item.unitPrice < 0) {\r\n          newErrors[`items[${index}].unitPrice`] = 'Unit price cannot be negative';\r\n        }\r\n      });\r\n    }\r\n\r\n    setErrors(newErrors);\r\n    return Object.keys(newErrors).length === 0;\r\n  };\r\n\r\n  const handleSubmit = async () => {\r\n    if (!validateForm()) return;\r\n\r\n    setLoading(true);\r\n    try {\r\n      let savedInvoice;\r\n      \r\n      if (isEditMode && invoiceId) {\r\n        // Update existing invoice\r\n        const updateData: Partial<Invoice> = {\r\n          customerId: invoice.customerId!,\r\n          items: invoice.items!,\r\n          paymentTerm: invoice.paymentTerm!,\r\n          billingAddress: invoice.billingAddress!,\r\n          notes: invoice.notes,\r\n          issueDate: invoice.issueDate,\r\n        };\r\n        \r\n        const response = await updateInvoice(invoiceId, updateData);\r\n        savedInvoice = response;\r\n      } else {\r\n        // Create new invoice\r\n        const newInvoice: CreateInvoiceRequest = {\r\n          customerId: invoice.customerId!,\r\n          items: invoice.items!,\r\n          paymentTerm: invoice.paymentTerm!,\r\n          billingAddress: invoice.billingAddress!,\r\n          notes: invoice.notes,\r\n          issueDate: invoice.issueDate,\r\n        };\r\n        \r\n        const response = await createInvoice(newInvoice);\r\n        savedInvoice = response;\r\n      }\r\n\r\n      if (onSave) {\r\n        onSave(savedInvoice);\r\n      }\r\n      setIsDirty(false);\r\n    } catch (error) {\r\n      console.error('Error saving invoice:', error);\r\n      // Handle error, show notification, etc.\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleCancel = () => {\r\n    if (isDirty) {\r\n      setShowConfirmDialog(true);\r\n    } else if (onCancel) {\r\n      onCancel();\r\n    }\r\n  };\r\n\r\n  const handleConfirmCancel = () => {\r\n    setShowConfirmDialog(false);\r\n    if (onCancel) {\r\n      onCancel();\r\n    }\r\n  };\r\n\r\n  const handleCloseConfirmDialog = () => {\r\n    setShowConfirmDialog(false);\r\n  };\r\n\r\n  const formatCurrency = (amount: number) => {\r\n    return new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(amount);\r\n  };\r\n\r\n  // Find current customer\r\n  const currentCustomer = customers.find(c => c.id === invoice.customerId);\r\n\r\n  if (fetchLoading) {\r\n    return (\r\n      <Box display=\"flex\" justifyContent=\"center\" alignItems=\"center\" minHeight=\"60vh\">\r\n        <CircularProgress />\r\n      </Box>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <FormContainer title={isEditMode ? 'Edit Invoice' : 'Create Invoice'} maxWidth=\"md\">\r\n      <Paper sx={{ p: 3, mb: 3 }}>\r\n        <Box sx={{ display: 'flex', flexDirection: 'column', gap: 3 }}>\r\n          {/* Customer Information and Invoice Details Row */}\r\n          <Box sx={{ display: 'flex', flexDirection: { xs: 'column', md: 'row' }, gap: 3 }}>\r\n            {/* Customer Selection */}\r\n            <Box sx={{ flex: 1 }}>\r\n              <Typography variant=\"subtitle1\" gutterBottom>\r\n                Customer Information\r\n              </Typography>\r\n              <Autocomplete\r\n                options={customers}\r\n                getOptionLabel={(option) => option.name}\r\n                value={currentCustomer || null}\r\n                onChange={(_, newValue) => handleCustomerSelect(newValue)}\r\n                renderInput={(params) => (\r\n                  <TextField\r\n                    {...params}\r\n                    label=\"Customer\"\r\n                    required\r\n                    error={!!errors.customerId}\r\n                    helperText={errors.customerId}\r\n                  />\r\n                )}\r\n                fullWidth\r\n              />\r\n            </Box>\r\n\r\n            {/* Invoice Details */}\r\n            <Box sx={{ flex: 1 }}>\r\n              <Typography variant=\"subtitle1\" gutterBottom>\r\n                Invoice Details\r\n              </Typography>\r\n              <Box sx={{ display: 'flex', gap: 2, flexDirection: { xs: 'column', md: 'row' } }}>\r\n                <Box sx={{ flex: 1 }}>\r\n                  <TextField\r\n                    label=\"Issue Date\"\r\n                    name=\"issueDate\"\r\n                    type=\"date\"\r\n                    value={invoice.issueDate || format(new Date(), 'yyyy-MM-dd')}\r\n                    onChange={handleChange}\r\n                    fullWidth\r\n                    InputLabelProps={{ shrink: true }}\r\n                    InputProps={{\r\n                      startAdornment: (\r\n                        <InputAdornment position=\"start\">\r\n                          <CalendarIcon />\r\n                        </InputAdornment>\r\n                      ),\r\n                    }}\r\n                  />\r\n                </Box>\r\n                <Box sx={{ flex: 1 }}>\r\n                  <FormControl fullWidth required error={!!errors.paymentTerm}>\r\n                    <InputLabel>Payment Terms</InputLabel>\r\n                    <Select\r\n                      name=\"paymentTerm\"\r\n                      value={invoice.paymentTerm || PaymentTerm.DAYS_30}\r\n                      onChange={(e) => handleSelectChange('paymentTerm', e.target.value)}\r\n                      label=\"Payment Terms\"\r\n                    >\r\n                      <MenuItem value={PaymentTerm.IMMEDIATE}>Immediate</MenuItem>\r\n                      <MenuItem value={PaymentTerm.DAYS_7}>Net 7 Days</MenuItem>\r\n                      <MenuItem value={PaymentTerm.DAYS_15}>Net 15 Days</MenuItem>\r\n                      <MenuItem value={PaymentTerm.DAYS_30}>Net 30 Days</MenuItem>\r\n                      <MenuItem value={PaymentTerm.DAYS_45}>Net 45 Days</MenuItem>\r\n                      <MenuItem value={PaymentTerm.DAYS_60}>Net 60 Days</MenuItem>\r\n                      <MenuItem value={PaymentTerm.DAYS_90}>Net 90 Days</MenuItem>\r\n                    </Select>\r\n                    {errors.paymentTerm && <FormHelperText>{errors.paymentTerm}</FormHelperText>}\r\n                  </FormControl>\r\n                </Box>\r\n              </Box>\r\n            </Box>\r\n          </Box>\r\n\r\n          {/* Billing Address */}\r\n          <Box>\r\n            <Typography variant=\"subtitle1\" gutterBottom>\r\n              Billing Address\r\n            </Typography>\r\n            <TextField\r\n              name=\"billingAddress\"\r\n              label=\"Billing Address\"\r\n              value={invoice.billingAddress || ''}\r\n              onChange={handleChange}\r\n              multiline\r\n              rows={3}\r\n              fullWidth\r\n              required\r\n              error={!!errors.billingAddress}\r\n              helperText={errors.billingAddress}\r\n            />\r\n          </Box>\r\n\r\n          {/* Invoice Items */}\r\n          <Box>\r\n            <Box display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\" mb={2}>\r\n              <Typography variant=\"subtitle1\">\r\n                Invoice Items\r\n              </Typography>\r\n              <Button\r\n                variant=\"outlined\"\r\n                startIcon={<AddIcon />}\r\n                onClick={handleAddItem}\r\n              >\r\n                Add Item\r\n              </Button>\r\n            </Box>\r\n\r\n            {errors.items && (\r\n              <Typography color=\"error\" variant=\"body2\" sx={{ mb: 2 }}>\r\n                {errors.items}\r\n              </Typography>\r\n            )}\r\n\r\n            <TableContainer component={Paper} variant=\"outlined\">\r\n              <Table>\r\n                <TableHead>\r\n                  <TableRow>\r\n                    <TableCell width=\"35%\">Product</TableCell>\r\n                    <TableCell>Description</TableCell>\r\n                    <TableCell align=\"right\" width=\"10%\">Quantity</TableCell>\r\n                    <TableCell align=\"right\" width=\"15%\">Unit Price</TableCell>\r\n                    <TableCell align=\"right\" width=\"15%\">Amount</TableCell>\r\n                    <TableCell align=\"center\" width=\"5%\">Actions</TableCell>\r\n                  </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n                  {(invoice.items || []).map((item, index) => {\r\n                    const lineTotal = item.quantity * item.unitPrice;\r\n                    const hasProductError = !!errors[`items[${index}].productId`];\r\n                    const hasQuantityError = !!errors[`items[${index}].quantity`];\r\n                    const hasPriceError = !!errors[`items[${index}].unitPrice`];\r\n                    \r\n                    return (\r\n                      <TableRow key={index}>\r\n                        <TableCell>\r\n                          <Autocomplete\r\n                            options={products}\r\n                            getOptionLabel={(option) => option.name}\r\n                            value={products.find(p => p.id === item.productId) || null}\r\n                            onChange={(_, newValue) => handleProductSelect(index, newValue)}\r\n                            renderInput={(params) => (\r\n                              <TextField\r\n                                {...params}\r\n                                label=\"Product\"\r\n                                variant=\"outlined\"\r\n                                size=\"small\"\r\n                                required\r\n                                error={hasProductError}\r\n                                helperText={hasProductError ? errors[`items[${index}].productId`] : ''}\r\n                              />\r\n                            )}\r\n                            fullWidth\r\n                          />\r\n                        </TableCell>\r\n                        <TableCell>\r\n                          <TextField\r\n                            value={item.description || ''}\r\n                            onChange={(e) => handleItemChange(index, 'description', e.target.value)}\r\n                            variant=\"outlined\"\r\n                            size=\"small\"\r\n                            fullWidth\r\n                            placeholder=\"Description\"\r\n                          />\r\n                        </TableCell>\r\n                        <TableCell align=\"right\">\r\n                          <TextField\r\n                            type=\"number\"\r\n                            value={item.quantity}\r\n                            onChange={(e) => handleItemChange(index, 'quantity', parseInt(e.target.value) || 0)}\r\n                            variant=\"outlined\"\r\n                            size=\"small\"\r\n                            inputProps={{ min: 1, style: { textAlign: 'right' } }}\r\n                            error={hasQuantityError}\r\n                            helperText={hasQuantityError ? errors[`items[${index}].quantity`] : ''}\r\n                          />\r\n                        </TableCell>\r\n                        <TableCell align=\"right\">\r\n                          <TextField\r\n                            type=\"number\"\r\n                            value={item.unitPrice}\r\n                            onChange={(e) => handleItemChange(index, 'unitPrice', parseFloat(e.target.value) || 0)}\r\n                            variant=\"outlined\"\r\n                            size=\"small\"\r\n                            InputProps={{\r\n                              startAdornment: <InputAdornment position=\"start\">$</InputAdornment>,\r\n                              inputProps: { min: 0, step: 0.01, style: { textAlign: 'right' } }\r\n                            }}\r\n                            error={hasPriceError}\r\n                            helperText={hasPriceError ? errors[`items[${index}].unitPrice`] : ''}\r\n                          />\r\n                        </TableCell>\r\n                        <TableCell align=\"right\">\r\n                          {formatCurrency(lineTotal)}\r\n                        </TableCell>\r\n                        <TableCell align=\"center\">\r\n                          <IconButton color=\"error\" onClick={() => handleRemoveItem(index)}>\r\n                            <DeleteIcon />\r\n                          </IconButton>\r\n                        </TableCell>\r\n                      </TableRow>\r\n                    );\r\n                  })}\r\n\r\n                  {(!invoice.items || invoice.items.length === 0) && (\r\n                    <TableRow>\r\n                      <TableCell colSpan={6} align=\"center\" sx={{ py: 3 }}>\r\n                        <Typography color=\"textSecondary\">\r\n                          No items added yet. Click \"Add Item\" to add products to the invoice.\r\n                        </Typography>\r\n                      </TableCell>\r\n                    </TableRow>\r\n                  )}\r\n                </TableBody>\r\n              </Table>\r\n            </TableContainer>\r\n          </Box>\r\n\r\n          {/* Totals */}\r\n          <Box>\r\n            <Box display=\"flex\" justifyContent=\"flex-end\" mt={2}>\r\n              <Box width=\"300px\">\r\n                <Box sx={{ display: 'flex', flexDirection: 'column', gap: 1 }}>\r\n                  <Box sx={{ display: 'flex', justifyContent: 'space-between' }}>\r\n                    <Typography variant=\"body2\">Subtotal:</Typography>\r\n                    <Typography variant=\"body2\">\r\n                      {isCalculating ? '...' : formatCurrency(invoice.subtotal || 0)}\r\n                    </Typography>\r\n                  </Box>\r\n                  \r\n                  <Box sx={{ display: 'flex', justifyContent: 'space-between' }}>\r\n                    <Typography variant=\"body2\">Discount:</Typography>\r\n                    <Typography variant=\"body2\">\r\n                      {isCalculating ? '...' : formatCurrency(invoice.discountTotal || 0)}\r\n                    </Typography>\r\n                  </Box>\r\n                  \r\n                  <Box sx={{ display: 'flex', justifyContent: 'space-between' }}>\r\n                    <Typography variant=\"body2\">Tax:</Typography>\r\n                    <Typography variant=\"body2\">\r\n                      {isCalculating ? '...' : formatCurrency(invoice.taxTotal || 0)}\r\n                    </Typography>\r\n                  </Box>\r\n                  \r\n                  <Box sx={{ width: '100%' }}>\r\n                    <Divider sx={{ my: 1 }} />\r\n                  </Box>\r\n                  \r\n                  <Box sx={{ display: 'flex', justifyContent: 'space-between' }}>\r\n                    <Typography variant=\"subtitle1\"><strong>Total:</strong></Typography>\r\n                    <Typography variant=\"subtitle1\">\r\n                      <strong>{isCalculating ? '...' : formatCurrency(invoice.total || 0)}</strong>\r\n                    </Typography>\r\n                  </Box>\r\n                </Box>\r\n              </Box>\r\n            </Box>\r\n          </Box>\r\n\r\n          {/* Notes */}\r\n          <Box>\r\n            <Typography variant=\"subtitle1\" gutterBottom>\r\n              Notes\r\n            </Typography>\r\n            <TextField\r\n              name=\"notes\"\r\n              value={invoice.notes || ''}\r\n              onChange={handleChange}\r\n              multiline\r\n              rows={3}\r\n              fullWidth\r\n              placeholder=\"Add any notes or payment instructions here\"\r\n            />\r\n          </Box>\r\n        </Box>\r\n      </Paper>      <FormButtons\r\n        onCancel={handleCancel}\r\n        onSubmit={handleSubmit}\r\n        loading={loading}\r\n        submitText={isEditMode ? 'Update Invoice' : 'Create Invoice'}\r\n      />\r\n\r\n      <Dialog open={showConfirmDialog} onClose={handleCloseConfirmDialog}>\r\n        <DialogTitle>Discard Changes?</DialogTitle>\r\n        <DialogContent>\r\n          <Typography>\r\n            You have unsaved changes. Are you sure you want to discard them?\r\n          </Typography>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={handleCloseConfirmDialog}>Cancel</Button>\r\n          <Button onClick={handleConfirmCancel} color=\"error\">\r\n            Discard Changes\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </FormContainer>\r\n  );\r\n};\r\n\r\nexport default InvoiceForm;\r\n","usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"d:\\All python project\\Tubex\\Frontend\\app\\src\\components\\whitelabel\\invoices\\InvoiceList.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'AddIcon' is defined but never used. Allowed unused vars must match /^_/u.","line":19,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":19,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'DownloadIcon' is defined but never used. Allowed unused vars must match /^_/u.","line":22,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":22,"endColumn":25},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'CalendarIcon' is defined but never used. Allowed unused vars must match /^_/u.","line":23,"column":20,"nodeType":"Identifier","messageId":"unusedVar","endLine":23,"endColumn":32},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'PaymentTerm' is defined but never used. Allowed unused vars must match /^_/u.","line":29,"column":38,"nodeType":"Identifier","messageId":"unusedVar","endLine":29,"endColumn":49},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'fetchInvoices'. Either include it or remove the dependency array.","line":157,"column":6,"nodeType":"ArrayExpression","endLine":157,"endColumn":32,"suggestions":[{"desc":"Update the dependencies array to be: [state.filters, companyId, fetchInvoices]","fix":{"range":[3954,3980],"text":"[state.filters, companyId, fetchInvoices]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has an unnecessary dependency: 'companyId'. Either exclude it or remove the dependency array.","line":202,"column":6,"nodeType":"ArrayExpression","endLine":202,"endColumn":87,"suggestions":[{"desc":"Update the dependencies array to be: [state.filters, state.statusFilter, state.dateRange, state.searchTerm]","fix":{"range":[5442,5523],"text":"[state.filters, state.statusFilter, state.dateRange, state.searchTerm]"}}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'handleCreateInvoice' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":204,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":204,"endColumn":28}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useReducer, useEffect, useCallback } from 'react';\r\nimport { \r\n  Box, \r\n  Typography, \r\n  Chip,\r\n  Button,\r\n  TextField,\r\n  InputAdornment,\r\n  IconButton,\r\n  Menu,\r\n  MenuItem,\r\n  FormControl,\r\n  InputLabel,\r\n  Select,\r\n  Stack,\r\n  SelectChangeEvent\r\n} from '@mui/material';\r\nimport {\r\n  Add as AddIcon,\r\n  Search as SearchIcon,\r\n  FilterList as FilterListIcon,\r\n  GetApp as DownloadIcon,\r\n  CalendarToday as CalendarIcon,\r\n  Refresh as RefreshIcon\r\n} from '@mui/icons-material';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { format } from 'date-fns';\r\nimport DataTable from '../DataTable';\r\nimport { getInvoices, InvoiceStatus, PaymentTerm, type Invoice, type InvoiceFilters } from '../../../services/api/invoiceService';\r\n\r\ninterface InvoiceListProps {\r\n  companyId?: string;\r\n}\r\n\r\n// Define state types\r\ninterface InvoiceListState {\r\n  invoices: Invoice[];\r\n  loading: boolean;\r\n  error: string | null;\r\n  filters: InvoiceFilters;\r\n  totalInvoices: number;\r\n  searchTerm: string;\r\n  filterMenuAnchor: null | HTMLElement;\r\n  statusFilter: InvoiceStatus | 'all';\r\n  dateRange: {\r\n    startDate: string;\r\n    endDate: string;\r\n  };\r\n}\r\n\r\n// Define action types\r\ntype InvoiceListAction =\r\n  | { type: 'SET_INVOICES'; payload: { invoices: Invoice[]; total: number } }\r\n  | { type: 'SET_LOADING'; payload: boolean }\r\n  | { type: 'SET_ERROR'; payload: string | null }\r\n  | { type: 'UPDATE_FILTERS'; payload: Partial<InvoiceFilters> }\r\n  | { type: 'SET_SEARCH_TERM'; payload: string }\r\n  | { type: 'SET_FILTER_MENU_ANCHOR'; payload: null | HTMLElement }\r\n  | { type: 'SET_STATUS_FILTER'; payload: InvoiceStatus | 'all' }\r\n  | { type: 'SET_DATE_RANGE'; payload: { field: 'startDate' | 'endDate'; value: string } }\r\n  | { type: 'RESET_FILTERS' };\r\n\r\n// Define initial state\r\nconst initialState: InvoiceListState = {\r\n  invoices: [],\r\n  loading: false,\r\n  error: null,\r\n  filters: {\r\n    page: 1,\r\n    limit: 10,\r\n    sortBy: 'createdAt',\r\n    sortOrder: 'desc'\r\n  },\r\n  totalInvoices: 0,\r\n  searchTerm: '',\r\n  filterMenuAnchor: null,\r\n  statusFilter: 'all',\r\n  dateRange: {\r\n    startDate: '',\r\n    endDate: ''\r\n  }\r\n};\r\n\r\n// Define reducer function\r\nconst invoiceListReducer = (state: InvoiceListState, action: InvoiceListAction): InvoiceListState => {\r\n  switch (action.type) {\r\n    case 'SET_INVOICES':\r\n      return {\r\n        ...state,\r\n        invoices: action.payload.invoices,\r\n        totalInvoices: action.payload.total\r\n      };\r\n    case 'SET_LOADING':\r\n      return {\r\n        ...state,\r\n        loading: action.payload\r\n      };\r\n    case 'SET_ERROR':\r\n      return {\r\n        ...state,\r\n        error: action.payload\r\n      };\r\n    case 'UPDATE_FILTERS':\r\n      return {\r\n        ...state,\r\n        filters: {\r\n          ...state.filters,\r\n          ...action.payload\r\n        }\r\n      };\r\n    case 'SET_SEARCH_TERM':\r\n      return {\r\n        ...state,\r\n        searchTerm: action.payload\r\n      };\r\n    case 'SET_FILTER_MENU_ANCHOR':\r\n      return {\r\n        ...state,\r\n        filterMenuAnchor: action.payload\r\n      };\r\n    case 'SET_STATUS_FILTER':\r\n      return {\r\n        ...state,\r\n        statusFilter: action.payload\r\n      };\r\n    case 'SET_DATE_RANGE':\r\n      return {\r\n        ...state,\r\n        dateRange: {\r\n          ...state.dateRange,\r\n          [action.payload.field]: action.payload.value\r\n        }\r\n      };\r\n    case 'RESET_FILTERS':\r\n      return {\r\n        ...state,\r\n        statusFilter: 'all',\r\n        dateRange: { startDate: '', endDate: '' },\r\n        searchTerm: '',\r\n        filters: {\r\n          page: 1,\r\n          limit: 10,\r\n          sortBy: 'createdAt',\r\n          sortOrder: 'desc'\r\n        }\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nconst InvoiceList: React.FC<InvoiceListProps> = ({ companyId }) => {\r\n  const navigate = useNavigate();\r\n  const [state, dispatch] = useReducer(invoiceListReducer, initialState);\r\n  useEffect(() => {\r\n    fetchInvoices();\r\n  }, [state.filters, companyId]);\r\n\r\n  const fetchInvoices = useCallback(async () => {\r\n    dispatch({ type: 'SET_LOADING', payload: true });\r\n    dispatch({ type: 'SET_ERROR', payload: null });\r\n    try {\r\n      // Apply filters\r\n      const apiFilters: InvoiceFilters = {\r\n        ...state.filters\r\n      };\r\n      \r\n      if (state.statusFilter !== 'all') {\r\n        apiFilters.status = state.statusFilter;\r\n      }\r\n      \r\n      if (state.dateRange.startDate) {\r\n        apiFilters.startDate = state.dateRange.startDate;\r\n      }\r\n      \r\n      if (state.dateRange.endDate) {\r\n        apiFilters.endDate = state.dateRange.endDate;\r\n      }\r\n      \r\n      if (state.searchTerm) {\r\n        // Search by invoice number or customer name - backend should handle this\r\n        // This is a placeholder - actual implementation depends on backend search capability\r\n        apiFilters.sortBy = state.searchTerm;\r\n      }\r\n\r\n      console.log('Fetching invoices with filters:', apiFilters);\r\n\r\n      const response = await getInvoices(apiFilters);\r\n      dispatch({ \r\n        type: 'SET_INVOICES', \r\n        payload: { \r\n          invoices: response.data, \r\n          total: response.pagination?.totalPages || 0 \r\n        } \r\n      });\r\n    } catch (err: any) {\r\n      dispatch({ type: 'SET_ERROR', payload: err.message || 'Failed to fetch invoices' });\r\n      console.error('Error fetching invoices:', err);\r\n    } finally {\r\n      dispatch({ type: 'SET_LOADING', payload: false });\r\n    }\r\n  }, [state.filters, state.statusFilter, state.dateRange, state.searchTerm, companyId]);\r\n\r\n  const handleCreateInvoice = () => {\r\n    navigate('/invoices/create');\r\n  };\r\n\r\n  const handleViewInvoice = (id: string) => {\r\n    navigate(`/invoices/${id}`);\r\n  };\r\n  const handleFilterOpen = (event: React.MouseEvent<HTMLElement>) => {\r\n    dispatch({ type: 'SET_FILTER_MENU_ANCHOR', payload: event.currentTarget });\r\n  };\r\n\r\n  const handleFilterClose = () => {\r\n    dispatch({ type: 'SET_FILTER_MENU_ANCHOR', payload: null });\r\n  };\r\n\r\n  const handleStatusFilterChange = (event: SelectChangeEvent) => {\r\n    dispatch({ type: 'SET_STATUS_FILTER', payload: event.target.value as InvoiceStatus | 'all' });\r\n  };\r\n\r\n  const handleDateRangeChange = (field: 'startDate' | 'endDate', value: string) => {\r\n    dispatch({ type: 'SET_DATE_RANGE', payload: { field, value } });\r\n  };\r\n\r\n  const handleApplyFilters = () => {\r\n    dispatch({ type: 'UPDATE_FILTERS', payload: { page: 1 } }); // Reset to first page when applying new filters\r\n    handleFilterClose();\r\n    fetchInvoices();\r\n  };\r\n\r\n  const handleResetFilters = () => {\r\n    dispatch({ type: 'RESET_FILTERS' });\r\n    handleFilterClose();\r\n  };\r\n\r\n  const handlePageChange = (page: number) => {\r\n    dispatch({ type: 'UPDATE_FILTERS', payload: { page } });\r\n  };\r\n\r\n  const handleSearchChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    dispatch({ type: 'SET_SEARCH_TERM', payload: event.target.value });\r\n  };\r\n\r\n  const handleSearch = () => {\r\n    // Reset to first page when searching\r\n    dispatch({ type: 'UPDATE_FILTERS', payload: { page: 1 } });\r\n    fetchInvoices();\r\n  };\r\n\r\n  const getStatusChipColor = (status: InvoiceStatus) => {\r\n    switch (status) {\r\n      case InvoiceStatus.PAID:\r\n        return 'success';\r\n      case InvoiceStatus.PENDING:\r\n        return 'warning';\r\n      case InvoiceStatus.OVERDUE:\r\n        return 'error';\r\n      case InvoiceStatus.PARTIALLY_PAID:\r\n        return 'info';\r\n      case InvoiceStatus.CANCELLED:\r\n        return 'default';\r\n      default:\r\n        return 'default';\r\n    }\r\n  };\r\n\r\n  const formatCurrency = (amount: number) => {\r\n    return new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(amount);\r\n  };\r\n\r\n  const columns = [\r\n    {\r\n      id: 'invoiceNumber',\r\n      label: 'Invoice #',\r\n      accessor: 'invoiceNumber',\r\n      cell: (row: Invoice) => (\r\n        <Typography variant=\"body2\" fontWeight=\"medium\">\r\n          {row.invoiceNumber}\r\n        </Typography>\r\n      )\r\n    },\r\n    {\r\n      id: 'customer',\r\n      label: 'Customer',\r\n      accessor: 'customerId',\r\n      cell: (row: Invoice) => (\r\n        <Typography variant=\"body2\">\r\n          {row.customerId.substring(0, 10)}... {/* This should be replaced with actual customer name */}\r\n        </Typography>\r\n      )\r\n    },\r\n    {\r\n      id: 'amount',\r\n      label: 'Amount',\r\n      accessor: 'total',\r\n      cell: (row: Invoice) => (\r\n        <Typography variant=\"body2\">\r\n          {row.total ? formatCurrency(row.total) : '-'}\r\n        </Typography>\r\n      )\r\n    },\r\n    {\r\n      id: 'issueDate',\r\n      label: 'Issue Date',\r\n      accessor: 'issueDate',\r\n      cell: (row: Invoice) => (\r\n        <Typography variant=\"body2\">\r\n          {row.issueDate ? format(new Date(row.issueDate), 'MMM dd, yyyy') : '-'}\r\n        </Typography>\r\n      )\r\n    },\r\n    {\r\n      id: 'dueDate',\r\n      label: 'Due Date',\r\n      accessor: 'dueDate',\r\n      cell: (row: Invoice) => (\r\n        <Typography variant=\"body2\">\r\n          {row.dueDate ? format(new Date(row.dueDate), 'MMM dd, yyyy') : '-'}\r\n        </Typography>\r\n      )\r\n    },\r\n    {\r\n      id: 'status',\r\n      label: 'Status',\r\n      accessor: 'status',\r\n      cell: (row: Invoice) => (\r\n        <Chip \r\n          label={row.status ? row.status.replace('_', ' ').toUpperCase() : 'DRAFT'} \r\n          size=\"small\" \r\n          color={getStatusChipColor(row.status as InvoiceStatus)}\r\n        />\r\n      )\r\n    },\r\n    {\r\n      id: 'actions',\r\n      label: 'Actions',\r\n      accessor: 'id',\r\n      cell: (row: Invoice) => (\r\n        <Button\r\n          variant=\"outlined\"\r\n          size=\"small\"\r\n          onClick={() => handleViewInvoice(row.id!)}\r\n        >\r\n          View\r\n        </Button>\r\n      )\r\n    }\r\n  ];\r\n  // Filter panel JSX\r\n  const filterPanel = (\r\n    <Box sx={{ p: 2, mb: 3, borderRadius: 1, border: '1px solid #e0e0e0' }}>\r\n      <Box display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\" mb={2}>\r\n        <TextField\r\n          placeholder=\"Search invoices...\"\r\n          value={state.searchTerm}\r\n          onChange={handleSearchChange}\r\n          onKeyPress={(e) => e.key === 'Enter' && handleSearch()}\r\n          sx={{ width: '40%' }}\r\n          InputProps={{\r\n            startAdornment: (\r\n              <InputAdornment position=\"start\">\r\n                <SearchIcon />\r\n              </InputAdornment>\r\n            ),\r\n            endAdornment: (\r\n              <InputAdornment position=\"end\">\r\n                <IconButton onClick={handleSearch}>\r\n                  <SearchIcon />\r\n                </IconButton>\r\n              </InputAdornment>\r\n            )\r\n          }}\r\n        />\r\n        <Box>\r\n          <Button\r\n            startIcon={<RefreshIcon />}\r\n            onClick={fetchInvoices}\r\n            sx={{ mr: 1 }}\r\n          >\r\n            Refresh\r\n          </Button>\r\n          <Button\r\n            startIcon={<FilterListIcon />}\r\n            onClick={handleFilterOpen}\r\n            variant=\"outlined\"\r\n          >\r\n            Filters\r\n          </Button>\r\n          <Menu\r\n            anchorEl={state.filterMenuAnchor}\r\n            open={Boolean(state.filterMenuAnchor)}\r\n            onClose={handleFilterClose}\r\n            PaperProps={{\r\n              sx: { width: 300, p: 2 }\r\n            }}\r\n          >\r\n            <Typography variant=\"subtitle1\" gutterBottom>\r\n              Filter Invoices\r\n            </Typography>\r\n            \r\n            <FormControl fullWidth margin=\"normal\">\r\n              <InputLabel>Status</InputLabel>\r\n              <Select\r\n                value={state.statusFilter}\r\n                onChange={handleStatusFilterChange}\r\n                label=\"Status\"\r\n              >\r\n                <MenuItem value=\"all\">All</MenuItem>\r\n                <MenuItem value={InvoiceStatus.DRAFT}>Draft</MenuItem>\r\n                <MenuItem value={InvoiceStatus.PENDING}>Pending</MenuItem>\r\n                <MenuItem value={InvoiceStatus.PAID}>Paid</MenuItem>\r\n                <MenuItem value={InvoiceStatus.PARTIALLY_PAID}>Partially Paid</MenuItem>\r\n                <MenuItem value={InvoiceStatus.OVERDUE}>Overdue</MenuItem>\r\n                <MenuItem value={InvoiceStatus.CANCELLED}>Cancelled</MenuItem>\r\n              </Select>\r\n            </FormControl>\r\n            \r\n            <Typography variant=\"subtitle2\" sx={{ mt: 2 }}>\r\n              Date Range\r\n            </Typography>\r\n            \r\n            <Stack spacing={2} sx={{ mt: 1 }}>\r\n              <TextField\r\n                label=\"From\"\r\n                type=\"date\"\r\n                value={state.dateRange.startDate}\r\n                onChange={(e) => handleDateRangeChange('startDate', e.target.value)}\r\n                InputLabelProps={{ shrink: true }}\r\n                fullWidth\r\n              />\r\n              <TextField\r\n                label=\"To\"\r\n                type=\"date\"\r\n                value={state.dateRange.endDate}\r\n                onChange={(e) => handleDateRangeChange('endDate', e.target.value)}\r\n                InputLabelProps={{ shrink: true }}\r\n                fullWidth\r\n              />\r\n            </Stack>\r\n            \r\n            <Stack direction=\"row\" spacing={1} sx={{ mt: 3 }}>\r\n              <Button\r\n                variant=\"outlined\"\r\n                onClick={handleResetFilters}\r\n                fullWidth\r\n              >\r\n                Reset\r\n              </Button>\r\n              <Button\r\n                variant=\"contained\"\r\n                onClick={handleApplyFilters}\r\n                fullWidth\r\n              >\r\n                Apply\r\n              </Button>\r\n            </Stack>\r\n          </Menu>\r\n        </Box>\r\n      </Box>\r\n    </Box>\r\n  );\r\n  return (\r\n    <Box>\r\n      {/* Filter panel only, no page title/header here */}\r\n      <Box sx={{ mb: 2 }}>\r\n        {filterPanel}\r\n      </Box>\r\n      <DataTable\r\n        columns={columns}\r\n        data={state.invoices}\r\n        loading={state.loading}\r\n        error={state.error}\r\n        pagination={{\r\n          page: state.filters.page || 1,\r\n          rowsPerPage: state.filters.limit || 10,\r\n          totalCount: state.totalInvoices,\r\n          onPageChange: handlePageChange,\r\n          onRowsPerPageChange: (pageSize) => {\r\n            dispatch({ \r\n              type: 'UPDATE_FILTERS', \r\n              payload: {\r\n                limit: pageSize,\r\n                page: 1 // Reset to first page when changing page size\r\n              }\r\n            });\r\n          }\r\n        }}\r\n        onRowClick={(row: Invoice) => handleViewInvoice(row.id!)}\r\n      />\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default InvoiceList;\r\n","usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"d:\\All python project\\Tubex\\Frontend\\app\\src\\components\\whitelabel\\invoices\\index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"d:\\All python project\\Tubex\\Frontend\\app\\src\\components\\whitelabel\\orders\\CreateOrderForm.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Divider' is defined but never used. Allowed unused vars must match /^_/u.","line":8,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":8,"endColumn":10},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'fetchWarehouses'. Either include it or remove the dependency array.","line":82,"column":6,"nodeType":"ArrayExpression","endLine":82,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [fetchWarehouses]","fix":{"range":[2057,2059],"text":"[fetchWarehouses]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\r\nimport {\r\n  Box,\r\n  Paper,\r\n  Typography,\r\n  TextField,\r\n  Button,\r\n  Divider,\r\n  IconButton,\r\n  MenuItem,\r\n  FormControl,\r\n  InputLabel,\r\n  Select,\r\n  FormHelperText,\r\n  CircularProgress,\r\n  Alert,\r\n  Autocomplete,\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableContainer,\r\n  TableHead,\r\n  TableRow\r\n} from '@mui/material';\r\nimport DeleteIcon from '@mui/icons-material/Delete';\r\nimport AddIcon from '@mui/icons-material/Add';\r\nimport { orderService, productService, warehouseService } from '../../../services/api';\r\n\r\ninterface CreateOrderFormProps {\r\n  companyId: string;\r\n  onSave: (orderData: any) => void;\r\n  onCancel: () => void;\r\n}\r\n\r\nconst CreateOrderForm: React.FC<CreateOrderFormProps> = ({\r\n  companyId,\r\n  onSave,\r\n  onCancel\r\n}) => {\r\n  // Form data\r\n  const [formData, setFormData] = useState({\r\n    customer_name: '',\r\n    customer_email: '',\r\n    customer_phone: '',\r\n    shipping_address: {\r\n      street: '',\r\n      city: '',\r\n      state: '',\r\n      zip: '',\r\n      country: 'USA'\r\n    },\r\n    payment_method: 'credit_card',\r\n    payment_status: 'pending',\r\n    warehouse_id: '',\r\n    notes: '',\r\n  });\r\n\r\n  // Order items\r\n  const [orderItems, setOrderItems] = useState<Array<{\r\n    product_id: string;\r\n    product_name: string;\r\n    sku: string;\r\n    price: number;\r\n    quantity: number;\r\n  }>>([]);\r\n\r\n  // Available products for selection\r\n  const [availableProducts, setAvailableProducts] = useState<Array<any>>([]);\r\n  const [warehouses, setWarehouses] = useState<Array<any>>([]);\r\n  \r\n  // Loading and error states\r\n  const [loading, setLoading] = useState(false);\r\n  const [productLoading, setProductLoading] = useState(false);\r\n  const [warehouseLoading, setWarehouseLoading] = useState(false);\r\n  const [error, setError] = useState<string | null>(null);\r\n  const [formErrors, setFormErrors] = useState<Record<string, string>>({});\r\n\r\n  // Fetch available products and warehouses when component mounts\r\n  useEffect(() => {\r\n    fetchProducts();\r\n    fetchWarehouses();\r\n  }, []);\r\n\r\n  // Fixing the property name for productService.getProducts\r\n  const fetchProducts = async () => {\r\n    setProductLoading(true);\r\n    try {\r\n      const response = await productService.getProducts({\r\n        status: 'active', // Example filter for active products\r\n        search: '', // Optional search query\r\n      });\r\n      setAvailableProducts(response.products || []); // Adjusted to use 'products'\r\n    } catch (err: any) {\r\n      console.error('Error fetching products:', err);\r\n    } finally {\r\n      setProductLoading(false);\r\n    }\r\n  };\r\n  // Fixing the warehouse data extraction from API response\r\n  const fetchWarehouses = async () => {\r\n    setWarehouseLoading(true);\r\n    try {\r\n      const response = await warehouseService.getWarehouses(companyId); // Pass companyId directly\r\n      console.log('Warehouse API response:', response);\r\n      \r\n      // Handle different potential response structures\r\n      let warehousesList: Array<any> = [];\r\n      \r\n      // If response.data is an array\r\n      if (Array.isArray(response.data)) {\r\n        warehousesList = response.data;\r\n      } \r\n      // If response.data contains a warehouses property that is an array\r\n      else if (response.data && typeof response.data === 'object' && 'warehouses' in response.data && \r\n              Array.isArray((response.data as any).warehouses)) {\r\n        warehousesList = (response.data as any).warehouses;\r\n      }\r\n      // If response.data.data contains the warehouses array\r\n      else if (response.data && typeof response.data === 'object' && 'data' in response.data && \r\n              Array.isArray((response.data as any).data)) {\r\n        warehousesList = (response.data as any).data;\r\n      }\r\n      // Default to empty array if no matching structure is found\r\n      else {\r\n        console.error('Unexpected API response format:', response);\r\n        warehousesList = [];\r\n      }\r\n      \r\n      // Set warehouses state with the extracted array\r\n      setWarehouses(warehousesList);\r\n\r\n      // Set default warehouse if available\r\n      if (warehousesList.length > 0) {\r\n        setFormData(prev => ({ ...prev, warehouse_id: warehousesList[0].id }));\r\n      }\r\n    } catch (err: any) {\r\n      console.error('Error fetching warehouses:', err);\r\n      // Always set warehouses to an empty array on error\r\n      setWarehouses([]);\r\n    } finally {\r\n      setWarehouseLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleFormChange = (field: string, value: any) => {\r\n    setFormData(prev => ({ ...prev, [field]: value }));\r\n    // Clear validation error when field is changed\r\n    if (formErrors[field]) {\r\n      setFormErrors(prev => ({ ...prev, [field]: '' }));\r\n    }\r\n  };\r\n\r\n  const handleAddressChange = (field: string, value: string) => {\r\n    setFormData(prev => ({\r\n      ...prev,\r\n      shipping_address: { ...prev.shipping_address, [field]: value }\r\n    }));\r\n    // Clear validation error\r\n    if (formErrors[`shipping_address.${field}`]) {\r\n      setFormErrors(prev => ({ ...prev, [`shipping_address.${field}`]: '' }));\r\n    }\r\n  };\r\n\r\n  const handleAddProduct = () => {\r\n    setOrderItems(prev => [\r\n      ...prev,\r\n      {\r\n        product_id: '',\r\n        product_name: '',\r\n        sku: '',\r\n        price: 0,\r\n        quantity: 1\r\n      }\r\n    ]);\r\n  };\r\n\r\n  const handleRemoveProduct = (index: number) => {\r\n    setOrderItems(prev => prev.filter((_, i) => i !== index));\r\n  };\r\n\r\n  const handleProductSelect = (index: number, productId: string) => {\r\n    const selectedProduct = availableProducts.find(p => p.id === productId);\r\n    \r\n    if (selectedProduct) {\r\n      const updatedItems = [...orderItems];\r\n      updatedItems[index] = {\r\n        product_id: selectedProduct.id,\r\n        product_name: selectedProduct.name,\r\n        sku: selectedProduct.sku || '',\r\n        price: selectedProduct.price || 0,\r\n        quantity: 1\r\n      };\r\n      setOrderItems(updatedItems);\r\n    }\r\n  };\r\n\r\n  const handleProductQuantityChange = (index: number, quantity: number) => {\r\n    const updatedItems = [...orderItems];\r\n    updatedItems[index] = {\r\n      ...updatedItems[index],\r\n      quantity: quantity\r\n    };\r\n    setOrderItems(updatedItems);\r\n  };\r\n\r\n  const validateForm = () => {\r\n    const errors: Record<string, string> = {};\r\n    \r\n    // Basic validation\r\n    if (!formData.customer_name.trim()) {\r\n      errors['customer_name'] = 'Customer name is required';\r\n    }\r\n    \r\n    if (!formData.customer_email.trim()) {\r\n      errors['customer_email'] = 'Customer email is required';\r\n    } else if (!/\\S+@\\S+\\.\\S+/.test(formData.customer_email)) {\r\n      errors['customer_email'] = 'Invalid email format';\r\n    }\r\n    \r\n    if (!formData.shipping_address.street.trim()) {\r\n      errors['shipping_address.street'] = 'Street address is required';\r\n    }\r\n    \r\n    if (!formData.shipping_address.city.trim()) {\r\n      errors['shipping_address.city'] = 'City is required';\r\n    }\r\n    \r\n    if (!formData.shipping_address.zip.trim()) {\r\n      errors['shipping_address.zip'] = 'ZIP code is required';\r\n    }\r\n    \r\n    if (!formData.warehouse_id) {\r\n      errors['warehouse_id'] = 'Please select a warehouse';\r\n    }\r\n    \r\n    // Order items validation\r\n    if (orderItems.length === 0) {\r\n      errors['orderItems'] = 'Please add at least one product to the order';\r\n    } else {\r\n      orderItems.forEach((item, index) => {\r\n        if (!item.product_id) {\r\n          errors[`orderItems[${index}].product_id`] = 'Please select a product';\r\n        }\r\n        if (item.quantity < 1) {\r\n          errors[`orderItems[${index}].quantity`] = 'Quantity must be at least 1';\r\n        }\r\n      });\r\n    }\r\n    \r\n    setFormErrors(errors);\r\n    return Object.keys(errors).length === 0;\r\n  };\r\n\r\n  // Fixing the orderService.createOrder call\r\n  const handleSubmit = async () => {\r\n    if (!validateForm()) {\r\n      return;\r\n    }\r\n    \r\n    setLoading(true);\r\n    setError(null);\r\n    \r\n    try {\r\n      const orderData = {\r\n        ...formData,\r\n        company_id: companyId, // Corrected property name\r\n        deliveryAddress: {\r\n          ...formData.shipping_address,\r\n          zipCode: formData.shipping_address.zip // Renamed 'zip' to 'zipCode'\r\n        },\r\n        paymentMethod: formData.payment_method, // Added missing property\r\n        items: orderItems.map(item => ({\r\n          productId: item.product_id, // Corrected property name\r\n          quantity: item.quantity,\r\n          discount: 0 // Assuming no discount for now\r\n        }))\r\n      };\r\n      \r\n      const response = await orderService.createOrder(orderData);\r\n      onSave(response);\r\n    } catch (err: any) {\r\n      console.error('Error creating order:', err);\r\n      setError(err.message || 'Failed to create order');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const formatCurrency = (value: number) => {\r\n    return new Intl.NumberFormat('en-US', {\r\n      style: 'currency',\r\n      currency: 'USD',\r\n    }).format(value);\r\n  };\r\n\r\n  return (\r\n    <Box>\r\n      <Typography variant=\"h5\" gutterBottom>\r\n        Create New Order\r\n      </Typography>\r\n      \r\n      {error && (\r\n        <Alert severity=\"error\" sx={{ mb: 2 }}>\r\n          {error}\r\n        </Alert>\r\n      )}\r\n      \r\n      {formErrors['orderItems'] && (\r\n        <Alert severity=\"error\" sx={{ mb: 2 }}>\r\n          {formErrors['orderItems']}\r\n        </Alert>\r\n      )}\r\n      \r\n      <Paper sx={{ p: 3, mb: 3 }}>\r\n        <Typography variant=\"h6\" gutterBottom>\r\n          Customer Information\r\n        </Typography>\r\n        \r\n        <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 2, mb: 3 }}>\r\n          <TextField\r\n            label=\"Customer Name\"\r\n            value={formData.customer_name}\r\n            onChange={(e) => handleFormChange('customer_name', e.target.value)}\r\n            error={!!formErrors['customer_name']}\r\n            helperText={formErrors['customer_name']}\r\n            fullWidth\r\n            sx={{ flex: '1 1 300px' }}\r\n          />\r\n          \r\n          <TextField\r\n            label=\"Email\"\r\n            type=\"email\"\r\n            value={formData.customer_email}\r\n            onChange={(e) => handleFormChange('customer_email', e.target.value)}\r\n            error={!!formErrors['customer_email']}\r\n            helperText={formErrors['customer_email']}\r\n            fullWidth\r\n            sx={{ flex: '1 1 300px' }}\r\n          />\r\n          \r\n          <TextField\r\n            label=\"Phone\"\r\n            value={formData.customer_phone}\r\n            onChange={(e) => handleFormChange('customer_phone', e.target.value)}\r\n            fullWidth\r\n            sx={{ flex: '1 1 300px' }}\r\n          />\r\n        </Box>\r\n        \r\n        <Typography variant=\"subtitle1\" gutterBottom>\r\n          Shipping Address\r\n        </Typography>\r\n        \r\n        <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 2 }}>\r\n          <TextField\r\n            label=\"Street Address\"\r\n            value={formData.shipping_address.street}\r\n            onChange={(e) => handleAddressChange('street', e.target.value)}\r\n            error={!!formErrors['shipping_address.street']}\r\n            helperText={formErrors['shipping_address.street']}\r\n            fullWidth\r\n            sx={{ flex: '1 1 100%' }}\r\n          />\r\n          \r\n          <TextField\r\n            label=\"City\"\r\n            value={formData.shipping_address.city}\r\n            onChange={(e) => handleAddressChange('city', e.target.value)}\r\n            error={!!formErrors['shipping_address.city']}\r\n            helperText={formErrors['shipping_address.city']}\r\n            sx={{ flex: '1 1 200px' }}\r\n          />\r\n          \r\n          <TextField\r\n            label=\"State/Province\"\r\n            value={formData.shipping_address.state}\r\n            onChange={(e) => handleAddressChange('state', e.target.value)}\r\n            sx={{ flex: '1 1 150px' }}\r\n          />\r\n          \r\n          <TextField\r\n            label=\"ZIP/Postal Code\"\r\n            value={formData.shipping_address.zip}\r\n            onChange={(e) => handleAddressChange('zip', e.target.value)}\r\n            error={!!formErrors['shipping_address.zip']}\r\n            helperText={formErrors['shipping_address.zip']}\r\n            sx={{ flex: '1 1 150px' }}\r\n          />\r\n          \r\n          <TextField\r\n            label=\"Country\"\r\n            value={formData.shipping_address.country}\r\n            onChange={(e) => handleAddressChange('country', e.target.value)}\r\n            sx={{ flex: '1 1 200px' }}\r\n          />\r\n        </Box>\r\n      </Paper>\r\n      \r\n      <Paper sx={{ p: 3, mb: 3 }}>\r\n        <Typography variant=\"h6\" gutterBottom>\r\n          Order Items\r\n        </Typography>\r\n        \r\n        {orderItems.length > 0 ? (\r\n          <TableContainer>\r\n            <Table>\r\n              <TableHead>\r\n                <TableRow>\r\n                  <TableCell>Product</TableCell>\r\n                  <TableCell>Price</TableCell>\r\n                  <TableCell>Quantity</TableCell>\r\n                  <TableCell>Total</TableCell>\r\n                  <TableCell width={50}></TableCell>\r\n                </TableRow>\r\n              </TableHead>\r\n              <TableBody>\r\n                {orderItems.map((item, index) => (\r\n                  <TableRow key={index}>\r\n                    <TableCell>\r\n                      <Autocomplete\r\n                        options={availableProducts}\r\n                        getOptionLabel={(option) => option.name || ''}\r\n                        loading={productLoading}\r\n                        onChange={(_, value) => handleProductSelect(index, value?.id || '')}\r\n                        renderInput={(params) => (\r\n                          <TextField\r\n                            {...params}\r\n                            label=\"Select Product\"\r\n                            error={!!formErrors[`orderItems[${index}].product_id`]}\r\n                            helperText={formErrors[`orderItems[${index}].product_id`]}\r\n                          />\r\n                        )}\r\n                      />\r\n                      {item.sku && (\r\n                        <Typography variant=\"caption\" color=\"text.secondary\">\r\n                          SKU: {item.sku}\r\n                        </Typography>\r\n                      )}\r\n                    </TableCell>\r\n                    <TableCell>{formatCurrency(item.price)}</TableCell>\r\n                    <TableCell>\r\n                      <TextField\r\n                        type=\"number\"\r\n                        value={item.quantity}\r\n                        onChange={(e) => handleProductQuantityChange(index, parseInt(e.target.value) || 0)}\r\n                        inputProps={{ min: 1 }}\r\n                        error={!!formErrors[`orderItems[${index}].quantity`]}\r\n                        helperText={formErrors[`orderItems[${index}].quantity`]}\r\n                        sx={{ width: 80 }}\r\n                      />\r\n                    </TableCell>\r\n                    <TableCell>{formatCurrency(item.price * item.quantity)}</TableCell>\r\n                    <TableCell>\r\n                      <IconButton color=\"error\" onClick={() => handleRemoveProduct(index)}>\r\n                        <DeleteIcon />\r\n                      </IconButton>\r\n                    </TableCell>\r\n                  </TableRow>\r\n                ))}\r\n              </TableBody>\r\n            </Table>\r\n          </TableContainer>\r\n        ) : (\r\n          <Typography variant=\"body1\" color=\"text.secondary\" sx={{ my: 3, textAlign: 'center' }}>\r\n            No products added to this order yet.\r\n          </Typography>\r\n        )}\r\n        \r\n        <Button\r\n          startIcon={<AddIcon />}\r\n          onClick={handleAddProduct}\r\n          sx={{ mt: 2 }}\r\n        >\r\n          Add Product\r\n        </Button>\r\n      </Paper>\r\n      \r\n      <Paper sx={{ p: 3, mb: 3 }}>\r\n        <Typography variant=\"h6\" gutterBottom>\r\n          Order Details\r\n        </Typography>\r\n        \r\n        <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 2 }}>\r\n          <FormControl sx={{ flex: '1 1 200px' }} error={!!formErrors['warehouse_id']}>\r\n            <InputLabel>Warehouse</InputLabel>\r\n            <Select\r\n              value={formData.warehouse_id}\r\n              label=\"Warehouse\"\r\n              onChange={(e) => handleFormChange('warehouse_id', e.target.value)}\r\n              disabled={warehouseLoading}\r\n            >              {Array.isArray(warehouses) ? warehouses.map(warehouse => (\r\n                <MenuItem key={warehouse.id} value={warehouse.id}>\r\n                  {warehouse.name}\r\n                </MenuItem>\r\n              )) : (\r\n                <MenuItem value=\"\">No warehouses available</MenuItem>\r\n              )}\r\n            </Select>\r\n            {formErrors['warehouse_id'] && (\r\n              <FormHelperText>{formErrors['warehouse_id']}</FormHelperText>\r\n            )}\r\n          </FormControl>\r\n          \r\n          <FormControl sx={{ flex: '1 1 200px' }}>\r\n            <InputLabel>Payment Method</InputLabel>\r\n            <Select\r\n              value={formData.payment_method}\r\n              label=\"Payment Method\"\r\n              onChange={(e) => handleFormChange('payment_method', e.target.value)}\r\n            >\r\n              <MenuItem value=\"credit_card\">Credit Card</MenuItem>\r\n              <MenuItem value=\"paypal\">PayPal</MenuItem>\r\n              <MenuItem value=\"bank_transfer\">Bank Transfer</MenuItem>\r\n              <MenuItem value=\"cash\">Cash</MenuItem>\r\n            </Select>\r\n          </FormControl>\r\n          \r\n          <FormControl sx={{ flex: '1 1 200px' }}>\r\n            <InputLabel>Payment Status</InputLabel>\r\n            <Select\r\n              value={formData.payment_status}\r\n              label=\"Payment Status\"\r\n              onChange={(e) => handleFormChange('payment_status', e.target.value)}\r\n            >\r\n              <MenuItem value=\"pending\">Pending</MenuItem>\r\n              <MenuItem value=\"paid\">Paid</MenuItem>\r\n              <MenuItem value=\"failed\">Failed</MenuItem>\r\n            </Select>\r\n          </FormControl>\r\n        </Box>\r\n        \r\n        <TextField\r\n          label=\"Order Notes (Optional)\"\r\n          multiline\r\n          rows={3}\r\n          value={formData.notes}\r\n          onChange={(e) => handleFormChange('notes', e.target.value)}\r\n          fullWidth\r\n          sx={{ mt: 2 }}\r\n        />\r\n      </Paper>\r\n      \r\n      <Box sx={{ display: 'flex', justifyContent: 'flex-end', gap: 2 }}>\r\n        <Button \r\n          variant=\"outlined\" \r\n          onClick={onCancel}\r\n          disabled={loading}\r\n        >\r\n          Cancel\r\n        </Button>\r\n        <Button \r\n          variant=\"contained\" \r\n          color=\"primary\" \r\n          onClick={handleSubmit}\r\n          disabled={loading}\r\n        >\r\n          {loading ? <CircularProgress size={24} /> : 'Create Order'}\r\n        </Button>\r\n      </Box>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default CreateOrderForm;","usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"d:\\All python project\\Tubex\\Frontend\\app\\src\\components\\whitelabel\\orders\\OrderDetails.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"d:\\All python project\\Tubex\\Frontend\\app\\src\\components\\whitelabel\\orders\\OrderList.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'OrderResponse' is defined but never used. Allowed unused vars must match /^_/u.","line":49,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":49,"endColumn":24},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'state.isSearching'. Either include it or remove the dependency array.","line":279,"column":6,"nodeType":"ArrayExpression","endLine":279,"endColumn":19,"suggestions":[{"desc":"Update the dependencies array to be: [fetchOrders, state.isSearching]","fix":{"range":[7631,7644],"text":"[fetchOrders, state.isSearching]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'state.page'. Either include it or remove the dependency array.","line":303,"column":6,"nodeType":"ArrayExpression","endLine":303,"endColumn":61,"suggestions":[{"desc":"Update the dependencies array to be: [state.statusFilter, state.sortBy, state.sortDirection, state.page]","fix":{"range":[8226,8281],"text":"[state.statusFilter, state.sortBy, state.sortDirection, state.page]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useReducer, useEffect, useCallback } from 'react';\r\nimport { \r\n  Box, \r\n  Typography, \r\n  Paper, \r\n  Table, \r\n  TableBody, \r\n  TableCell, \r\n  TableContainer, \r\n  TableHead, \r\n  TableRow,\r\n  TablePagination,\r\n  Chip,\r\n  IconButton,\r\n  TextField,\r\n  InputAdornment,\r\n  MenuItem,\r\n  Select,\r\n  FormControl,\r\n  InputLabel,\r\n  Button,\r\n  Dialog,\r\n  DialogActions,\r\n  DialogContent,\r\n  DialogContentText,\r\n  DialogTitle,\r\n  Skeleton,\r\n  SelectChangeEvent\r\n} from '@mui/material';\r\nimport SearchIcon from '@mui/icons-material/Search';\r\nimport FilterListIcon from '@mui/icons-material/FilterList';\r\nimport VisibilityIcon from '@mui/icons-material/Visibility';\r\nimport EditIcon from '@mui/icons-material/Edit';\r\nimport DeleteIcon from '@mui/icons-material/Delete';\r\nimport { orderService } from '../../../services/api';\r\nimport { formatCurrency, formatDate } from '../../../utils/formatters';\r\n\r\n// Order status colors\r\nconst STATUS_COLORS = {\r\n  pending: { color: 'warning', label: 'Pending' },\r\n  processing: { color: 'info', label: 'Processing' },\r\n  shipped: { color: 'primary', label: 'Shipped' },\r\n  delivered: { color: 'success', label: 'Delivered' },\r\n  cancelled: { color: 'error', label: 'Cancelled' },\r\n  refunded: { color: 'default', label: 'Refunded' },\r\n};\r\n\r\n// Types\r\ninterface OrderResponse {\r\n  items: Order[];\r\n  meta: {\r\n    total: number;\r\n    page: number;\r\n    limit: number;\r\n  };\r\n}\r\n\r\ninterface Order {\r\n  id: string;\r\n  order_number: string;\r\n  customer: {\r\n    id: string;\r\n    name: string;\r\n    email: string;\r\n  };\r\n  status: keyof typeof STATUS_COLORS;\r\n  total: number;\r\n  created_at: string;\r\n  items_count: number;\r\n}\r\n\r\ninterface OrderListProps {\r\n  companyId: string;\r\n  onViewOrder?: (orderId: string) => void;\r\n  onEditOrder?: (orderId: string) => void;\r\n  onDeleteOrder?: (orderId: string) => void;\r\n  allowEdit?: boolean;\r\n  allowDelete?: boolean;\r\n}\r\n\r\n// Define OrderList state type\r\ninterface OrderListState {\r\n  orders: Order[];\r\n  loading: boolean;\r\n  page: number;\r\n  rowsPerPage: number;\r\n  totalCount: number;\r\n  searchQuery: string;\r\n  statusFilter: string;\r\n  sortBy: string;\r\n  sortDirection: 'asc' | 'desc';\r\n  error: string | null;\r\n  deleteDialogOpen: boolean;\r\n  selectedOrderId: string | null;\r\n  isSearching: boolean;\r\n  searchAbortController: AbortController | null;\r\n}\r\n\r\n// Define the initial state\r\nconst initialState: OrderListState = {\r\n  orders: [],\r\n  loading: false,\r\n  page: 0,\r\n  rowsPerPage: 10,\r\n  totalCount: 0,\r\n  searchQuery: '',\r\n  statusFilter: 'all',\r\n  sortBy: 'created_at',\r\n  sortDirection: 'desc',\r\n  error: null,\r\n  deleteDialogOpen: false,\r\n  selectedOrderId: null,\r\n  isSearching: false,\r\n  searchAbortController: null\r\n};\r\n\r\n// Define action types\r\ntype OrderListAction =\r\n  | { type: 'SET_ORDERS'; payload: { orders: Order[]; totalCount: number } }\r\n  | { type: 'SET_LOADING'; payload: boolean }\r\n  | { type: 'SET_PAGE'; payload: number }\r\n  | { type: 'SET_ROWS_PER_PAGE'; payload: number }\r\n  | { type: 'SET_SEARCH_QUERY'; payload: string }\r\n  | { type: 'SET_STATUS_FILTER'; payload: string }\r\n  | { type: 'SET_SORT_BY'; payload: string }\r\n  | { type: 'SET_SORT_DIRECTION'; payload: 'asc' | 'desc' }\r\n  | { type: 'SET_ERROR'; payload: string | null }\r\n  | { type: 'SET_DELETE_DIALOG_OPEN'; payload: boolean }\r\n  | { type: 'SET_SELECTED_ORDER_ID'; payload: string | null }\r\n  | { type: 'SET_IS_SEARCHING'; payload: boolean }\r\n  | { type: 'SET_SEARCH_ABORT_CONTROLLER'; payload: AbortController | null };\r\n\r\n// Define the reducer function\r\nconst orderListReducer = (state: OrderListState, action: OrderListAction): OrderListState => {\r\n  switch (action.type) {\r\n    case 'SET_ORDERS':\r\n      return {\r\n        ...state,\r\n        orders: action.payload.orders,\r\n        totalCount: action.payload.totalCount\r\n      };\r\n    case 'SET_LOADING':\r\n      return {\r\n        ...state,\r\n        loading: action.payload\r\n      };\r\n    case 'SET_PAGE':\r\n      return {\r\n        ...state,\r\n        page: action.payload\r\n      };\r\n    case 'SET_ROWS_PER_PAGE':\r\n      return {\r\n        ...state,\r\n        rowsPerPage: action.payload,\r\n        page: 0 // Reset to first page when changing rows per page\r\n      };\r\n    case 'SET_SEARCH_QUERY':\r\n      return {\r\n        ...state,\r\n        searchQuery: action.payload\r\n      };\r\n    case 'SET_STATUS_FILTER':\r\n      return {\r\n        ...state,\r\n        statusFilter: action.payload\r\n      };\r\n    case 'SET_SORT_BY':\r\n      return {\r\n        ...state,\r\n        sortBy: action.payload\r\n      };\r\n    case 'SET_SORT_DIRECTION':\r\n      return {\r\n        ...state,\r\n        sortDirection: action.payload\r\n      };\r\n    case 'SET_ERROR':\r\n      return {\r\n        ...state,\r\n        error: action.payload\r\n      };\r\n    case 'SET_DELETE_DIALOG_OPEN':\r\n      return {\r\n        ...state,\r\n        deleteDialogOpen: action.payload\r\n      };\r\n    case 'SET_SELECTED_ORDER_ID':\r\n      return {\r\n        ...state,\r\n        selectedOrderId: action.payload\r\n      };\r\n    case 'SET_IS_SEARCHING':\r\n      return {\r\n        ...state,\r\n        isSearching: action.payload\r\n      };\r\n    case 'SET_SEARCH_ABORT_CONTROLLER':\r\n      return {\r\n        ...state,\r\n        searchAbortController: action.payload\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nconst OrderList: React.FC<OrderListProps> = ({\r\n  companyId,\r\n  onViewOrder,\r\n  onEditOrder,\r\n  onDeleteOrder,\r\n  allowEdit = true,\r\n  allowDelete = true,\r\n}) => {\r\n  // Use the reducer for state management\r\n  const [state, dispatch] = useReducer(orderListReducer, initialState);\r\n    // Memoize fetchOrders to prevent unnecessary recreations\r\n  const fetchOrders = useCallback(async (isSearchRequest = false) => {\r\n    if (!companyId) return;\r\n    \r\n    dispatch({ type: 'SET_LOADING', payload: true });\r\n    dispatch({ type: 'SET_ERROR', payload: null });\r\n\r\n    try {\r\n      const params = {\r\n        page: state.page + 1,\r\n        limit: state.rowsPerPage,\r\n        status: state.statusFilter !== 'all' ? state.statusFilter : undefined,\r\n        paymentStatus: undefined,\r\n        fromDate: undefined,\r\n        toDate: undefined\r\n      };\r\n\r\n      if (isSearchRequest && state.isSearching) {\r\n        return;\r\n      }\r\n\r\n      if (isSearchRequest) {\r\n        dispatch({ type: 'SET_IS_SEARCHING', payload: true });\r\n      }\r\n\r\n      const response = await orderService.getOrders(params);\r\n      \r\n      // Safely handle the response based on the API structure\r\n      const orders = Array.isArray(response) ? response : (response as any).orders || [];\r\n      const totalItems = typeof (response as any).count === 'number' ? (response as any).count : orders.length;\r\n      \r\n      dispatch({ \r\n        type: 'SET_ORDERS', \r\n        payload: { \r\n          orders: orders,\r\n          totalCount: totalItems\r\n        }\r\n      });\r\n      dispatch({ type: 'SET_ERROR', payload: null });\r\n    } catch (err: any) {\r\n      dispatch({ type: 'SET_ERROR', payload: err.message || 'Failed to fetch orders' });\r\n      console.error('Error fetching orders:', err);\r\n      dispatch({ \r\n        type: 'SET_ORDERS', \r\n        payload: { \r\n          orders: [],\r\n          totalCount: 0\r\n        }\r\n      });\r\n    } finally {\r\n      dispatch({ type: 'SET_LOADING', payload: false });\r\n      if (isSearchRequest) {\r\n        dispatch({ type: 'SET_IS_SEARCHING', payload: false });\r\n      }\r\n    }\r\n  }, [companyId, state.page, state.rowsPerPage, state.statusFilter, state.isSearching]);\r\n  // Load orders on initial render and when dependencies change\r\n  useEffect(() => {\r\n    if (!state.isSearching) { // Only fetch if not currently searching\r\n      fetchOrders();\r\n    }\r\n  }, [fetchOrders]);\r\n\r\n  // Debounce search query with cleanup\r\n  useEffect(() => {\r\n    if (!state.searchQuery && state.page !== 0) {\r\n      dispatch({ type: 'SET_PAGE', payload: 0 });\r\n      return;\r\n    }\r\n\r\n    const timer = setTimeout(() => {\r\n      if (state.searchQuery) {\r\n        fetchOrders(true);\r\n      }\r\n    }, 500);\r\n\r\n    return () => {\r\n      clearTimeout(timer);\r\n    };\r\n  }, [state.searchQuery, state.page, fetchOrders]);\r\n  // Reset pagination when filters change\r\n  useEffect(() => {\r\n    if (state.page !== 0) {\r\n      dispatch({ type: 'SET_PAGE', payload: 0 });\r\n    }\r\n  }, [state.statusFilter, state.sortBy, state.sortDirection]);\r\n  // Handle page change\r\n  const handleChangePage = (_: unknown, newPage: number) => {\r\n    dispatch({ type: 'SET_PAGE', payload: newPage });\r\n  };\r\n\r\n  // Handle rows per page change with reset\r\n  const handleChangeRowsPerPage = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    const newRowsPerPage = parseInt(event.target.value, 10);\r\n    dispatch({ type: 'SET_ROWS_PER_PAGE', payload: newRowsPerPage });\r\n    // Page reset is handled in the reducer\r\n  };\r\n\r\n  // Handle status filter change with validation\r\n  const handleStatusFilterChange = (event: SelectChangeEvent<string>) => {\r\n    const newStatus = event.target.value;\r\n    if (newStatus === state.statusFilter) return; // Prevent unnecessary updates\r\n    \r\n    dispatch({ type: 'SET_STATUS_FILTER', payload: newStatus });\r\n    // Page reset is handled by the useEffect\r\n  };\r\n\r\n  // Handle sort change with validation\r\n  const handleSortChange = (event: SelectChangeEvent<string>) => {\r\n    const newSortBy = event.target.value;\r\n    if (newSortBy === state.sortBy) return; // Prevent unnecessary updates\r\n    \r\n    dispatch({ type: 'SET_SORT_BY', payload: newSortBy });\r\n    // Page reset is handled by the useEffect\r\n  };\r\n\r\n  // Optimized sort direction change\r\n  const handleSortDirectionChange = () => {\r\n    dispatch({ \r\n      type: 'SET_SORT_DIRECTION', \r\n      payload: state.sortDirection === 'asc' ? 'desc' : 'asc' \r\n    });\r\n    // Page reset is handled by the useEffect\r\n  };\r\n  // Enhanced delete handling\r\n  const handleDeleteClick = useCallback((orderId: string) => {\r\n    dispatch({ type: 'SET_SELECTED_ORDER_ID', payload: orderId });\r\n    dispatch({ type: 'SET_DELETE_DIALOG_OPEN', payload: true });\r\n  }, []);\r\n\r\n  // Handle confirm delete with proper cleanup\r\n  const handleConfirmDelete = async () => {\r\n    if (!state.selectedOrderId) return;\r\n    \r\n    dispatch({ type: 'SET_LOADING', payload: true });\r\n    dispatch({ type: 'SET_ERROR', payload: null });\r\n    \r\n    try {\r\n      await orderService.deleteOrder(state.selectedOrderId);\r\n      \r\n      // Update local state optimistically\r\n      dispatch({ \r\n        type: 'SET_ORDERS', \r\n        payload: { \r\n          orders: state.orders.filter(order => order.id !== state.selectedOrderId),\r\n          totalCount: Math.max(0, state.totalCount - 1)\r\n        }\r\n      });\r\n      \r\n      // Notify parent component\r\n      if (onDeleteOrder && state.selectedOrderId) {\r\n        onDeleteOrder(state.selectedOrderId);\r\n      }\r\n\r\n    } catch (err: any) {\r\n      dispatch({ type: 'SET_ERROR', payload: err.message || 'Failed to delete order' });\r\n      console.error('Error deleting order:', err);\r\n      \r\n      // Refresh orders to ensure consistent state\r\n      fetchOrders();\r\n    } finally {\r\n      dispatch({ type: 'SET_DELETE_DIALOG_OPEN', payload: false });\r\n      dispatch({ type: 'SET_SELECTED_ORDER_ID', payload: null });\r\n      dispatch({ type: 'SET_LOADING', payload: false });\r\n    }\r\n  };\r\n  // Handle search input changes with cleanup\r\n  const handleSearchChange = useCallback((event: React.ChangeEvent<HTMLInputElement>) => {\r\n    const newValue = event.target.value;\r\n    \r\n    // Cancel any pending search request\r\n    if (state.searchAbortController) {\r\n      state.searchAbortController.abort();\r\n    }\r\n\r\n    // Create new abort controller for this search\r\n    const newController = new AbortController();\r\n    dispatch({ type: 'SET_SEARCH_ABORT_CONTROLLER', payload: newController });\r\n    \r\n    dispatch({ type: 'SET_SEARCH_QUERY', payload: newValue });\r\n\r\n    if (!newValue) {\r\n      // Clear search results immediately when search is emptied\r\n      dispatch({ \r\n        type: 'SET_ORDERS', \r\n        payload: { \r\n          orders: [],\r\n          totalCount: 0\r\n        }\r\n      });\r\n      fetchOrders(); // Fetch default orders\r\n    }\r\n  }, [state.searchAbortController, fetchOrders]);\r\n  // Cleanup abort controller on unmount\r\n  useEffect(() => {\r\n    return () => {\r\n      if (state.searchAbortController) {\r\n        state.searchAbortController.abort();\r\n      }\r\n    };\r\n  }, [state.searchAbortController]);\r\n  // Render table skeleton while loading\r\n  const renderSkeleton = () => (\r\n    <TableBody>\r\n      {Array.from(new Array(state.rowsPerPage)).map((_, index) => (\r\n        <TableRow key={index}>\r\n          <TableCell><Skeleton animation=\"wave\" /></TableCell>\r\n          <TableCell><Skeleton animation=\"wave\" /></TableCell>\r\n          <TableCell><Skeleton animation=\"wave\" /></TableCell>\r\n          <TableCell><Skeleton animation=\"wave\" /></TableCell>\r\n          <TableCell><Skeleton animation=\"wave\" /></TableCell>\r\n          <TableCell><Skeleton animation=\"wave\" /></TableCell>\r\n          <TableCell><Skeleton animation=\"wave\" width={100} /></TableCell>\r\n        </TableRow>\r\n      ))}\r\n    </TableBody>\r\n  );\r\n\r\n  return (\r\n    <Box>\r\n      <Paper elevation={0} sx={{ p: 3, mb: 3 }}>\r\n        <Box sx={{ display: 'flex', flexDirection: 'row', gap: 2 }}>\r\n          <Box sx={{ flex: 1 }}>\r\n            <Typography variant=\"h6\" component=\"h2\">\r\n              Orders\r\n            </Typography>\r\n          </Box>\r\n          <Box sx={{ flex: 2 }}>            <TextField\r\n              placeholder=\"Search orders...\"\r\n              size=\"small\"\r\n              fullWidth\r\n              value={state.searchQuery}\r\n              onChange={handleSearchChange}\r\n              InputProps={{\r\n                startAdornment: (\r\n                  <InputAdornment position=\"start\">\r\n                    <SearchIcon />\r\n                  </InputAdornment>\r\n                ),\r\n              }}\r\n            />\r\n          </Box>\r\n        </Box>\r\n        \r\n        <Box sx={{ display: 'flex', gap: 2, mt: 2 }}>\r\n          <FormControl size=\"small\" sx={{ minWidth: 120 }}>\r\n            <InputLabel id=\"status-filter-label\">Status</InputLabel>            <Select\r\n              labelId=\"status-filter-label\"\r\n              value={state.statusFilter}\r\n              onChange={handleStatusFilterChange}\r\n              label=\"Status\"\r\n            >\r\n              <MenuItem value=\"all\">All Statuses</MenuItem>\r\n              {Object.entries(STATUS_COLORS).map(([value, { label }]) => (\r\n                <MenuItem key={value} value={value}>{label}</MenuItem>\r\n              ))}\r\n            </Select>\r\n          </FormControl>\r\n          \r\n          <FormControl size=\"small\" sx={{ minWidth: 150 }}>\r\n            <InputLabel id=\"sort-by-label\">Sort By</InputLabel>            <Select\r\n              labelId=\"sort-by-label\"\r\n              value={state.sortBy}\r\n              onChange={handleSortChange}\r\n              label=\"Sort By\"\r\n            >\r\n              <MenuItem value=\"created_at\">Date</MenuItem>\r\n              <MenuItem value=\"order_number\">Order Number</MenuItem>\r\n              <MenuItem value=\"customer.name\">Customer Name</MenuItem>\r\n              <MenuItem value=\"status\">Status</MenuItem>\r\n              <MenuItem value=\"total\">Total</MenuItem>\r\n            </Select>\r\n          </FormControl>\r\n          \r\n          <Button\r\n            variant=\"outlined\"\r\n            size=\"small\"\r\n            startIcon={<FilterListIcon />}\r\n            onClick={handleSortDirectionChange}\r\n            sx={{ minWidth: 120 }}\r\n          >\r\n            {state.sortDirection === 'asc' ? 'Ascending' : 'Descending'}\r\n          </Button>\r\n        </Box>\r\n      </Paper>\r\n        {state.error && (\r\n        <Typography color=\"error\" sx={{ mb: 2 }}>\r\n          Error: {state.error}\r\n        </Typography>\r\n      )}\r\n      \r\n      <TableContainer component={Paper}>\r\n        <Table>\r\n          <TableHead>\r\n            <TableRow>\r\n              <TableCell>Order #</TableCell>\r\n              <TableCell>Customer</TableCell>\r\n              <TableCell>Date</TableCell>\r\n              <TableCell>Status</TableCell>\r\n              <TableCell align=\"right\">Items</TableCell>\r\n              <TableCell align=\"right\">Total</TableCell>\r\n              <TableCell align=\"right\">Actions</TableCell>\r\n            </TableRow>\r\n          </TableHead>\r\n          \r\n          {state.loading ? (\r\n            renderSkeleton()\r\n          ) : (\r\n            <TableBody>\r\n              {state.orders.length === 0 ? (\r\n                <TableRow>\r\n                  <TableCell colSpan={7} align=\"center\" sx={{ py: 3 }}>\r\n                    <Typography color=\"text.secondary\">\r\n                      No orders found\r\n                    </Typography>\r\n                  </TableCell>\r\n                </TableRow>\r\n              ) : (\r\n                state.orders.map((order: Order) => {\r\n                  const statusConfig = STATUS_COLORS[order.status] || STATUS_COLORS.pending;\r\n                  \r\n                  return (\r\n                    <TableRow key={order.id} hover>\r\n                      <TableCell>{order.order_number}</TableCell>\r\n                      <TableCell>\r\n                        <Typography variant=\"body2\">{order.customer.name}</Typography>\r\n                        <Typography variant=\"caption\" color=\"text.secondary\">\r\n                          {order.customer.email}\r\n                        </Typography>\r\n                      </TableCell>\r\n                      <TableCell>{formatDate(order.created_at)}</TableCell>\r\n                      <TableCell>\r\n                        <Chip \r\n                          label={statusConfig.label}\r\n                          color={statusConfig.color as any}\r\n                          size=\"small\"\r\n                        />\r\n                      </TableCell>\r\n                      <TableCell align=\"right\">{order.items_count}</TableCell>\r\n                      <TableCell align=\"right\">{formatCurrency(order.total)}</TableCell>\r\n                      <TableCell align=\"right\">\r\n                        <Box sx={{ display: 'flex', justifyContent: 'flex-end' }}>\r\n                          {onViewOrder && (\r\n                            <IconButton \r\n                              size=\"small\"\r\n                              onClick={() => onViewOrder(order.id)}\r\n                              color=\"primary\"\r\n                            >\r\n                              <VisibilityIcon fontSize=\"small\" />\r\n                            </IconButton>\r\n                          )}\r\n                          \r\n                          {allowEdit && onEditOrder && (\r\n                            <IconButton \r\n                              size=\"small\"\r\n                              onClick={() => onEditOrder(order.id)}\r\n                              color=\"secondary\"\r\n                            >\r\n                              <EditIcon fontSize=\"small\" />\r\n                            </IconButton>\r\n                          )}\r\n                          \r\n                          {allowDelete && onDeleteOrder && (\r\n                            <IconButton \r\n                              size=\"small\"\r\n                              onClick={() => handleDeleteClick(order.id)}\r\n                              color=\"error\"\r\n                            >\r\n                              <DeleteIcon fontSize=\"small\" />\r\n                            </IconButton>\r\n                          )}\r\n                        </Box>\r\n                      </TableCell>\r\n                    </TableRow>\r\n                  );\r\n                })\r\n              )}\r\n            </TableBody>\r\n          )}\r\n        </Table>\r\n      </TableContainer>\r\n        <TablePagination\r\n        component=\"div\"\r\n        count={state.totalCount}\r\n        page={state.page}\r\n        onPageChange={handleChangePage}\r\n        rowsPerPage={state.rowsPerPage}\r\n        onRowsPerPageChange={handleChangeRowsPerPage}\r\n        rowsPerPageOptions={[5, 10, 25, 50]}\r\n      />\r\n      \r\n      {/* Delete Confirmation Dialog */}\r\n      <Dialog\r\n        open={state.deleteDialogOpen}\r\n        onClose={() => dispatch({ type: 'SET_DELETE_DIALOG_OPEN', payload: false })}\r\n      >\r\n        <DialogTitle>Confirm Delete</DialogTitle>\r\n        <DialogContent>\r\n          <DialogContentText>\r\n            Are you sure you want to delete this order? This action cannot be undone.\r\n          </DialogContentText>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={() => dispatch({ type: 'SET_DELETE_DIALOG_OPEN', payload: false })}>Cancel</Button>\r\n          <Button onClick={handleConfirmDelete} color=\"error\" autoFocus>\r\n            Delete\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default OrderList;","usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"d:\\All python project\\Tubex\\Frontend\\app\\src\\components\\whitelabel\\products\\ProductForm.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'categories' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":129,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":129,"endColumn":20},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has missing dependencies: 'fetchCategories' and 'fetchProductDetails'. Either include them or remove the dependency array.","line":164,"column":6,"nodeType":"ArrayExpression","endLine":164,"endColumn":28,"suggestions":[{"desc":"Update the dependencies array to be: [productId, companyId, fetchCategories, fetchProductDetails]","fix":{"range":[3761,3783],"text":"[productId, companyId, fetchCategories, fetchProductDetails]"}}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'index' is defined but never used. Allowed unused args must match /^_/u.","line":845,"column":41,"nodeType":"Identifier","messageId":"unusedVar","endLine":845,"endColumn":54}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\r\nimport { \r\n  TextField, \r\n  Box, \r\n  FormControl,\r\n  InputLabel,\r\n  Select,\r\n  MenuItem,\r\n  FormHelperText,\r\n  InputAdornment,\r\n  Button,\r\n  Typography,\r\n  Divider,\r\n  Tabs,\r\n  Tab,\r\n  IconButton,\r\n  Stack,\r\n  SelectChangeEvent,\r\n  Tooltip,\r\n} from '@mui/material';\r\nimport AddPhotoAlternateIcon from '@mui/icons-material/AddPhotoAlternate';\r\nimport DeleteOutlineIcon from '@mui/icons-material/DeleteOutline';\r\nimport HelpOutlineIcon from '@mui/icons-material/HelpOutline';\r\nimport FormContainer from '../FormContainer';\r\nimport FormButtons from '../FormButtons';\r\nimport ProductPriceHistory from './ProductPriceHistory';\r\nimport { productService, companyService } from '../../../services/api';\r\n\r\n// Types\r\ninterface TabPanelProps {\r\n  children?: React.ReactNode;\r\n  index: number;\r\n  value: number;\r\n  'aria-labelledby': string;\r\n}\r\n\r\ninterface Category {\r\n  id: string;\r\n  name: string;\r\n}\r\n\r\ninterface Supplier {\r\n  id: string;\r\n  name: string;\r\n  type: 'supplier';\r\n}\r\n\r\ninterface ProductFormData {\r\n  name: string;\r\n  description: string;\r\n  price: string;\r\n  cost: string;\r\n  supplierId: string;\r\n  status: 'active' | 'inactive' | 'out_of_stock' | 'discontinued';\r\n  weight: string;\r\n  dimensions: {\r\n    length: string;\r\n    width: string;\r\n    height: string;\r\n  };\r\n  inventory: {\r\n    quantity: string;\r\n    lowStockThreshold: string;\r\n  };\r\n  images: string[];\r\n  specifications: Record<string, string>;\r\n  computedFields?: {\r\n    margin: number;\r\n    marginPercentage: number;\r\n  };\r\n}\r\n\r\ninterface ProductFormProps {\r\n  productId?: string;\r\n  companyId: string;\r\n  onSave?: (product: any) => void;\r\n  onCancel?: () => void;\r\n}\r\n\r\ninterface ProductApiInput {\r\n  name: string;\r\n  description: string;\r\n  base_price: number;\r\n  unit: string;\r\n  supplier_id: string;\r\n  status?: 'active' | 'inactive' | 'out_of_stock';\r\n  sku?: string;\r\n  dimensions?: {\r\n    length?: number;\r\n    width?: number;\r\n    height?: number;\r\n  };\r\n  inventory?: {\r\n    quantity?: number;\r\n    lowStockThreshold?: number;\r\n  };\r\n  images?: string[];\r\n  specifications?: Record<string, string>;\r\n}\r\n\r\nfunction TabPanel({ children, value, index, 'aria-labelledby': ariaLabelledBy, ...other }: TabPanelProps) {\r\n  const isActive = value === index;\r\n  \r\n  return (\r\n    <div\r\n      role=\"tabpanel\"\r\n      hidden={!isActive}\r\n      id={`product-tabpanel-${index}`}\r\n      aria-labelledby={ariaLabelledBy}\r\n      {...other}\r\n    >\r\n      {isActive && (\r\n        <Box sx={{ p: 2 }}>\r\n          {children}\r\n        </Box>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nconst ProductForm: React.FC<ProductFormProps> = ({\r\n  productId,\r\n  companyId,\r\n  onSave,\r\n  onCancel,\r\n}) => {\r\n  const isEditMode = !!productId;\r\n    const [tabValue, setTabValue] = useState(0);\r\n  const [categories, setCategories] = useState<Category[]>([]);\r\n  const [suppliers, setSuppliers] = useState<Supplier[]>([]);\r\n  const [formData, setFormData] = useState<ProductFormData>({\r\n    name: '',\r\n    description: '',\r\n    price: '',\r\n    cost: '',\r\n    supplierId: '',\r\n    status: 'active',\r\n    weight: '',\r\n    dimensions: {\r\n      length: '',\r\n      width: '',\r\n      height: '',\r\n    },\r\n    inventory: {\r\n      quantity: '',\r\n      lowStockThreshold: '',\r\n    },\r\n    images: [],\r\n    specifications: {},\r\n  });\r\n  \r\n  const [errors, setErrors] = useState<Record<string, string>>({});\r\n  const [loading, setLoading] = useState(false);\r\n  const [fetchLoading, setFetchLoading] = useState(false);  const [apiError, setApiError] = useState<string | null>(null);\r\n  const [specKeys, setSpecKeys] = useState<string[]>([]);\r\n\r\n  useEffect(() => {\r\n    fetchCategories();\r\n    fetchSuppliers();\r\n    \r\n    if (productId) {\r\n      fetchProductDetails();\r\n    }\r\n  }, [productId, companyId]);\r\n    const fetchCategories = async () => {\r\n    try {\r\n      const response = await productService.getCategories(companyId);\r\n      setCategories(response.data || []);\r\n    } catch (err: any) {\r\n      console.error('Error fetching categories:', err);\r\n    }\r\n  };\r\n  \r\n  const fetchSuppliers = async () => {\r\n    try {\r\n      const response = await companyService.getSuppliers();\r\n      const suppliersList = response.data || [];\r\n      setSuppliers(suppliersList\r\n        .filter(supplier => supplier.type === 'supplier')\r\n        .map(supplier => ({\r\n          id: supplier.id,\r\n          name: supplier.name,\r\n          type: supplier.type as 'supplier' // Type assertion to ensure it's treated as 'supplier'\r\n        }))\r\n      );\r\n    } catch (err: any) {\r\n      console.error('Error fetching suppliers:', err);\r\n    }\r\n  };\r\n    // Updated the fetchProductDetails function to align with the Product type from productService\r\n  const fetchProductDetails = async () => {\r\n    if (!productId) return;\r\n\r\n    setFetchLoading(true);\r\n    setApiError(null);\r\n\r\n    try {\r\n      const productResponse = await productService.getProductById(productId);\r\n      const product = productResponse.data || productResponse; // Handle different response structures\r\n\r\n      // Map API response to form data\r\n      setFormData({\r\n        name: product.name || '',\r\n        description: product.description || '',\r\n        price: product.base_price?.toString() || '',\r\n        cost: '', // Cost is not part of the Product interface\r\n        supplierId: product.supplier_id || '',\r\n        status: product.status || 'active',\r\n        weight: '', // Weight is not directly in Product interface\r\n        dimensions: {\r\n          length: product.dimensions?.length?.toString() || '',\r\n          width: product.dimensions?.width?.toString() || '',\r\n          height: product.dimensions?.height?.toString() || '',\r\n        },\r\n        inventory: {\r\n          quantity: product.inventory?.quantity?.toString() || '',\r\n          lowStockThreshold: product.inventory?.lowStockThreshold?.toString() || '',\r\n        },\r\n        images: product.images || [],\r\n        specifications: product.specifications || {},\r\n      });\r\n\r\n      // Set specification keys\r\n      setSpecKeys(Object.keys(product.specifications || {}));\r\n    } catch (err: any) {      setApiError(err.message || 'Failed to load product details');\r\n      console.error('Error fetching product:', err);\r\n    } finally {\r\n      setFetchLoading(false);\r\n    }\r\n  };  const validateForm = () => {\r\n    const newErrors: Record<string, string> = {};\r\n    \r\n    // Required fields according to ProductCreateInput in productService\r\n    if (!formData.name.trim()) {\r\n      newErrors.name = 'Product name is required';\r\n    }\r\n    \r\n    if (!formData.price.trim()) {\r\n      newErrors.price = 'Price is required';\r\n    } else if (isNaN(parseFloat(formData.price)) || parseFloat(formData.price) < 0) {\r\n      newErrors.price = 'Price must be a valid positive number';\r\n    }    if (!formData.supplierId || !suppliers.some(s => s.id === formData.supplierId)) {\r\n      newErrors.supplierId = 'Please select a valid supplier';\r\n    }\r\n    \r\n    // Optional fields validation\r\n    if (formData.cost.trim() && (isNaN(parseFloat(formData.cost)) || parseFloat(formData.cost) < 0)) {\r\n      newErrors.cost = 'Cost must be a valid positive number';\r\n    }\r\n    \r\n    if (formData.inventory.quantity.trim() && (isNaN(parseInt(formData.inventory.quantity)) || parseInt(formData.inventory.quantity) < 0)) {\r\n      newErrors.quantity = 'Quantity must be a valid non-negative integer';\r\n    }\r\n    \r\n    if (formData.inventory.lowStockThreshold.trim() && (isNaN(parseInt(formData.inventory.lowStockThreshold)) || parseInt(formData.inventory.lowStockThreshold) < 0)) {\r\n      newErrors.lowStockThreshold = 'Low stock threshold must be a valid non-negative integer';\r\n    }\r\n    \r\n    if (formData.weight.trim() && (isNaN(parseFloat(formData.weight)) || parseFloat(formData.weight) < 0)) {\r\n      newErrors.weight = 'Weight must be a valid positive number';\r\n    }\r\n    \r\n    // Validate dimensions\r\n    if (formData.dimensions.length.trim() && (isNaN(parseFloat(formData.dimensions.length)) || parseFloat(formData.dimensions.length) < 0)) {\r\n      newErrors.length = 'Length must be a valid positive number';\r\n    }\r\n    \r\n    if (formData.dimensions.width.trim() && (isNaN(parseFloat(formData.dimensions.width)) || parseFloat(formData.dimensions.width) < 0)) {\r\n      newErrors.width = 'Width must be a valid positive number';\r\n    }\r\n    \r\n    if (formData.dimensions.height.trim() && (isNaN(parseFloat(formData.dimensions.height)) || parseFloat(formData.dimensions.height) < 0)) {\r\n      newErrors.height = 'Height must be a valid positive number';\r\n    }\r\n    \r\n    setErrors(newErrors);\r\n    return Object.keys(newErrors).length === 0;\r\n  };\r\n  \r\n  const calculateMargins = (price: string, cost: string) => {\r\n    const priceNum = parseFloat(price);\r\n    const costNum = parseFloat(cost);\r\n    \r\n    if (!isNaN(priceNum) && !isNaN(costNum) && costNum > 0) {\r\n      const margin = priceNum - costNum;\r\n      const marginPercentage = (margin / costNum) * 100;\r\n      return {\r\n        margin: Number(margin.toFixed(2)),\r\n        marginPercentage: Number(marginPercentage.toFixed(2))\r\n      };\r\n    }\r\n    return {\r\n      margin: 0,\r\n      marginPercentage: 0\r\n    };\r\n  };\r\n\r\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement | { name?: string; value: unknown }>) => {\r\n    const { name, value } = e.target;\r\n    if (!name) return;\r\n    \r\n    // Handle nested properties\r\n    if (name.includes('.')) {\r\n      const [parent, child] = name.split('.');\r\n      setFormData((prev) => ({\r\n        ...prev,\r\n        [parent]: {\r\n          ...(typeof prev[parent as keyof typeof prev] === 'object' && prev[parent as keyof typeof prev] !== null\r\n            ? (prev[parent as keyof typeof prev] as Record<string, unknown>)\r\n            : {}),\r\n          [child]: value\r\n        }\r\n      }));\r\n    } else {      setFormData((prev) => {\r\n        const newData = {\r\n          ...prev,\r\n          [name]: value\r\n        };\r\n        \r\n        // Recalculate margins when price or cost changes\r\n        if (name === 'price' || name === 'cost') {\r\n          const newPrice = name === 'price' ? String(value) : newData.price;\r\n          const newCost = name === 'cost' ? String(value) : newData.cost;\r\n          const margins = calculateMargins(newPrice, newCost);\r\n          return {\r\n            ...newData,\r\n            computedFields: margins\r\n          };\r\n        }\r\n        \r\n        return newData;\r\n      });\r\n    }\r\n    \r\n    // Clear error for the field being edited\r\n    if (errors[name]) {\r\n      setErrors((prev) => ({\r\n        ...prev,\r\n        [name]: ''\r\n      }));\r\n    }\r\n  };\r\n  const handleSelectChange = (e: SelectChangeEvent<string>) => {\r\n    const { name = e.target.name, value } = e.target;\r\n    setFormData(prev => ({\r\n      ...prev,\r\n      [name]: value\r\n    }));\r\n    // Clear error if it exists\r\n    if (errors[name]) {\r\n      setErrors(prev => ({ ...prev, [name]: '' }));\r\n    }\r\n  };\r\n\r\n  const handleStatusChange = (e: SelectChangeEvent<string>) => {\r\n    setFormData(prev => ({\r\n      ...prev,\r\n      status: e.target.value as 'active' | 'inactive' | 'out_of_stock' | 'discontinued'\r\n    }));\r\n    // Clear error if it exists\r\n    if (errors.status) {\r\n      setErrors(prev => ({ ...prev, status: '' }));\r\n    }\r\n  };\r\n  \r\n  const handleSpecificationChange = (key: string, value: string) => {\r\n    setFormData((prev) => ({\r\n      ...prev,\r\n      specifications: {\r\n        ...prev.specifications,\r\n        [key]: value\r\n      }\r\n    }));\r\n  };\r\n  \r\n  const addSpecification = () => {\r\n    const newKey = `spec_${specKeys.length + 1}`;\r\n    setSpecKeys([...specKeys, newKey]);\r\n    \r\n    setFormData((prev) => ({\r\n      ...prev,\r\n      specifications: {\r\n        ...prev.specifications,\r\n        [newKey]: ''\r\n      }\r\n    }));\r\n  };\r\n  \r\n  const updateSpecKey = (oldKey: string, newKey: string) => {\r\n    if (newKey.trim() === '') return;\r\n    \r\n    // Update the key in specKeys array\r\n    const updatedSpecKeys = [...specKeys];\r\n    const index = updatedSpecKeys.indexOf(oldKey);\r\n    if (index !== -1) {\r\n      updatedSpecKeys[index] = newKey;\r\n      setSpecKeys(updatedSpecKeys);\r\n    }\r\n    \r\n    // Update the key in specifications object\r\n    setFormData((prev) => {\r\n      const { [oldKey]: value, ...rest } = prev.specifications;\r\n      return {\r\n        ...prev,\r\n        specifications: {\r\n          ...rest,\r\n          [newKey]: value\r\n        }\r\n      };\r\n    });\r\n  };\r\n  \r\n  const removeSpecification = (key: string) => {\r\n    setSpecKeys(specKeys.filter((k: string) => k !== key));\r\n    \r\n    setFormData((prev) => {\r\n      const { [key]: _, ...restSpecs } = prev.specifications;\r\n      return {\r\n        ...prev,\r\n        specifications: restSpecs\r\n      };\r\n    });\r\n  };\r\n  \r\n  const handleAddImage = (url: string) => {\r\n    if (url.trim() === '') return;\r\n    \r\n    setFormData((prev) => ({\r\n      ...prev,\r\n      images: [...prev.images, url]\r\n    }));\r\n  };\r\n  \r\n  const handleRemoveImage = (index: number) => {\r\n    setFormData((prev) => ({\r\n      ...prev,\r\n      images: prev.images.filter((_, i) => i !== index)\r\n    }));\r\n  };  const handleSubmit = async () => {\r\n    if (!validateForm()) return;\r\n    \r\n    setLoading(true);\r\n    setApiError(null);\r\n    \r\n    try {      // Prepare data for API according to ProductCreateInput or ProductUpdateInput from productService\r\n      const productData: ProductApiInput = {\r\n        name: formData.name,\r\n        description: formData.description,\r\n        base_price: parseFloat(formData.price),\r\n        supplier_id: formData.supplierId,\r\n        status: formData.status === 'discontinued' ? 'inactive' : formData.status,\r\n        unit: 'piece', // Default unit value\r\n      };\r\n      \r\n      // Add optional fields only if they have values\r\n      \r\n      if (formData.dimensions.length || formData.dimensions.width || formData.dimensions.height) {\r\n        productData.dimensions = {};\r\n        if (formData.dimensions.length) {\r\n          productData.dimensions.length = parseFloat(formData.dimensions.length);\r\n        }\r\n        if (formData.dimensions.width) {\r\n          productData.dimensions.width = parseFloat(formData.dimensions.width);\r\n        }\r\n        if (formData.dimensions.height) {\r\n          productData.dimensions.height = parseFloat(formData.dimensions.height);\r\n        }\r\n      }\r\n      \r\n      if (formData.inventory.quantity || formData.inventory.lowStockThreshold) {\r\n        productData.inventory = {};\r\n        if (formData.inventory.quantity) {\r\n          productData.inventory.quantity = parseInt(formData.inventory.quantity);\r\n        }\r\n        if (formData.inventory.lowStockThreshold) {\r\n          productData.inventory.lowStockThreshold = parseInt(formData.inventory.lowStockThreshold);\r\n        }\r\n      }\r\n      \r\n      if (formData.images.length > 0) {\r\n        productData.images = formData.images;\r\n      }\r\n      \r\n      if (Object.keys(formData.specifications).length > 0) {\r\n        productData.specifications = formData.specifications;\r\n      }\r\n      \r\n      let savedProduct;\r\n      \r\n      if (isEditMode && productId) {\r\n        savedProduct = await productService.updateProduct(productId, productData);\r\n      } else {\r\n        savedProduct = await productService.createProduct(productData);\r\n      }\r\n      \r\n      if (onSave) {\r\n        onSave(savedProduct);\r\n      }\r\n    } catch (err: any) {\r\n      setApiError(err.message || `Failed to ${isEditMode ? 'update' : 'create'} product`);\r\n      console.error(`Error ${isEditMode ? 'updating' : 'creating'} product:`, err);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n    const handleTabChange = (event: React.SyntheticEvent, newValue: number) => {\r\n    // Validate the current tab before moving to another\r\n    if (tabValue === 0) {\r\n      validateBasicInfo(formData, setErrors);\r\n    }\r\n    \r\n    setTabValue(newValue);\r\n  };\r\n\r\n  // Basic Info Tab Panel Content\r\n  const renderBasicInfoTab = () => (\r\n    <Box>\r\n      <FormSection \r\n        title=\"Basic Information\" \r\n        tooltip=\"Enter the fundamental details about your product\"\r\n      >\r\n        <Stack spacing={3}>\r\n          <Stack direction={{ xs: 'column', sm: 'row' }} spacing={2}>\r\n            <TextField\r\n              name=\"name\"\r\n              label=\"Product Name\"\r\n              fullWidth\r\n              required\r\n              value={formData.name}\r\n              onChange={handleChange}\r\n              error={!!errors.name}\r\n              helperText={errors.name || \"Enter a descriptive name for your product\"}\r\n              disabled={loading}\r\n              inputProps={{\r\n                'aria-describedby': 'product-name-helper-text'\r\n              }}\r\n            />\r\n          </Stack>\r\n\r\n          <TextField\r\n            name=\"description\"\r\n            label=\"Description\"\r\n            fullWidth\r\n            multiline\r\n            rows={4}\r\n            value={formData.description}\r\n            onChange={handleChange}\r\n            disabled={loading}\r\n            helperText=\"Provide a detailed description of the product's features and benefits\"\r\n            inputProps={{\r\n              'aria-describedby': 'product-description-helper-text'\r\n            }}\r\n          />\r\n        </Stack>\r\n      </FormSection>\r\n      \r\n      <FormSection \r\n        title=\"Pricing\" \r\n        tooltip=\"Set product pricing and view profit margins\"\r\n      >\r\n        <Stack spacing={3}>\r\n          <Stack direction={{ xs: 'column', sm: 'row' }} spacing={2}>\r\n            <TextField\r\n              name=\"price\"\r\n              label=\"Selling Price\"\r\n              fullWidth\r\n              required\r\n              type=\"number\"\r\n              inputProps={{ min: 0, step: 0.01, 'aria-describedby': 'price-helper-text' }}\r\n              value={formData.price}\r\n              onChange={handleChange}\r\n              error={!!errors.price}\r\n              helperText={errors.price || \"The price customers will pay for this product\"}\r\n              disabled={loading}\r\n              InputProps={{\r\n                startAdornment: <InputAdornment position=\"start\">$</InputAdornment>,\r\n              }}\r\n            />\r\n            <TextField\r\n              name=\"cost\"\r\n              label=\"Cost\"\r\n              fullWidth\r\n              type=\"number\"\r\n              inputProps={{ min: 0, step: 0.01, 'aria-describedby': 'cost-helper-text' }}\r\n              value={formData.cost}\r\n              onChange={handleChange}\r\n              error={!!errors.cost}\r\n              helperText={errors.cost || \"Your cost to acquire or produce this product\"}\r\n              disabled={loading}\r\n              InputProps={{\r\n                startAdornment: <InputAdornment position=\"start\">$</InputAdornment>,\r\n              }}\r\n            />\r\n          </Stack>\r\n\r\n          {formData.computedFields && (formData.price || formData.cost) && (\r\n            <Stack direction={{ xs: 'column', sm: 'row' }} spacing={2}>\r\n              <TextField\r\n                label=\"Profit Margin\"\r\n                fullWidth\r\n                value={`$${formData.computedFields.margin.toFixed(2)}`}\r\n                InputProps={{\r\n                  readOnly: true,\r\n                }}\r\n                disabled\r\n                helperText=\"The dollar amount of profit per unit\"\r\n              />\r\n              <TextField\r\n                label=\"Margin Percentage\"\r\n                fullWidth\r\n                value={`${formData.computedFields.marginPercentage.toFixed(2)}%`}\r\n                InputProps={{\r\n                  readOnly: true,\r\n                }}\r\n                disabled\r\n                helperText=\"Percentage of profit relative to cost\"\r\n              />\r\n            </Stack>\r\n          )}\r\n        </Stack>\r\n      </FormSection>\r\n      \r\n      <FormSection title=\"Product Classification\">\r\n        <Stack direction={{ xs: 'column', sm: 'row' }} spacing={2}>\r\n          <FormControl fullWidth required error={!!errors.supplierId}>\r\n            <InputLabel id=\"supplierId-label\">Supplier</InputLabel>\r\n            <Select\r\n              labelId=\"supplierId-label\"\r\n              name=\"supplierId\"\r\n              value={formData.supplierId}\r\n              onChange={handleSelectChange}\r\n              disabled={loading}\r\n              label=\"Supplier\"\r\n              inputProps={{\r\n                'aria-describedby': 'supplier-helper-text'\r\n              }}\r\n            >\r\n              <MenuItem value=\"\" disabled>Select a supplier</MenuItem>\r\n              {suppliers.map((supplier) => (\r\n                <MenuItem key={supplier.id} value={supplier.id}>\r\n                  {supplier.name}\r\n                </MenuItem>\r\n              ))}\r\n            </Select>\r\n            <FormHelperText id=\"supplier-helper-text\">\r\n              {errors.supplierId || \"Select the supplier you purchase this product from\"}\r\n            </FormHelperText>\r\n          </FormControl>\r\n\r\n          <FormControl fullWidth>\r\n            <InputLabel id=\"status-label\">Status</InputLabel>\r\n            <Select\r\n              labelId=\"status-label\"\r\n              name=\"status\"\r\n              value={formData.status}\r\n              onChange={handleStatusChange}\r\n              disabled={loading}\r\n              label=\"Status\"\r\n              inputProps={{\r\n                'aria-describedby': 'status-helper-text'\r\n              }}\r\n            >\r\n              <MenuItem value=\"active\">Active</MenuItem>\r\n              <MenuItem value=\"inactive\">Inactive</MenuItem>\r\n              <MenuItem value=\"out_of_stock\">Out of Stock</MenuItem>\r\n              <MenuItem value=\"discontinued\">Discontinued</MenuItem>\r\n            </Select>\r\n            <FormHelperText id=\"status-helper-text\">\r\n              Determines if the product is available for purchase\r\n            </FormHelperText>\r\n          </FormControl>\r\n        </Stack>\r\n      </FormSection>\r\n    </Box>\r\n  );\r\n\r\n  return (\r\n    <FormContainer \r\n      title={isEditMode ? 'Edit Product' : 'Add New Product'}\r\n      loading={fetchLoading}\r\n      error={apiError}\r\n      maxWidth=\"900px\"\r\n    >\r\n      <Box sx={{ width: '100%' }}>\r\n        <Box sx={{ borderBottom: 1, borderColor: 'divider', mb: 2 }}>\r\n          <Tabs \r\n            value={tabValue} \r\n            onChange={handleTabChange}\r\n            aria-label=\"product form tabs\"\r\n            variant=\"scrollable\"\r\n            scrollButtons=\"auto\"\r\n          >\r\n            <Tab \r\n              label=\"Basic Info\" \r\n              id=\"product-tab-0\" \r\n              aria-controls=\"product-tabpanel-0\"\r\n            />\r\n            <Tab \r\n              label=\"Inventory\" \r\n              id=\"product-tab-1\" \r\n              aria-controls=\"product-tabpanel-1\"\r\n            />\r\n            <Tab \r\n              label=\"Details\" \r\n              id=\"product-tab-2\" \r\n              aria-controls=\"product-tabpanel-2\"\r\n            />\r\n            <Tab \r\n              label=\"Images\" \r\n              id=\"product-tab-3\" \r\n              aria-controls=\"product-tabpanel-3\"\r\n            />\r\n            {isEditMode && (\r\n              <Tab \r\n                label=\"Price History\" \r\n                id=\"product-tab-4\" \r\n                aria-controls=\"product-tabpanel-4\"\r\n              />\r\n            )}\r\n          </Tabs>\r\n        </Box>\r\n\r\n        <TabPanel \r\n          value={tabValue} \r\n          index={0}\r\n          aria-labelledby=\"product-tab-0\"\r\n        >\r\n          {renderBasicInfoTab()}\r\n        </TabPanel>\r\n\r\n        {/* Inventory Tab */}\r\n        <TabPanel value={tabValue} index={1} aria-labelledby=\"product-tab-1\">\r\n          <Stack spacing={3}>\r\n            <Stack direction={{ xs: 'column', sm: 'row' }} spacing={2}>\r\n              <TextField\r\n                name=\"inventory.quantity\"\r\n                label=\"Current Stock\"\r\n                fullWidth\r\n                type=\"number\"\r\n                inputProps={{ min: 0, step: 1 }}\r\n                value={formData.inventory.quantity}\r\n                onChange={handleChange}\r\n                error={!!errors.quantity}\r\n                helperText={errors.quantity}\r\n                disabled={loading}\r\n              />\r\n              <TextField\r\n                name=\"inventory.lowStockThreshold\"\r\n                label=\"Low Stock Threshold\"\r\n                fullWidth\r\n                type=\"number\"\r\n                inputProps={{ min: 0, step: 1 }}\r\n                value={formData.inventory.lowStockThreshold}\r\n                onChange={handleChange}\r\n                error={!!errors.lowStockThreshold}\r\n                helperText={errors.lowStockThreshold || 'Send alert when stock falls below this level'}\r\n                disabled={loading}\r\n              />\r\n            </Stack>\r\n\r\n            <Typography variant=\"subtitle1\" gutterBottom>\r\n              Shipping Information\r\n            </Typography>\r\n\r\n            <TextField\r\n              name=\"weight\"\r\n              label=\"Weight (kg)\"\r\n              fullWidth\r\n              type=\"number\"\r\n              inputProps={{ min: 0, step: 0.01 }}\r\n              value={formData.weight}\r\n              onChange={handleChange}\r\n              error={!!errors.weight}\r\n              helperText={errors.weight}\r\n              disabled={loading}\r\n            />\r\n\r\n            <Typography variant=\"subtitle2\" gutterBottom>\r\n              Dimensions\r\n            </Typography>\r\n\r\n            <Stack direction={{ xs: 'column', sm: 'row' }} spacing={2}>\r\n              <TextField\r\n                name=\"dimensions.length\"\r\n                label=\"Length (cm)\"\r\n                fullWidth\r\n                type=\"number\"\r\n                inputProps={{ min: 0, step: 0.1 }}\r\n                value={formData.dimensions.length}\r\n                onChange={handleChange}\r\n                error={!!errors.length}\r\n                helperText={errors.length}\r\n                disabled={loading}\r\n              />\r\n              <TextField\r\n                name=\"dimensions.width\"\r\n                label=\"Width (cm)\"\r\n                fullWidth\r\n                type=\"number\"\r\n                inputProps={{ min: 0, step: 0.1 }}\r\n                value={formData.dimensions.width}\r\n                onChange={handleChange}\r\n                error={!!errors.width}\r\n                helperText={errors.width}\r\n                disabled={loading}\r\n              />\r\n              <TextField\r\n                name=\"dimensions.height\"\r\n                label=\"Height (cm)\"\r\n                fullWidth\r\n                type=\"number\"\r\n                inputProps={{ min: 0, step: 0.1 }}\r\n                value={formData.dimensions.height}\r\n                onChange={handleChange}\r\n                error={!!errors.height}\r\n                helperText={errors.height}\r\n                disabled={loading}\r\n              />\r\n            </Stack>\r\n          </Stack>\r\n        </TabPanel>\r\n\r\n        {/* Details Tab */}\r\n        <TabPanel value={tabValue} index={2} aria-labelledby=\"product-tab-2\">\r\n          <Box>\r\n            <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 2 }}>\r\n              <Typography variant=\"h6\">Specifications</Typography>\r\n              <Button \r\n                variant=\"outlined\" \r\n                onClick={addSpecification}\r\n                disabled={loading}\r\n              >\r\n                Add Specification\r\n              </Button>\r\n            </Box>\r\n            \r\n            <Divider sx={{ mb: 2 }} />\r\n            \r\n            {specKeys.length === 0 && (\r\n              <Typography color=\"text.secondary\" sx={{ my: 4, textAlign: 'center' }}>\r\n                No specifications added yet. Click \"Add Specification\" to add product details.\r\n              </Typography>\r\n            )}\r\n            \r\n            {specKeys.map((key: string, index: number) => (\r\n              <Stack direction={{ xs: 'column', sm: 'row' }} spacing={2} key={key} sx={{ mb: 2 }}>\r\n                <TextField\r\n                  fullWidth\r\n                  label=\"Specification Name\"\r\n                  value={key.startsWith('spec_') ? '' : key}\r\n                  onChange={(e) => updateSpecKey(key, e.target.value)}\r\n                  placeholder=\"e.g., Material, Color\"\r\n                  disabled={loading}\r\n                />\r\n                <TextField\r\n                  fullWidth\r\n                  label=\"Value\"\r\n                  value={formData.specifications[key] || ''}\r\n                  onChange={(e) => handleSpecificationChange(key, e.target.value)}\r\n                  disabled={loading}\r\n                />\r\n                <Box sx={{ display: 'flex', alignItems: 'center' }}>\r\n                  <IconButton \r\n                    onClick={() => removeSpecification(key)}\r\n                    color=\"error\"\r\n                    disabled={loading}\r\n                  >\r\n                    <DeleteOutlineIcon />\r\n                  </IconButton>\r\n                </Box>\r\n              </Stack>\r\n            ))}\r\n          </Box>\r\n        </TabPanel>\r\n\r\n        {/* Images Tab */}\r\n        <TabPanel value={tabValue} index={3} aria-labelledby=\"product-tab-3\">\r\n          <Box>\r\n            <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 2 }}>\r\n              <Typography variant=\"h6\">Product Images</Typography>\r\n              <Button \r\n                variant=\"outlined\" \r\n                startIcon={<AddPhotoAlternateIcon />}\r\n                disabled={loading}\r\n                onClick={() => {\r\n                  const url = prompt('Enter image URL:');\r\n                  if (url) handleAddImage(url);\r\n                }}\r\n              >\r\n                Add Image URL\r\n              </Button>\r\n            </Box>\r\n            \r\n            <Divider sx={{ mb: 2 }} />\r\n            \r\n            {formData.images.length === 0 && (\r\n              <Typography color=\"text.secondary\" sx={{ my: 4, textAlign: 'center' }}>\r\n                No images added yet. Click \"Add Image URL\" to add product images.\r\n              </Typography>\r\n            )}\r\n            \r\n            <Stack \r\n              direction=\"row\" \r\n              spacing={2} \r\n              sx={{ \r\n                flexWrap: 'wrap',\r\n                gap: 2,\r\n                '& > *': {\r\n                  flex: '1 1 calc(33.333% - 16px)',\r\n                  minWidth: '250px',\r\n                }\r\n              }}\r\n            >\r\n              {formData.images.map((image, index) => (\r\n                <Box\r\n                  key={index}\r\n                  sx={{ \r\n                    position: 'relative',\r\n                    height: 0, \r\n                    paddingTop: '100%', \r\n                    border: '1px solid #ddd',\r\n                    borderRadius: 1,\r\n                    overflow: 'hidden'\r\n                  }}\r\n                >\r\n                  <Box \r\n                    component=\"img\"\r\n                    src={image}\r\n                    alt={`Product image ${index + 1}`}\r\n                    sx={{ \r\n                      position: 'absolute',\r\n                      top: 0,\r\n                      left: 0,\r\n                      width: '100%',\r\n                      height: '100%',\r\n                      objectFit: 'contain',\r\n                    }}\r\n                    onError={(e: React.SyntheticEvent<HTMLImageElement>) => {\r\n                      e.currentTarget.src = 'https://via.placeholder.com/400?text=Image+Error';\r\n                    }}\r\n                  />\r\n                  <IconButton \r\n                    sx={{ \r\n                      position: 'absolute',\r\n                      top: 5,\r\n                      right: 5,\r\n                      backgroundColor: 'rgba(255,255,255,0.7)',\r\n                      '&:hover': {\r\n                        backgroundColor: 'rgba(255,255,255,0.9)',\r\n                      }\r\n                    }}\r\n                    size=\"small\"\r\n                    onClick={() => handleRemoveImage(index)}\r\n                    disabled={loading}\r\n                  >\r\n                    <DeleteOutlineIcon fontSize=\"small\" />\r\n                  </IconButton>\r\n                </Box>\r\n              ))}\r\n            </Stack>\r\n          </Box>\r\n        </TabPanel>\r\n\r\n        {/* Price History Tab - Only shown in edit mode */}\r\n        {isEditMode && (\r\n          <TabPanel value={tabValue} index={4} aria-labelledby=\"product-tab-4\">\r\n            <ProductPriceHistory \r\n              productId={productId!}\r\n              productName={formData.name}\r\n              currentPrice={parseFloat(formData.price)}\r\n              canUpdate={true}\r\n              onPriceUpdated={() => {\r\n                fetchProductDetails(); // Refresh product details after price update\r\n              }}\r\n            />\r\n          </TabPanel>\r\n        )}\r\n      </Box>\r\n      \r\n      <Box sx={{ mt: 4 }}>\r\n        <FormButtons\r\n          onCancel={onCancel}\r\n          onSubmit={handleSubmit}\r\n          loading={loading}\r\n          submitText={isEditMode ? 'Update Product' : 'Create Product'}\r\n        />\r\n      </Box>\r\n    </FormContainer>\r\n  );\r\n};\r\n\r\nexport default ProductForm;\r\n\r\n// New component for form section with tooltip support\r\ninterface FormSectionProps {\r\n  title: string;\r\n  tooltip?: string;\r\n  children: React.ReactNode;\r\n}\r\n\r\nconst FormSection: React.FC<FormSectionProps> = ({ title, tooltip, children }) => {\r\n  return (\r\n    <Box sx={{ mb: 4 }}>\r\n      <Box sx={{ display: 'flex', alignItems: 'center', mb: 2 }}>\r\n        <Typography variant=\"h6\" component=\"h3\">{title}</Typography>\r\n        {tooltip && (\r\n          <Tooltip title={tooltip} arrow>\r\n            <IconButton size=\"small\" sx={{ ml: 0.5 }}>\r\n              <HelpOutlineIcon fontSize=\"small\" />\r\n            </IconButton>\r\n          </Tooltip>\r\n        )}\r\n      </Box>\r\n      <Divider sx={{ mb: 2 }} />\r\n      {children}\r\n    </Box>\r\n  );\r\n};\r\n\r\n// Add this function to validate only the basic info tab\r\nconst validateBasicInfo = (formData: any, setErrors: React.Dispatch<React.SetStateAction<Record<string, string>>>, showErrors = true) => {\r\n  const newErrors: Record<string, string> = {};\r\n  \r\n  if (!formData.name.trim()) {\r\n    newErrors.name = 'Product name is required';\r\n  }\r\n  \r\n  if (!formData.price.trim()) {\r\n    newErrors.price = 'Price is required';\r\n  } else if (isNaN(parseFloat(formData.price)) || parseFloat(formData.price) < 0) {\r\n    newErrors.price = 'Price must be a valid positive number';\r\n  }\r\n  \r\n  if (!formData.supplierId) {\r\n    newErrors.supplierId = 'Please select a valid supplier';\r\n  }\r\n  \r\n  if (showErrors) {\r\n    setErrors(prev => ({ ...prev, ...newErrors }));\r\n  }\r\n  \r\n  return Object.keys(newErrors).length === 0;\r\n};\r\n\r\n","usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"d:\\All python project\\Tubex\\Frontend\\app\\src\\components\\whitelabel\\products\\ProductList.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'maxHeight' is defined but never used. Allowed unused args must match /^_/u.","line":36,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":36,"endColumn":12},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'buttonStyle' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":56,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":56,"endColumn":20},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'fetchCategories'. Either include it or remove the dependency array.","line":102,"column":6,"nodeType":"ArrayExpression","endLine":102,"endColumn":17,"suggestions":[{"desc":"Update the dependencies array to be: [companyId, fetchCategories]","fix":{"range":[3244,3255],"text":"[companyId, fetchCategories]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'fetchProducts'. Either include it or remove the dependency array.","line":106,"column":6,"nodeType":"ArrayExpression","endLine":106,"endColumn":70,"suggestions":[{"desc":"Update the dependencies array to be: [page, rowsPerPage, selectedCategory, selectedStatus, companyId, fetchProducts]","fix":{"range":[3309,3373],"text":"[page, rowsPerPage, selectedCategory, selectedStatus, companyId, fetchProducts]"}}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'formatCurrency' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":154,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":154,"endColumn":23},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'rowActions' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":210,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":210,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'bulkActions' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":246,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":246,"endColumn":20}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\r\nimport { \r\n  Box, \r\n  Typography, \r\n  TextField,\r\n  InputAdornment,\r\n  FormControl,\r\n  InputLabel,\r\n  Select,\r\n  MenuItem,\r\n  Chip,\r\n  SelectChangeEvent,\r\n  useTheme as useMuiTheme\r\n} from '@mui/material';\r\nimport SearchIcon from '@mui/icons-material/Search';\r\nimport AddIcon from '@mui/icons-material/Add';\r\nimport { useTheme } from '../../../contexts/ThemeContext';\r\nimport { productService } from '../../../services/api';\r\nimport WhiteLabelButton from '../WhiteLabelButton';\r\nimport DataTable from '../DataTable';\r\n\r\ninterface ProductListProps {\r\n  companyId?: string;\r\n  onAddProduct?: () => void;\r\n  onEditProduct?: (productId: string) => void;\r\n  maxHeight?: number | string;\r\n  hideActions?: boolean;\r\n  categoryFilter?: string;\r\n  statusFilter?: string;\r\n}\r\n\r\nconst ProductList: React.FC<ProductListProps> = ({\r\n  companyId,\r\n  onAddProduct,\r\n  onEditProduct,\r\n  maxHeight,\r\n  hideActions = false,\r\n  categoryFilter,\r\n  statusFilter,\r\n}) => {\r\n  const { theme: whitelabelTheme } = useTheme();\r\n  const muiTheme = useMuiTheme();\r\n\r\n  const [products, setProducts] = useState<any[]>([]);\r\n  const [categories, setCategories] = useState<any[]>([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState<string | null>(null);\r\n  const [searchTerm, setSearchTerm] = useState('');\r\n  const [selectedCategory, setSelectedCategory] = useState(categoryFilter || '');\r\n  const [selectedStatus, setSelectedStatus] = useState(statusFilter || '');\r\n  const [page, setPage] = useState(0);\r\n  const [rowsPerPage, setRowsPerPage] = useState(10);\r\n  const [totalCount, setTotalCount] = useState(0);\r\n\r\n  // Custom button style based on the whitelabel theme\r\n  const buttonStyle = {\r\n    backgroundColor: whitelabelTheme?.primaryColor || muiTheme.palette.primary.main,\r\n    color: '#fff',\r\n    borderRadius: whitelabelTheme?.buttonRadius !== undefined ? `${whitelabelTheme.buttonRadius}px` : undefined,\r\n    '&:hover': {\r\n      backgroundColor: whitelabelTheme?.primaryColor ? \r\n        `${whitelabelTheme.primaryColor}dd` : muiTheme.palette.primary.dark,\r\n    },\r\n  };\r\n\r\n  // Fetch product categories for filtering\r\n  const fetchCategories = async () => {\r\n    try {\r\n      if (companyId) {\r\n        const response = await productService.getCategories(companyId);\r\n        setCategories(response.data || []);\r\n      }\r\n    } catch (err: any) {\r\n      console.error('Error fetching categories:', err);\r\n      // Don't set error state here to avoid blocking the main products fetch\r\n    }\r\n  };\r\n\r\n  const fetchProducts = async () => {\r\n    setLoading(true);\r\n    setError(null);\r\n\r\n    try {\r\n      const response = await productService.getProducts({\r\n        page: page + 1, // API uses 1-based pagination\r\n        limit: rowsPerPage,\r\n        search: searchTerm,\r\n      });\r\n\r\n      setProducts(response.products || []); // Updated to use `response.products`\r\n      setTotalCount(response.pagination?.total || 0);\r\n    } catch (err: any) {\r\n      setError(err.message || 'Failed to fetch products');\r\n      console.error('Error fetching products:', err);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchCategories();\r\n  }, [companyId]);\r\n\r\n  useEffect(() => {\r\n    fetchProducts();\r\n  }, [page, rowsPerPage, selectedCategory, selectedStatus, companyId]);\r\n\r\n  const handleSearch = () => {\r\n    setPage(0); // Reset to first page when searching\r\n    fetchProducts();\r\n  };\r\n\r\n  const handleSearchKeyPress = (e: React.KeyboardEvent) => {\r\n    if (e.key === 'Enter') {\r\n      handleSearch();\r\n    }\r\n  };\r\n\r\n  const handleCategoryChange = (e: SelectChangeEvent) => {\r\n    setSelectedCategory(e.target.value as string);\r\n    setPage(0);\r\n  };\r\n\r\n  const handleStatusChange = (e: SelectChangeEvent) => {\r\n    setSelectedStatus(e.target.value as string);\r\n    setPage(0);\r\n  };\r\n\r\n  const getStatusChip = (status: string) => {\r\n    let color: 'default' | 'primary' | 'secondary' | 'error' | 'info' | 'success' | 'warning' = 'default';\r\n    switch (status.toLowerCase()) {\r\n      case 'active':\r\n        color = 'success';\r\n        break;\r\n      case 'inactive':\r\n        color = 'default';\r\n        break;\r\n      case 'out_of_stock':\r\n        color = 'error';\r\n        break;\r\n      case 'discontinued':\r\n        color = 'warning';\r\n        break;\r\n    }\r\n    \r\n    return <Chip \r\n      label={status.replace('_', ' ')} \r\n      color={color} \r\n      size=\"small\" \r\n      sx={{ textTransform: 'capitalize' }}\r\n    />;\r\n  };\r\n\r\n  const formatCurrency = (amount: number) => {\r\n    return new Intl.NumberFormat('en-US', {\r\n      style: 'currency',\r\n      currency: 'USD',\r\n    }).format(amount);\r\n  };\r\n\r\n  // Define the columns for the data table\r\n  const tableColumns = [\r\n    {\r\n      id: 'name',\r\n      label: 'Product Name',\r\n      type: 'text' as const,\r\n      sortable: true,\r\n      filterable: true,\r\n    },\r\n    {\r\n      id: 'sku',\r\n      label: 'SKU',\r\n      type: 'text' as const,\r\n      sortable: true,\r\n    },\r\n    {\r\n      id: 'category',\r\n      label: 'Category',\r\n      type: 'text' as const,\r\n      sortable: true,\r\n      filterable: true,\r\n      render: (value: any, row: any) => row.category?.name || 'Uncategorized',\r\n    },\r\n    {\r\n      id: 'base_price',\r\n      label: 'Price',\r\n      type: 'currency' as const,\r\n      sortable: true,\r\n      align: 'right' as const,\r\n    },\r\n    {\r\n      id: 'inventory',\r\n      label: 'Stock',\r\n      type: 'number' as const,\r\n      sortable: true,\r\n      align: 'right' as const,\r\n      render: (value: any, row: any) => row.inventory?.quantity || 0,\r\n    },\r\n    {\r\n      id: 'status',\r\n      label: 'Status',\r\n      type: 'status' as const,\r\n      sortable: true,\r\n      filterable: true,\r\n      render: (value: string) =>  getStatusChip(value),\r\n    },\r\n  ];\r\n\r\n  // Row actions similar to Odoo's action menu\r\n  const rowActions = [\r\n    {\r\n      id: 'edit',\r\n      label: 'Edit',\r\n      onClick: (row: any) => onEditProduct && onEditProduct(row.id),\r\n    },\r\n    {\r\n      id: 'view',\r\n      label: 'View Details',\r\n      onClick: (row: any) => onEditProduct && onEditProduct(row.id),\r\n    },\r\n    {\r\n      id: 'divider1',\r\n      label: '',\r\n      onClick: () => {},\r\n      divider: true,\r\n    },\r\n    {\r\n      id: 'deactivate',\r\n      label: 'Change Status',\r\n      onClick: (row: any) => {\r\n        // Handle status change\r\n        const newStatus = row.status === 'active' ? 'inactive' : 'active';\r\n        productService.updateProduct(row.id, { status: newStatus })\r\n          .then(() => {\r\n            fetchProducts();\r\n          })\r\n          .catch(err => {\r\n            console.error('Failed to update product status', err);\r\n            setError('Failed to update product status');\r\n          });\r\n      },\r\n    },\r\n  ];\r\n\r\n  // Bulk actions like in Odoo\r\n  const bulkActions = [\r\n    {\r\n      id: 'activate',\r\n      label: 'Activate',\r\n      onClick: (selectedRows: any[]) => {\r\n        // Handle bulk activate\r\n        console.log('Bulk activate', selectedRows);\r\n      },\r\n    },\r\n    {\r\n      id: 'deactivate',\r\n      label: 'Deactivate',\r\n      onClick: (selectedRows: any[]) => {\r\n        // Handle bulk deactivate\r\n        console.log('Bulk deactivate', selectedRows);\r\n      },\r\n    },\r\n  ];\r\n\r\n  // Filter panel in Odoo style\r\n  const filterPanel = (\r\n    <Box sx={{ display: 'flex', gap: 2, flexWrap: 'wrap', alignItems: 'center' }}>\r\n      <TextField\r\n        size=\"small\"\r\n        placeholder=\"Search products...\"\r\n        value={searchTerm}\r\n        onChange={(e) => setSearchTerm(e.target.value)}\r\n        onKeyPress={handleSearchKeyPress}\r\n        InputProps={{\r\n          startAdornment: (\r\n            <InputAdornment position=\"start\">\r\n              <SearchIcon />\r\n            </InputAdornment>\r\n          ),\r\n        }}\r\n        sx={{ flexGrow: 1, minWidth: '200px' }}\r\n      />\r\n      \r\n      <FormControl sx={{ minWidth: 150 }} size=\"small\">\r\n        <InputLabel id=\"category-filter-label\">Category</InputLabel>\r\n        <Select\r\n          labelId=\"category-filter-label\"\r\n          value={selectedCategory}\r\n          onChange={handleCategoryChange}\r\n          label=\"Category\"\r\n        >\r\n          <MenuItem value=\"\">All Categories</MenuItem>\r\n          {categories.map((category) => (\r\n            <MenuItem key={category.id} value={category.id}>\r\n              {category.name}\r\n            </MenuItem>\r\n          ))}\r\n        </Select>\r\n      </FormControl>\r\n      \r\n      <FormControl sx={{ minWidth: 120 }} size=\"small\">\r\n        <InputLabel id=\"status-filter-label\">Status</InputLabel>\r\n        <Select\r\n          labelId=\"status-filter-label\"\r\n          value={selectedStatus}\r\n          onChange={handleStatusChange}\r\n          label=\"Status\"\r\n        >\r\n          <MenuItem value=\"\">All Status</MenuItem>\r\n          <MenuItem value=\"active\">Active</MenuItem>\r\n          <MenuItem value=\"inactive\">Inactive</MenuItem>\r\n          <MenuItem value=\"out_of_stock\">Out of Stock</MenuItem>\r\n          <MenuItem value=\"discontinued\">Discontinued</MenuItem>\r\n        </Select>\r\n      </FormControl>\r\n    </Box>\r\n  );\r\n\r\n  return (\r\n    <Box>\r\n      {/* Page header with title and actions */}\r\n      <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 2 }}>\r\n        <Typography variant=\"h5\">Products</Typography>\r\n        {!hideActions && onAddProduct && (\r\n          <WhiteLabelButton\r\n            variant=\"contained\"\r\n            startIcon={<AddIcon />}\r\n            onClick={onAddProduct}\r\n          >\r\n            Add Product\r\n          </WhiteLabelButton>\r\n        )}\r\n      </Box>\r\n\r\n      {/* Filter panel */}\r\n      <Box sx={{ mb: 2 }}>\r\n        {filterPanel}\r\n      </Box>\r\n\r\n      <DataTable\r\n        columns={tableColumns.map(col => ({\r\n          id: col.id,\r\n          label: col.label,\r\n          align: col.align,\r\n          minWidth: col.id === 'name' ? 200 : undefined,\r\n          format: col.render || undefined\r\n        }))}\r\n        data={products}\r\n        loading={loading}\r\n        error={error}\r\n        emptyMessage=\"No products found\"\r\n        onRowClick={(row) => onEditProduct && onEditProduct(row.id)}\r\n        pagination={totalCount > 0 ? {\r\n          page,\r\n          totalCount,\r\n          rowsPerPage,\r\n          onPageChange: (newPage) => setPage(newPage),\r\n          onRowsPerPageChange: (newRowsPerPage) => {\r\n            setRowsPerPage(newRowsPerPage);\r\n            setPage(0);\r\n          }\r\n        } : undefined}\r\n      />\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default ProductList;","usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"d:\\All python project\\Tubex\\Frontend\\app\\src\\components\\whitelabel\\products\\ProductPriceHistory.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'InputLabel' is defined but never used. Allowed unused vars must match /^_/u.","line":22,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":22,"endColumn":13},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadPriceHistory'. Either include it or remove the dependency array.","line":62,"column":6,"nodeType":"ArrayExpression","endLine":62,"endColumn":23,"suggestions":[{"desc":"Update the dependencies array to be: [productId, page, loadPriceHistory]","fix":{"range":[1794,1811],"text":"[productId, page, loadPriceHistory]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\r\nimport { \r\n  Box, \r\n  Typography, \r\n  Paper, \r\n  CircularProgress,\r\n  Alert,\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableContainer,\r\n  TableHead,\r\n  TableRow,\r\n  Pagination,\r\n  Dialog,\r\n  DialogTitle,\r\n  DialogContent,\r\n  DialogActions,\r\n  Button,\r\n  TextField,\r\n  FormControl,\r\n  InputLabel,\r\n  FormHelperText,\r\n  InputAdornment,\r\n} from '@mui/material';\r\nimport { AdapterDateFns } from '@mui/x-date-pickers/AdapterDateFns';\r\nimport { LocalizationProvider } from '@mui/x-date-pickers/LocalizationProvider';\r\nimport { DatePicker } from '@mui/x-date-pickers/DatePicker';\r\nimport { format } from 'date-fns';\r\nimport { productService } from '../../../services/api';\r\nimport { useTheme } from '../../../contexts/ThemeContext';\r\n\r\ninterface ProductPriceHistoryProps {\r\n  productId: string;\r\n  productName?: string;\r\n  currentPrice?: number;\r\n  canUpdate?: boolean;\r\n  onPriceUpdated?: () => void;\r\n}\r\n\r\nconst ProductPriceHistory: React.FC<ProductPriceHistoryProps> = ({ \r\n  productId, \r\n  productName, \r\n  currentPrice, \r\n  canUpdate = false,\r\n  onPriceUpdated\r\n}) => {\r\n  const { theme: whitelabelTheme } = useTheme();\r\n  const [priceHistory, setPriceHistory] = useState<any[]>([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState<string | null>(null);\r\n  const [page, setPage] = useState(1);\r\n  const [totalPages, setTotalPages] = useState(1);\r\n  const [openPriceDialog, setOpenPriceDialog] = useState(false);\r\n  const [newPrice, setNewPrice] = useState('');\r\n  const [effectiveDate, setEffectiveDate] = useState<Date | null>(new Date());\r\n  const [priceError, setPriceError] = useState('');\r\n  const [submitting, setSubmitting] = useState(false);\r\n\r\n  useEffect(() => {\r\n    loadPriceHistory();\r\n  }, [productId, page]);\r\n\r\n  const loadPriceHistory = async () => {\r\n    if (!productId) return;\r\n    setLoading(true);\r\n    setError(null);\r\n\r\n    try {\r\n      const response = await productService.getPriceHistory(productId, { page, limit: 10 });\r\n      setPriceHistory(response.data || []);\r\n      \r\n      if (response.pagination) {\r\n        setTotalPages(response.pagination.totalPages || 1);\r\n      }\r\n    } catch (err: any) {\r\n      setError(err.message || 'Failed to load price history');\r\n      console.error('Error loading price history:', err);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const handlePageChange = (_event: React.ChangeEvent<unknown>, value: number) => {\r\n    setPage(value);\r\n  };\r\n\r\n  const handlePriceDialogOpen = () => {\r\n    setOpenPriceDialog(true);\r\n    setNewPrice(currentPrice ? currentPrice.toString() : '');\r\n    setEffectiveDate(new Date());\r\n    setPriceError('');\r\n  };\r\n\r\n  const handlePriceDialogClose = () => {\r\n    setOpenPriceDialog(false);\r\n  };\r\n\r\n  const validatePrice = (price: string): boolean => {\r\n    if (!price.trim()) {\r\n      setPriceError('Price is required');\r\n      return false;\r\n    }\r\n\r\n    const numericPrice = parseFloat(price);\r\n    if (isNaN(numericPrice) || numericPrice <= 0) {\r\n      setPriceError('Price must be a positive number');\r\n      return false;\r\n    }\r\n\r\n    setPriceError('');\r\n    return true;\r\n  };\r\n\r\n  const handlePriceUpdate = async () => {\r\n    if (!validatePrice(newPrice)) return;\r\n    \r\n    setSubmitting(true);\r\n    try {\r\n      const price = parseFloat(newPrice);\r\n      const effectiveDateStr = effectiveDate ? effectiveDate.toISOString() : new Date().toISOString();\r\n      \r\n      await productService.updateProductPrice(productId, price, effectiveDateStr);\r\n      \r\n      handlePriceDialogClose();\r\n      loadPriceHistory();\r\n      \r\n      if (onPriceUpdated) {\r\n        onPriceUpdated();\r\n      }\r\n    } catch (err: any) {\r\n      setPriceError(err.message || 'Failed to update price');\r\n      console.error('Error updating price:', err);\r\n    } finally {\r\n      setSubmitting(false);\r\n    }\r\n  };\r\n\r\n  const formatCurrency = (amount: number) => {\r\n    return new Intl.NumberFormat('en-US', {\r\n      style: 'currency',\r\n      currency: 'USD',\r\n    }).format(amount);\r\n  };\r\n\r\n  const formatDate = (dateString: string) => {\r\n    try {\r\n      return format(new Date(dateString), 'MMM dd, yyyy');\r\n    } catch (e) {\r\n      return dateString;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Box sx={{ mt: 2 }}>\r\n      <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 2 }}>\r\n        <Typography variant=\"h6\">Price History</Typography>\r\n        {canUpdate && (\r\n          <Button \r\n            variant=\"contained\" \r\n            color=\"primary\" \r\n            onClick={handlePriceDialogOpen}\r\n            sx={{\r\n              backgroundColor: whitelabelTheme?.primaryColor,\r\n              '&:hover': {\r\n                backgroundColor: whitelabelTheme?.primaryColor ? `${whitelabelTheme.primaryColor}dd` : undefined,\r\n              },\r\n            }}\r\n          >\r\n            Update Price\r\n          </Button>\r\n        )}\r\n      </Box>\r\n\r\n      {loading ? (\r\n        <Box sx={{ display: 'flex', justifyContent: 'center', p: 4 }}>\r\n          <CircularProgress />\r\n        </Box>\r\n      ) : error ? (\r\n        <Alert severity=\"error\">{error}</Alert>\r\n      ) : (\r\n        <>\r\n          <TableContainer component={Paper} variant=\"outlined\">\r\n            <Table>\r\n              <TableHead>\r\n                <TableRow>\r\n                  <TableCell>Price</TableCell>\r\n                  <TableCell>Effective Date</TableCell>\r\n                  <TableCell>Updated By</TableCell>\r\n                </TableRow>\r\n              </TableHead>\r\n              <TableBody>\r\n                {priceHistory.length > 0 ? (\r\n                  priceHistory.map((item) => (\r\n                    <TableRow key={item.id}>\r\n                      <TableCell>{formatCurrency(item.price)}</TableCell>\r\n                      <TableCell>{formatDate(item.effective_date)}</TableCell>\r\n                      <TableCell>{item.created_by}</TableCell>\r\n                    </TableRow>\r\n                  ))\r\n                ) : (\r\n                  <TableRow>\r\n                    <TableCell colSpan={3} align=\"center\">\r\n                      No price history available\r\n                    </TableCell>\r\n                  </TableRow>\r\n                )}\r\n              </TableBody>\r\n            </Table>\r\n          </TableContainer>\r\n\r\n          {totalPages > 1 && (\r\n            <Box sx={{ display: 'flex', justifyContent: 'center', mt: 2 }}>\r\n              <Pagination \r\n                count={totalPages} \r\n                page={page} \r\n                onChange={handlePageChange} \r\n                color=\"primary\" \r\n              />\r\n            </Box>\r\n          )}\r\n        </>\r\n      )}\r\n\r\n      {/* Price Update Dialog */}\r\n      <Dialog open={openPriceDialog} onClose={handlePriceDialogClose}>\r\n        <DialogTitle>Update Price for {productName}</DialogTitle>\r\n        <DialogContent>\r\n          <Box sx={{ pt: 1 }}>\r\n            <FormControl fullWidth error={!!priceError} sx={{ mb: 3 }}>\r\n              <TextField\r\n                label=\"New Price\"\r\n                value={newPrice}\r\n                onChange={(e) => setNewPrice(e.target.value)}\r\n                fullWidth\r\n                margin=\"normal\"\r\n                InputProps={{\r\n                  startAdornment: <InputAdornment position=\"start\">$</InputAdornment>,\r\n                }}\r\n                error={!!priceError}\r\n              />\r\n              {priceError && <FormHelperText>{priceError}</FormHelperText>}\r\n            </FormControl>\r\n\r\n            <LocalizationProvider dateAdapter={AdapterDateFns}>\r\n              <DatePicker\r\n                label=\"Effective Date\"\r\n                value={effectiveDate}\r\n                onChange={(newDate) => setEffectiveDate(newDate)}\r\n                slotProps={{\r\n                  textField: {\r\n                    fullWidth: true,\r\n                    margin: 'normal'\r\n                  },\r\n                }}\r\n              />\r\n            </LocalizationProvider>\r\n          </Box>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={handlePriceDialogClose} disabled={submitting}>\r\n            Cancel\r\n          </Button>\r\n          <Button \r\n            onClick={handlePriceUpdate} \r\n            variant=\"contained\" \r\n            color=\"primary\"\r\n            disabled={submitting}\r\n          >\r\n            {submitting ? <CircularProgress size={24} /> : 'Update Price'}\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default ProductPriceHistory;","usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"d:\\All python project\\Tubex\\Frontend\\app\\src\\components\\whitelabel\\reports\\ReportManagement.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"d:\\All python project\\Tubex\\Frontend\\app\\src\\components\\whitelabel\\user-management\\InvitationsTab.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"d:\\All python project\\Tubex\\Frontend\\app\\src\\components\\whitelabel\\user-management\\RolesTab.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"d:\\All python project\\Tubex\\Frontend\\app\\src\\components\\whitelabel\\user-management\\UsersTab.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"d:\\All python project\\Tubex\\Frontend\\app\\src\\components\\whitelabel\\users\\EmployeeInvitationGenerator.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'addDays' is defined but never used. Allowed unused vars must match /^_/u.","line":16,"column":18,"nodeType":"Identifier","messageId":"unusedVar","endLine":16,"endColumn":25},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'companyName' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":34,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":34,"endColumn":21}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\r\nimport {\r\n  Box,\r\n  Button,\r\n  Typography,\r\n  Paper,\r\n  TextField,\r\n  CircularProgress,\r\n  Alert,\r\n  Snackbar,\r\n  IconButton,\r\n  Tooltip\r\n} from '@mui/material';\r\nimport ContentCopyIcon from '@mui/icons-material/ContentCopy';\r\nimport RefreshIcon from '@mui/icons-material/Refresh';\r\nimport { format, addDays, isAfter } from 'date-fns';\r\nimport { authService } from '../../../services/api';\r\n\r\ninterface EmployeeInvitationGeneratorProps {\r\n  companyId: string;\r\n  onInvitationGenerated?: (code: string) => void;\r\n}\r\n\r\nconst EmployeeInvitationGenerator: React.FC<EmployeeInvitationGeneratorProps> = ({ \r\n  companyId,\r\n  onInvitationGenerated \r\n}) => {\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState<string | null>(null);\r\n  const [invitationCode, setInvitationCode] = useState<string | null>(null);\r\n  const [expiresAt, setExpiresAt] = useState<string | null>(null);\r\n  const [snackbarOpen, setSnackbarOpen] = useState(false);\r\n  const [snackbarMessage, setSnackbarMessage] = useState('');\r\n  const [companyName, setCompanyName] = useState<string | null>(null);\r\n\r\n  const generateInvitation = async () => {\r\n    if (!companyId) {\r\n      setError('Company ID is required');\r\n      return;\r\n    }\r\n\r\n    setLoading(true);\r\n    setError(null);\r\n\r\n    try {      const response = await authService.generateInvitationCode({ companyId });\r\n      setInvitationCode(response.data.code);\r\n      setExpiresAt(response.data.expiresIn);\r\n      // Company name is not provided in the backend response, so we're not setting it\r\n      setCompanyName(\"Your Company\");\r\n      \r\n      if (onInvitationGenerated) {\r\n        onInvitationGenerated(response.data.code);\r\n      }\r\n    } catch (err: any) {\r\n      setError(err.message || 'Failed to generate invitation code');\r\n      console.error('Error generating invitation code:', err);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const copyToClipboard = () => {\r\n    if (invitationCode) {\r\n      navigator.clipboard.writeText(invitationCode)\r\n        .then(() => {\r\n          setSnackbarMessage('Invitation code copied to clipboard');\r\n          setSnackbarOpen(true);\r\n        })\r\n        .catch((err) => {\r\n          console.error('Failed to copy text: ', err);\r\n          setSnackbarMessage('Failed to copy code');\r\n          setSnackbarOpen(true);\r\n        });\r\n    }\r\n  };\r\n\r\n  const handleSnackbarClose = () => {\r\n    setSnackbarOpen(false);\r\n  };\r\n  const formatExpiryDate = (dateString: string) => {\r\n    try {\r\n      // If the string is in the format \"X days\", just return it as is\r\n      if (dateString.includes('days')) {\r\n        return dateString;\r\n      }\r\n      \r\n      // Otherwise try to parse it as a date\r\n      const date = new Date(dateString);\r\n      return format(date, 'MMM dd, yyyy HH:mm:ss');\r\n    } catch (e) {\r\n      return dateString;\r\n    }\r\n  };\r\n  const isExpired = (dateString: string | null) => {\r\n    if (!dateString) return false;\r\n    \r\n    try {\r\n      // If the string is in the format \"X days\", it's not expired\r\n      if (dateString.includes('days')) {\r\n        return false;\r\n      }\r\n      \r\n      // Otherwise try to parse it as a date\r\n      const date = new Date(dateString);\r\n      return isAfter(new Date(), date);\r\n    } catch (e) {\r\n      return false;\r\n    }\r\n  };\r\n\r\n  const getInvitationUrl = () => {\r\n    if (!invitationCode) return '';\r\n    const baseUrl = window.location.origin;\r\n    return `${baseUrl}/join?code=${invitationCode}`;\r\n  };\r\n\r\n  return (\r\n    <Paper sx={{ p: 3, mb: 3 }}>\r\n      <Typography variant=\"h6\" gutterBottom>\r\n        Employee Invitation\r\n      </Typography>\r\n      <Typography variant=\"body2\" color=\"text.secondary\" paragraph>\r\n        Generate an invitation code to allow new employees to register to your company. \r\n        The invitation code is valid for 48 hours.\r\n      </Typography>\r\n\r\n      {error && (\r\n        <Alert severity=\"error\" sx={{ mb: 2 }}>\r\n          {error}\r\n        </Alert>\r\n      )}\r\n\r\n      {invitationCode ? (\r\n        <Box sx={{ mt: 2 }}>\r\n          <TextField\r\n            label=\"Invitation Code\"\r\n            value={invitationCode}\r\n            fullWidth\r\n            InputProps={{\r\n              readOnly: true,\r\n              endAdornment: (\r\n                <Tooltip title=\"Copy code\">\r\n                  <IconButton edge=\"end\" onClick={copyToClipboard}>\r\n                    <ContentCopyIcon />\r\n                  </IconButton>\r\n                </Tooltip>\r\n              ),\r\n            }}\r\n            sx={{ mb: 2 }}\r\n          />\r\n\r\n          <TextField\r\n            label=\"Invitation URL\"\r\n            value={getInvitationUrl()}\r\n            fullWidth\r\n            InputProps={{\r\n              readOnly: true,\r\n              endAdornment: (\r\n                <Tooltip title=\"Copy URL\">\r\n                  <IconButton \r\n                    edge=\"end\" \r\n                    onClick={() => {\r\n                      navigator.clipboard.writeText(getInvitationUrl());\r\n                      setSnackbarMessage('Invitation URL copied to clipboard');\r\n                      setSnackbarOpen(true);\r\n                    }}\r\n                  >\r\n                    <ContentCopyIcon />\r\n                  </IconButton>\r\n                </Tooltip>\r\n              ),\r\n            }}\r\n            sx={{ mb: 2 }}\r\n          />          {expiresAt && (\r\n            <Typography \r\n              variant=\"body2\" \r\n              color=\"text.secondary\"\r\n              sx={{ mb: 2 }}\r\n            >\r\n              {expiresAt.includes('days') \r\n                ? `This code will expire in ${formatExpiryDate(expiresAt)}`\r\n                : isExpired(expiresAt) \r\n                  ? `This code has expired on ${formatExpiryDate(expiresAt)}`\r\n                  : `This code will expire on ${formatExpiryDate(expiresAt)}`}\r\n            </Typography>\r\n          )}\r\n\r\n          <Box sx={{ display: 'flex', justifyContent: 'flex-end', mt: 2 }}>\r\n            <Button\r\n              startIcon={<RefreshIcon />}\r\n              onClick={generateInvitation}\r\n              disabled={loading}\r\n              variant=\"outlined\"\r\n            >\r\n              {loading ? <CircularProgress size={24} /> : 'Generate New Code'}\r\n            </Button>\r\n          </Box>\r\n        </Box>\r\n      ) : (\r\n        <Box sx={{ display: 'flex', justifyContent: 'flex-end', mt: 2 }}>\r\n          <Button\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            onClick={generateInvitation}\r\n            disabled={loading}\r\n          >\r\n            {loading ? <CircularProgress size={24} /> : 'Generate Invitation Code'}\r\n          </Button>\r\n        </Box>\r\n      )}\r\n\r\n      <Snackbar\r\n        open={snackbarOpen}\r\n        autoHideDuration={3000}\r\n        onClose={handleSnackbarClose}\r\n        message={snackbarMessage}\r\n      />\r\n    </Paper>\r\n  );\r\n};\r\n\r\nexport default EmployeeInvitationGenerator;","usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"d:\\All python project\\Tubex\\Frontend\\app\\src\\components\\whitelabel\\users\\PendingEmployeesList.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Chip' is defined but never used. Allowed unused vars must match /^_/u.","line":13,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":13,"endColumn":7}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\r\nimport {\r\n  Box,\r\n  Paper,\r\n  Typography,\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableContainer,\r\n  TableHead,\r\n  TableRow,\r\n  Button,\r\n  Chip,\r\n  IconButton,\r\n  Dialog,\r\n  DialogActions,\r\n  DialogContent,\r\n  DialogContentText,\r\n  DialogTitle,\r\n  TextField,\r\n  CircularProgress,\r\n  Alert,\r\n  Tooltip\r\n} from '@mui/material';\r\nimport CheckIcon from '@mui/icons-material/Check';\r\nimport CloseIcon from '@mui/icons-material/Close';\r\nimport { format } from 'date-fns';\r\nimport { authService } from '../../../services/api';\r\n\r\ninterface PendingEmployeesListProps {\r\n  onEmployeeStatusChange?: () => void;\r\n}\r\n\r\nconst PendingEmployeesList: React.FC<PendingEmployeesListProps> = ({\r\n  onEmployeeStatusChange\r\n}) => {\r\n  const [employees, setEmployees] = useState<any[]>([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState<string | null>(null);\r\n  const [rejectDialogOpen, setRejectDialogOpen] = useState(false);\r\n  const [selectedEmployeeId, setSelectedEmployeeId] = useState<string | null>(null);\r\n  const [rejectionReason, setRejectionReason] = useState('');\r\n  const [actionLoading, setActionLoading] = useState(false);\r\n\r\n  useEffect(() => {\r\n    fetchPendingEmployees();\r\n  }, []);\r\n\r\n  const fetchPendingEmployees = async () => {\r\n    setLoading(true);\r\n    setError(null);\r\n\r\n    try {\r\n      const response = await authService.getPendingEmployees();\r\n      setEmployees(response.employees || []);\r\n    } catch (err: any) {\r\n      console.error('Error fetching pending employees:', err);\r\n      setError(err.message || 'Failed to fetch pending employees');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleApprove = async (employeeId: string) => {\r\n    setActionLoading(true);\r\n    setError(null);\r\n\r\n    try {\r\n      await authService.verifyEmployee(employeeId);\r\n      \r\n      // Update the local list\r\n      setEmployees(prevEmployees => \r\n        prevEmployees.filter(emp => emp.id !== employeeId)\r\n      );\r\n      \r\n      if (onEmployeeStatusChange) {\r\n        onEmployeeStatusChange();\r\n      }\r\n    } catch (err: any) {\r\n      console.error('Error approving employee:', err);\r\n      setError(err.message || 'Failed to approve employee');\r\n    } finally {\r\n      setActionLoading(false);\r\n    }\r\n  };\r\n\r\n  const openRejectDialog = (employeeId: string) => {\r\n    setSelectedEmployeeId(employeeId);\r\n    setRejectionReason('');\r\n    setRejectDialogOpen(true);\r\n  };\r\n\r\n  const closeRejectDialog = () => {\r\n    setRejectDialogOpen(false);\r\n    setSelectedEmployeeId(null);\r\n  };\r\n\r\n  const handleReject = async () => {\r\n    if (!selectedEmployeeId) return;\r\n\r\n    setActionLoading(true);\r\n    setError(null);\r\n\r\n    try {\r\n      await authService.rejectEmployee(\r\n        selectedEmployeeId,\r\n        rejectionReason.trim() || undefined\r\n      );\r\n      \r\n      // Update the local list\r\n      setEmployees(prevEmployees => \r\n        prevEmployees.filter(emp => emp.id !== selectedEmployeeId)\r\n      );\r\n      \r\n      if (onEmployeeStatusChange) {\r\n        onEmployeeStatusChange();\r\n      }\r\n      \r\n      closeRejectDialog();\r\n    } catch (err: any) {\r\n      console.error('Error rejecting employee:', err);\r\n      setError(err.message || 'Failed to reject employee');\r\n    } finally {\r\n      setActionLoading(false);\r\n    }\r\n  };\r\n\r\n  const formatDate = (dateString: string) => {\r\n    try {\r\n      return format(new Date(dateString), 'MMM dd, yyyy');\r\n    } catch (e) {\r\n      return dateString;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Paper sx={{ p: 3 }}>\r\n      <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 2 }}>\r\n        <Typography variant=\"h6\">Pending Employee Registrations</Typography>\r\n        <Button \r\n          size=\"small\" \r\n          onClick={fetchPendingEmployees}\r\n          disabled={loading}\r\n        >\r\n          Refresh\r\n        </Button>\r\n      </Box>\r\n\r\n      {error && (\r\n        <Alert severity=\"error\" sx={{ mb: 2 }}>\r\n          {error}\r\n        </Alert>\r\n      )}\r\n\r\n      {loading ? (\r\n        <Box sx={{ display: 'flex', justifyContent: 'center', p: 4 }}>\r\n          <CircularProgress />\r\n        </Box>\r\n      ) : (\r\n        <TableContainer>\r\n          <Table>\r\n            <TableHead>\r\n              <TableRow>\r\n                <TableCell>Name</TableCell>\r\n                <TableCell>Email</TableCell>\r\n                <TableCell>Job Title</TableCell>\r\n                <TableCell>Department</TableCell>\r\n                <TableCell>Registration Date</TableCell>\r\n                <TableCell align=\"right\">Actions</TableCell>\r\n              </TableRow>\r\n            </TableHead>\r\n            <TableBody>\r\n              {employees.length > 0 ? (\r\n                employees.map((employee) => (\r\n                  <TableRow key={employee.id} hover>\r\n                    <TableCell>\r\n                      {employee.firstName} {employee.lastName}\r\n                    </TableCell>\r\n                    <TableCell>{employee.email}</TableCell>\r\n                    <TableCell>{employee.jobTitle || '—'}</TableCell>\r\n                    <TableCell>{employee.department || '—'}</TableCell>\r\n                    <TableCell>\r\n                      {employee.registrationDate ? formatDate(employee.registrationDate) : '—'}\r\n                    </TableCell>\r\n                    <TableCell align=\"right\">\r\n                      <Tooltip title=\"Approve\">\r\n                        <IconButton \r\n                          color=\"success\"\r\n                          onClick={() => handleApprove(employee.id)}\r\n                          disabled={actionLoading}\r\n                        >\r\n                          <CheckIcon />\r\n                        </IconButton>\r\n                      </Tooltip>\r\n                      <Tooltip title=\"Reject\">\r\n                        <IconButton \r\n                          color=\"error\"\r\n                          onClick={() => openRejectDialog(employee.id)}\r\n                          disabled={actionLoading}\r\n                        >\r\n                          <CloseIcon />\r\n                        </IconButton>\r\n                      </Tooltip>\r\n                    </TableCell>\r\n                  </TableRow>\r\n                ))\r\n              ) : (\r\n                <TableRow>\r\n                  <TableCell colSpan={6} align=\"center\">\r\n                    <Typography variant=\"body1\" color=\"textSecondary\">\r\n                      No pending employee registrations found\r\n                    </Typography>\r\n                  </TableCell>\r\n                </TableRow>\r\n              )}\r\n            </TableBody>\r\n          </Table>\r\n        </TableContainer>\r\n      )}\r\n\r\n      {/* Rejection Dialog */}\r\n      <Dialog open={rejectDialogOpen} onClose={closeRejectDialog}>\r\n        <DialogTitle>Reject Employee Registration</DialogTitle>\r\n        <DialogContent>\r\n          <DialogContentText>\r\n            Please provide a reason for rejecting this employee registration. \r\n            This will be included in the notification email sent to the applicant.\r\n          </DialogContentText>\r\n          <TextField\r\n            autoFocus\r\n            margin=\"dense\"\r\n            label=\"Rejection Reason\"\r\n            fullWidth\r\n            multiline\r\n            rows={3}\r\n            value={rejectionReason}\r\n            onChange={(e) => setRejectionReason(e.target.value)}\r\n          />\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={closeRejectDialog} disabled={actionLoading}>\r\n            Cancel\r\n          </Button>\r\n          <Button \r\n            onClick={handleReject} \r\n            color=\"error\" \r\n            disabled={actionLoading}\r\n          >\r\n            {actionLoading ? <CircularProgress size={24} /> : 'Reject'}\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </Paper>\r\n  );\r\n};\r\n\r\nexport default PendingEmployeesList;","usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"d:\\All python project\\Tubex\\Frontend\\app\\src\\components\\whitelabel\\users\\UserForm.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'fetchUserDetails'. Either include it or remove the dependency array.","line":97,"column":6,"nodeType":"ArrayExpression","endLine":97,"endColumn":14,"suggestions":[{"desc":"Update the dependencies array to be: [fetchUserDetails, userId]","fix":{"range":[2340,2348],"text":"[fetchUserDetails, userId]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect, useCallback } from 'react';\r\nimport { \r\n  TextField, \r\n  Box,\r\n  FormControl,\r\n  InputLabel,\r\n  Select,\r\n  MenuItem,\r\n  FormHelperText,\r\n  Switch,\r\n  FormControlLabel,\r\n  Divider,\r\n  Typography,\r\n  Alert,\r\n  Link,\r\n  SelectChangeEvent,\r\n  Stack,\r\n  Paper\r\n} from '@mui/material';\r\nimport { useTheme } from '../../../contexts/ThemeContext';\r\nimport WhiteLabelButton from '../WhiteLabelButton';\r\nimport FormContainer from '../FormContainer';\r\nimport { userManagementService, User, UserCreateRequest, UserUpdateRequest } from '../../../services/api';\r\n\r\ninterface Company {\r\n  id: string;\r\n  name: string;\r\n  type: string;\r\n}\r\n\r\ninterface UserFormData {\r\n  firstName: string;\r\n  lastName: string;\r\n  email: string;\r\n  password: string;\r\n  confirmPassword: string;\r\n  role: 'admin' | 'manager' | 'staff' | 'supplier' | 'dealer' | '';\r\n  status: 'active' | 'inactive' | 'pending' | 'suspended';\r\n  companyId: string;\r\n  sendInvitation: boolean;\r\n}\r\n\r\ninterface UserFormErrors {\r\n  firstName?: string;\r\n  lastName?: string;\r\n  email?: string;\r\n  password?: string;\r\n  confirmPassword?: string;\r\n  role?: string;\r\n  companyId?: string;\r\n}\r\n\r\ninterface UserFormProps {\r\n  userId?: string;\r\n  companyId?: string;\r\n  isAdminView?: boolean;\r\n  onSave?: (user: User) => void;\r\n  onCancel?: () => void;\r\n  companies?: Company[];\r\n}\r\n\r\nconst UserForm: React.FC<UserFormProps> = ({\r\n  userId,\r\n  companyId,\r\n  isAdminView = false,\r\n  onSave,\r\n  onCancel,\r\n  companies = []\r\n}) => {\r\n  const { theme } = useTheme();\r\n  const isEditMode = !!userId;\r\n  const isNewUser = !isEditMode;\r\n  const [isCheckingEmail, setIsCheckingEmail] = useState(false);\r\n  \r\n  const [formData, setFormData] = useState<UserFormData>({\r\n    firstName: '',\r\n    lastName: '',\r\n    email: '',\r\n    password: '',\r\n    confirmPassword: '',\r\n    role: '',\r\n    status: 'active',\r\n    companyId: companyId || '',\r\n    sendInvitation: true\r\n  });\r\n  \r\n  const [errors, setErrors] = useState<UserFormErrors>({});\r\n  const [loading, setLoading] = useState(false);\r\n  const [fetchLoading, setFetchLoading] = useState(false);\r\n  const [apiError, setApiError] = useState<string | null>(null);\r\n  const [invitationCode, setInvitationCode] = useState<string | null>(null);\r\n  \r\n  useEffect(() => {\r\n    if (userId) {\r\n      fetchUserDetails();\r\n    }\r\n  }, [userId]);\r\n\r\n  const fetchUserDetails = async () => {\r\n    if (!userId) return;\r\n    \r\n    setFetchLoading(true);\r\n    setApiError(null);\r\n    \r\n    try {\r\n      const user = await userManagementService.getUser(userId);\r\n      setFormData({\r\n        firstName: user.firstName || '',\r\n        lastName: user.lastName || '',\r\n        email: user.email || '',\r\n        password: '',\r\n        confirmPassword: '',\r\n        role: user.role || '',\r\n        status: user.status || 'active',\r\n        companyId: user.company_id || companyId || '',\r\n        sendInvitation: false\r\n      });\r\n    } catch (err: any) {\r\n      setApiError(err.message || 'Failed to load user details');\r\n      console.error('Error fetching user:', err);\r\n    } finally {\r\n      setFetchLoading(false);\r\n    }\r\n  };\r\n\r\n  const validateEmail = useCallback(async (email: string): Promise<string | null> => {\r\n    if (!email) return 'Email is required';\r\n    if (!/\\S+@\\S+\\.\\S+/.test(email)) return 'Email is invalid';\r\n    \r\n    if (isNewUser) {\r\n      setIsCheckingEmail(true);\r\n      try {\r\n        const isAvailable = await userManagementService.checkEmailAvailability(email);\r\n        return isAvailable ? null : 'Email is already in use';\r\n      } catch (err) {\r\n        console.error('Error checking email availability:', err);\r\n        return null; // Don't block submission on API error\r\n      } finally {\r\n        setIsCheckingEmail(false);\r\n      }\r\n    }\r\n    \r\n    return null;\r\n  }, [isNewUser]);\r\n  \r\n  const validateForm = useCallback(async () => {\r\n    const newErrors: UserFormErrors = {};\r\n    \r\n    if (!formData.firstName.trim()) {\r\n      newErrors.firstName = 'First name is required';\r\n    }\r\n    \r\n    if (!formData.lastName.trim()) {\r\n      newErrors.lastName = 'Last name is required';\r\n    }\r\n    \r\n    const emailError = await validateEmail(formData.email);\r\n    if (emailError) {\r\n      newErrors.email = emailError;\r\n    }\r\n    \r\n    if (isNewUser) {\r\n      if (!formData.password) {\r\n        newErrors.password = 'Password is required';\r\n      } else if (formData.password.length < 8) {\r\n        newErrors.password = 'Password must be at least 8 characters';\r\n      }\r\n      \r\n      if (!formData.confirmPassword) {\r\n        newErrors.confirmPassword = 'Please confirm your password';\r\n      } else if (formData.password !== formData.confirmPassword) {\r\n        newErrors.confirmPassword = 'Passwords do not match';\r\n      }\r\n    }\r\n    \r\n    if (!formData.role) {\r\n      newErrors.role = 'Role is required';\r\n    }\r\n    \r\n    if (!formData.companyId && isAdminView) {\r\n      newErrors.companyId = 'Company is required';\r\n    }\r\n    \r\n    setErrors(newErrors);\r\n    return Object.keys(newErrors).length === 0;\r\n  }, [formData, isNewUser, isAdminView, validateEmail]);\r\n\r\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement | { name?: string; value: unknown }>) => {\r\n    const { name, value } = e.target;\r\n    if (!name) return;\r\n    \r\n    setFormData((prev) => ({\r\n      ...prev,\r\n      [name]: value\r\n    }));\r\n    \r\n    // Clear error for the field being edited\r\n    if (errors[name as keyof UserFormErrors]) {\r\n      setErrors((prev) => ({\r\n        ...prev,\r\n        [name]: undefined\r\n      }));\r\n    }\r\n  };\r\n\r\n  const handleSelectChange = (e: SelectChangeEvent<string>) => {\r\n    handleChange(e as any);\r\n  };\r\n  \r\n  const handleSwitchChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    const { name, checked } = e.target;\r\n    \r\n    setFormData((prev) => ({\r\n      ...prev,\r\n      [name]: checked\r\n    }));\r\n  };\r\n\r\n  const generateInvitationCode = async () => {\r\n    try {\r\n      if (!formData.role || !['admin', 'manager', 'staff', 'supplier', 'dealer'].includes(formData.role)) {\r\n        throw new Error('Please select a valid role first');\r\n      }\r\n\r\n      const code = await userManagementService.generateInvitationCode({\r\n        email: formData.email,\r\n        role: formData.role as UserCreateRequest['role'],\r\n        companyId: formData.companyId,\r\n      });\r\n      setInvitationCode(code);\r\n    } catch (err: any) {\r\n      setApiError(err.message || 'Failed to generate invitation code');\r\n      console.error('Error generating invitation code:', err);\r\n    }\r\n  };\r\n  \r\n  const handleSubmit = async () => {\r\n    if (!(await validateForm())) return;\r\n    \r\n    setLoading(true);\r\n    setApiError(null);\r\n    \r\n    try {\r\n      // Validate required fields for API submission\r\n      if (!formData.role || !formData.companyId) {\r\n        throw new Error('Role and Company are required');\r\n      }\r\n\r\n      // Validate that role is one of the allowed values\r\n      if (!['admin', 'manager', 'staff', 'supplier', 'dealer'].includes(formData.role)) {\r\n        throw new Error('Invalid role selected');\r\n      }\r\n\r\n      const baseData = {\r\n        firstName: formData.firstName,\r\n        lastName: formData.lastName,\r\n        email: formData.email,\r\n        role: formData.role as 'admin' | 'manager' | 'staff' | 'supplier' | 'dealer', // Cast after validation\r\n        status: formData.status,\r\n        companyId: isAdminView ? formData.companyId : companyId\r\n      };\r\n\r\n      // Ensure companyId is available\r\n      if (!baseData.companyId) {\r\n        throw new Error('Company ID is required');\r\n      }\r\n\r\n      let savedUser: User;\r\n      \r\n      if (isEditMode && userId) {\r\n        const updateData: UserUpdateRequest = {\r\n          ...baseData,\r\n          status: formData.status\r\n        };\r\n        savedUser = await userManagementService.updateUser(userId, updateData);\r\n      } else {\r\n        const createData: UserCreateRequest = {\r\n          ...baseData,\r\n          password: formData.password,\r\n          sendInvitation: formData.sendInvitation,\r\n          companyId: baseData.companyId // Already validated above\r\n        };\r\n        savedUser = await userManagementService.createUser(createData);\r\n      }\r\n      \r\n      if (onSave && savedUser) {\r\n        onSave(savedUser);\r\n      }\r\n    } catch (err: any) {\r\n      setApiError(err.message || `Failed to ${isEditMode ? 'update' : 'create'} user`);\r\n      console.error(`Error ${isEditMode ? 'updating' : 'creating'} user:`, err);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const getAvailableRoles = () => {\r\n    if (isAdminView) {\r\n      return [\r\n        { value: 'admin', label: 'Admin' },\r\n        { value: 'manager', label: 'Manager' },\r\n        { value: 'staff', label: 'Staff' },\r\n        { value: 'supplier', label: 'Supplier' },\r\n        { value: 'dealer', label: 'Dealer' }\r\n      ];\r\n    }\r\n    \r\n    return [\r\n      { value: 'manager', label: 'Manager' },\r\n      { value: 'staff', label: 'Staff' }\r\n    ];\r\n  };\r\n\r\n  return (\r\n    <FormContainer \r\n      title={isEditMode ? 'Edit User' : 'Add New User'}\r\n      loading={fetchLoading}\r\n      error={apiError}\r\n      maxWidth=\"700px\"\r\n    >\r\n      <Paper \r\n        elevation={2} \r\n        sx={{ \r\n          p: 3, \r\n          borderRadius: `${theme.buttonRadius || 4}px`,\r\n          backgroundColor: 'background.paper'\r\n        }}\r\n      >\r\n        <Stack spacing={3}>\r\n          <TextField\r\n            name=\"firstName\"\r\n            label=\"First Name\"\r\n            fullWidth\r\n            required\r\n            value={formData.firstName}\r\n            onChange={handleChange}\r\n            error={!!errors.firstName}\r\n            helperText={errors.firstName}\r\n            disabled={loading}\r\n          />\r\n          \r\n          <TextField\r\n            name=\"lastName\"\r\n            label=\"Last Name\"\r\n            fullWidth\r\n            required\r\n            value={formData.lastName}\r\n            onChange={handleChange}\r\n            error={!!errors.lastName}\r\n            helperText={errors.lastName}\r\n            disabled={loading}\r\n          />\r\n          \r\n          <TextField\r\n            name=\"email\"\r\n            label=\"Email\"\r\n            fullWidth\r\n            required\r\n            type=\"email\"\r\n            value={formData.email}\r\n            onChange={handleChange}\r\n            error={!!errors.email}\r\n            helperText={errors.email || (isCheckingEmail ? 'Checking email availability...' : undefined)}\r\n            disabled={loading || isCheckingEmail || (isEditMode && !isAdminView)}\r\n          />\r\n          \r\n          {isAdminView && (\r\n            <FormControl fullWidth error={!!errors.companyId}>\r\n              <InputLabel id=\"company-label\">Company</InputLabel>\r\n              <Select\r\n                labelId=\"company-label\"\r\n                name=\"companyId\"\r\n                value={formData.companyId}\r\n                onChange={handleSelectChange}\r\n                disabled={loading || (isEditMode && !isAdminView)}\r\n                label=\"Company\"\r\n              >\r\n                <MenuItem value=\"\" disabled>Select a company</MenuItem>\r\n                {companies.map((company) => (\r\n                  <MenuItem key={company.id} value={company.id}>\r\n                    {company.name} ({company.type === 'supplier' ? 'Supplier' : 'Dealer'})\r\n                  </MenuItem>\r\n                ))}\r\n              </Select>\r\n              {errors.companyId && <FormHelperText>{errors.companyId}</FormHelperText>}\r\n            </FormControl>\r\n          )}\r\n          \r\n          <FormControl fullWidth required error={!!errors.role}>\r\n            <InputLabel id=\"role-label\">Role</InputLabel>\r\n            <Select\r\n              labelId=\"role-label\"\r\n              name=\"role\"\r\n              value={formData.role}\r\n              onChange={handleSelectChange}\r\n              disabled={loading || (isEditMode && !isAdminView)}\r\n              label=\"Role\"\r\n            >\r\n              <MenuItem value=\"\" disabled>Select a role</MenuItem>\r\n              {getAvailableRoles().map((role) => (\r\n                <MenuItem key={role.value} value={role.value}>\r\n                  {role.label}\r\n                </MenuItem>\r\n              ))}\r\n            </Select>\r\n            {errors.role && <FormHelperText>{errors.role}</FormHelperText>}\r\n          </FormControl>\r\n\r\n          {isEditMode && (\r\n            <FormControl fullWidth>\r\n              <InputLabel id=\"status-label\">Status</InputLabel>\r\n              <Select\r\n                labelId=\"status-label\"\r\n                name=\"status\"\r\n                value={formData.status}\r\n                onChange={handleSelectChange}\r\n                disabled={loading}\r\n                label=\"Status\"\r\n              >\r\n                <MenuItem value=\"active\">Active</MenuItem>\r\n                <MenuItem value=\"inactive\">Inactive</MenuItem>\r\n                <MenuItem value=\"pending\">Pending</MenuItem>\r\n                <MenuItem value=\"suspended\">Suspended</MenuItem>\r\n              </Select>\r\n            </FormControl>\r\n          )}\r\n          \r\n          {isNewUser && (\r\n            <>\r\n              <Divider textAlign=\"left\">\r\n                <Typography \r\n                  variant=\"body2\" \r\n                  sx={{ \r\n                    color: theme.primaryColor,\r\n                    fontFamily: theme.fontFamily\r\n                  }}\r\n                >\r\n                  Login Credentials\r\n                </Typography>\r\n              </Divider>\r\n              \r\n              <TextField\r\n                name=\"password\"\r\n                label=\"Password\"\r\n                fullWidth\r\n                required\r\n                type=\"password\"\r\n                value={formData.password}\r\n                onChange={handleChange}\r\n                error={!!errors.password}\r\n                helperText={errors.password || \"Must be at least 8 characters\"}\r\n                disabled={loading}\r\n              />\r\n              \r\n              <TextField\r\n                name=\"confirmPassword\"\r\n                label=\"Confirm Password\"\r\n                fullWidth\r\n                required\r\n                type=\"password\"\r\n                value={formData.confirmPassword}\r\n                onChange={handleChange}\r\n                error={!!errors.confirmPassword}\r\n                helperText={errors.confirmPassword}\r\n                disabled={loading}\r\n              />\r\n              \r\n              <FormControlLabel\r\n                control={\r\n                  <Switch\r\n                    name=\"sendInvitation\"\r\n                    checked={formData.sendInvitation}\r\n                    onChange={handleSwitchChange}\r\n                    sx={{\r\n                      '& .MuiSwitch-switchBase.Mui-checked': {\r\n                        color: theme.primaryColor,\r\n                      },\r\n                      '& .MuiSwitch-switchBase.Mui-checked + .MuiSwitch-track': {\r\n                        backgroundColor: theme.primaryColor,\r\n                      },\r\n                    }}\r\n                  />\r\n                }\r\n                label=\"Send invitation email to the user\"\r\n              />\r\n              \r\n              <Alert \r\n                severity=\"info\"\r\n                sx={{\r\n                  '& .MuiAlert-icon': {\r\n                    color: theme.primaryColor,\r\n                  },\r\n                  '& a': {\r\n                    color: theme.primaryColor,\r\n                    textDecoration: 'none',\r\n                    '&:hover': {\r\n                      textDecoration: 'underline',\r\n                    },\r\n                  },\r\n                }}\r\n              >\r\n                Alternatively, you can <Link \r\n                  href=\"#\" \r\n                  onClick={(e: React.MouseEvent<HTMLAnchorElement>) => {\r\n                    e.preventDefault();\r\n                    generateInvitationCode();\r\n                  }}\r\n                >\r\n                  generate an invitation code\r\n                </Link> to share with the user.\r\n                {invitationCode && (\r\n                  <Box sx={{ mt: 1 }}>\r\n                    Invitation Code: <strong>{invitationCode}</strong>\r\n                  </Box>\r\n                )}\r\n              </Alert>\r\n            </>\r\n          )}\r\n        </Stack>\r\n        \r\n        <Box sx={{ mt: 4, display: 'flex', gap: 2, justifyContent: 'flex-end' }}>\r\n          {onCancel && (\r\n            <WhiteLabelButton\r\n              variant=\"outlined\"\r\n              onClick={onCancel}\r\n              disabled={loading}\r\n            >\r\n              Cancel\r\n            </WhiteLabelButton>\r\n          )}\r\n          <WhiteLabelButton\r\n            onClick={handleSubmit}\r\n            disabled={loading}\r\n          >\r\n            {isEditMode ? 'Update User' : 'Create User'}\r\n          </WhiteLabelButton>\r\n        </Box>\r\n      </Paper>\r\n    </FormContainer>\r\n  );\r\n};\r\n\r\nexport default UserForm;","usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"d:\\All python project\\Tubex\\Frontend\\app\\src\\components\\whitelabel\\users\\UserList.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'isSearching'. Either include it or remove the dependency array.","line":123,"column":6,"nodeType":"ArrayExpression","endLine":123,"endColumn":18,"suggestions":[{"desc":"Update the dependencies array to be: [fetchUsers, isSearching]","fix":{"range":[3799,3811],"text":"[fetchUsers, isSearching]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'searchAbortController'. Either include it or remove the dependency array.","line":149,"column":6,"nodeType":"ArrayExpression","endLine":149,"endColumn":36,"suggestions":[{"desc":"Update the dependencies array to be: [searchTerm, page, fetchUsers, searchAbortController]","fix":{"range":[4340,4370],"text":"[searchTerm, page, fetchUsers, searchAbortController]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'page'. Either include it or remove the dependency array.","line":156,"column":6,"nodeType":"ArrayExpression","endLine":156,"endColumn":36,"suggestions":[{"desc":"Update the dependencies array to be: [page, selectedRole, selectedStatus]","fix":{"range":[4494,4524],"text":"[page, selectedRole, selectedStatus]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect, useCallback } from 'react';\r\nimport { \r\n  Box, \r\n  Button, \r\n  Typography, \r\n  TextField,\r\n  InputAdornment,\r\n  FormControl,\r\n  InputLabel,\r\n  Select,\r\n  MenuItem,\r\n  Chip,\r\n  IconButton,\r\n  Tooltip,\r\n  useTheme as useMuiTheme,\r\n  SelectChangeEvent\r\n} from '@mui/material';\r\nimport SearchIcon from '@mui/icons-material/Search';\r\nimport AddIcon from '@mui/icons-material/Add';\r\nimport PersonAddIcon from '@mui/icons-material/PersonAdd';\r\nimport EditIcon from '@mui/icons-material/Edit';\r\nimport BlockIcon from '@mui/icons-material/Block';\r\nimport LockResetIcon from '@mui/icons-material/LockReset';\r\nimport DataTable, { Column } from '../DataTable';\r\nimport { useTheme } from '../../../contexts/ThemeContext';\r\nimport { userManagementService, User } from '../../../services/api';\r\n\r\ninterface UserListProps {\r\n  companyId?: string;\r\n  onAddUser?: () => void;\r\n  onEditUser?: (userId: string) => void;\r\n  onInviteUser?: () => void;\r\n  onResetPassword?: (userId: string) => void;\r\n  maxHeight?: number | string;\r\n  hideActions?: boolean;\r\n  roleFilter?: string;\r\n  statusFilter?: string;\r\n  isAdminView?: boolean;\r\n}\r\n\r\nconst UserList: React.FC<UserListProps> = ({\r\n  companyId,\r\n  onAddUser,\r\n  onEditUser,\r\n  onInviteUser,\r\n  onResetPassword,\r\n  maxHeight,\r\n  hideActions = false,\r\n  roleFilter,\r\n  statusFilter,\r\n  isAdminView = false,\r\n}) => {\r\n  const { theme: whitelabelTheme } = useTheme();\r\n  const muiTheme = useMuiTheme();\r\n\r\n  const [users, setUsers] = useState<User[]>([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState<string | null>(null);\r\n  const [searchTerm, setSearchTerm] = useState('');\r\n  const [isSearching, setIsSearching] = useState(false);\r\n  const [searchAbortController, setSearchAbortController] = useState<AbortController | null>(null);\r\n  const [selectedRole, setSelectedRole] = useState(roleFilter || '');\r\n  const [selectedStatus, setSelectedStatus] = useState(statusFilter || '');\r\n  const [page, setPage] = useState(0);\r\n  const [rowsPerPage, setRowsPerPage] = useState(10);\r\n  const [totalCount, setTotalCount] = useState(0);\r\n\r\n  // Custom button style based on the whitelabel theme\r\n  const buttonStyle = {\r\n    backgroundColor: whitelabelTheme?.primaryColor || muiTheme.palette.primary.main,\r\n    color: '#fff',\r\n    borderRadius: whitelabelTheme?.buttonRadius !== undefined ? `${whitelabelTheme.buttonRadius}px` : undefined,\r\n    '&:hover': {\r\n      backgroundColor: whitelabelTheme?.primaryColor ? \r\n        `${whitelabelTheme.primaryColor}dd` : muiTheme.palette.primary.dark,\r\n    },\r\n  };\r\n\r\n  const fetchUsers = useCallback(async (isSearchRequest = false) => {\r\n    if (isSearchRequest && isSearching) {\r\n      return;\r\n    }\r\n\r\n    setLoading(true);\r\n    setError(null);\r\n\r\n    try {\r\n      const params = {\r\n        page: page + 1,\r\n        limit: rowsPerPage,\r\n        search: searchTerm || undefined,\r\n        role: selectedRole || undefined,\r\n        status: selectedStatus || undefined,\r\n        company_id: companyId,\r\n      };\r\n\r\n      if (isSearchRequest) {\r\n        setIsSearching(true);\r\n      }\r\n\r\n      const response = await userManagementService.getUsers(params);\r\n      \r\n      setUsers(response.data || []);\r\n      setTotalCount(response.pagination?.total || 0);\r\n      setError(null);\r\n    } catch (err: any) {\r\n      setError(err.message || 'Failed to load users');\r\n      console.error('Error fetching users:', err);\r\n      setUsers([]);\r\n      setTotalCount(0);\r\n    } finally {\r\n      setLoading(false);\r\n      if (isSearchRequest) {\r\n        setIsSearching(false);\r\n      }\r\n    }\r\n  }, [page, rowsPerPage, searchTerm, selectedRole, selectedStatus, companyId, isSearching]);\r\n\r\n  useEffect(() => {\r\n    if (!isSearching) {\r\n      fetchUsers();\r\n    }\r\n  }, [fetchUsers]);\r\n\r\n  // Debounced search with cleanup\r\n  useEffect(() => {\r\n    if (!searchTerm && page !== 0) {\r\n      setPage(0);\r\n      return;\r\n    }\r\n\r\n    if (searchAbortController) {\r\n      searchAbortController.abort();\r\n    }\r\n\r\n    const newController = new AbortController();\r\n    setSearchAbortController(newController);\r\n\r\n    const timer = setTimeout(() => {\r\n      if (searchTerm) {\r\n        fetchUsers(true);\r\n      }\r\n    }, 500);\r\n\r\n    return () => {\r\n      clearTimeout(timer);\r\n      newController.abort();\r\n    };\r\n  }, [searchTerm, page, fetchUsers]);\r\n\r\n  // Reset pagination when filters change\r\n  useEffect(() => {\r\n    if (page !== 0) {\r\n      setPage(0);\r\n    }\r\n  }, [selectedRole, selectedStatus]);\r\n\r\n  const handleSearch = useCallback((newSearchTerm: string) => {\r\n    setSearchTerm(newSearchTerm);\r\n    if (!newSearchTerm) {\r\n      setUsers([]);\r\n      setTotalCount(0);\r\n      fetchUsers();\r\n    }\r\n  }, [fetchUsers]);\r\n\r\n  const handleRoleChange = (event: SelectChangeEvent<string>) => {\r\n    const newRole = event.target.value;\r\n    if (newRole === selectedRole) return;\r\n    setSelectedRole(newRole);\r\n  };\r\n\r\n  const handleStatusChange = (event: SelectChangeEvent<string>) => {\r\n    const newStatus = event.target.value;\r\n    if (newStatus === selectedStatus) return;\r\n    setSelectedStatus(newStatus);\r\n  };\r\n\r\n  const getRoleChip = (role: string) => {\r\n    let color: 'default' | 'primary' | 'secondary' | 'error' | 'info' | 'success' | 'warning' = 'default';\r\n    switch (role.toLowerCase()) {\r\n      case 'admin':\r\n        color = 'error';\r\n        break;\r\n      case 'manager':\r\n        color = 'primary';\r\n        break;\r\n      case 'staff':\r\n        color = 'info';\r\n        break;\r\n      case 'supplier':\r\n        color = 'secondary';\r\n        break;\r\n      case 'dealer':\r\n        color = 'success';\r\n        break;\r\n    }\r\n    \r\n    return <Chip label={role} color={color} size=\"small\" />;\r\n  };\r\n\r\n  const getStatusChip = (status: string) => {\r\n    let color: 'default' | 'primary' | 'secondary' | 'error' | 'info' | 'success' | 'warning' = 'default';\r\n    switch (status.toLowerCase()) {\r\n      case 'active':\r\n        color = 'success';\r\n        break;\r\n      case 'inactive':\r\n        color = 'default';\r\n        break;\r\n      case 'pending':\r\n        color = 'warning';\r\n        break;\r\n      case 'suspended':\r\n        color = 'error';\r\n        break;\r\n    }\r\n    \r\n    return <Chip label={status} color={color} size=\"small\" />;\r\n  };\r\n\r\n  const handleSuspendUser = async (userId: string, currentStatus: string) => {\r\n    try {\r\n      const newStatus = currentStatus.toLowerCase() === 'suspended' ? 'active' : 'suspended';\r\n      await userManagementService.updateUserStatus(userId, newStatus);\r\n      \r\n      // Update local state optimistically\r\n      setUsers(prevUsers => \r\n        prevUsers.map(user => \r\n          user.id === userId \r\n            ? { ...user, status: newStatus }\r\n            : user\r\n        )\r\n      );\r\n    } catch (err: any) {\r\n      setError(err.message || 'Failed to update user status');\r\n      console.error('Error updating user status:', err);\r\n      // Revert on error\r\n      fetchUsers();\r\n    }\r\n  };\r\n\r\n  // Define columns for the users table\r\n  const columns: Column[] = [\r\n    { \r\n      id: 'firstName', \r\n      label: 'First Name', \r\n      minWidth: 100\r\n    },\r\n    { \r\n      id: 'lastName', \r\n      label: 'Last Name', \r\n      minWidth: 100\r\n    },\r\n    { \r\n      id: 'email', \r\n      label: 'Email', \r\n      minWidth: 170,\r\n    },\r\n    {\r\n      id: 'role',\r\n      label: 'Role',\r\n      minWidth: 120,\r\n      format: (value) => getRoleChip(value)\r\n    },\r\n    {\r\n      id: 'status',\r\n      label: 'Status',\r\n      minWidth: 120,\r\n      format: (value) => getStatusChip(value)\r\n    }\r\n  ];\r\n\r\n  // Add company column only for admin view\r\n  if (isAdminView) {\r\n    columns.splice(3, 0, { \r\n      id: 'company', \r\n      label: 'Company', \r\n      minWidth: 150,\r\n      format: (value) => value?.name || 'N/A'\r\n    });\r\n  }\r\n\r\n  // Add actions column if actions are enabled\r\n  if (!hideActions) {\r\n    columns.push({\r\n      id: 'actions',\r\n      label: 'Actions',\r\n      minWidth: 100,\r\n      align: 'right',\r\n      format: (_, row) => (\r\n        <Box>\r\n          {onEditUser && (\r\n            <Tooltip title=\"Edit User\">\r\n              <IconButton size=\"small\" onClick={(e) => {\r\n                e.stopPropagation();\r\n                onEditUser(row.id);\r\n              }}>\r\n                <EditIcon fontSize=\"small\" />\r\n              </IconButton>\r\n            </Tooltip>\r\n          )}\r\n          {onResetPassword && (\r\n            <Tooltip title=\"Reset Password\">\r\n              <IconButton size=\"small\" onClick={(e) => {\r\n                e.stopPropagation();\r\n                onResetPassword(row.id);\r\n              }}>\r\n                <LockResetIcon fontSize=\"small\" />\r\n              </IconButton>\r\n            </Tooltip>\r\n          )}\r\n          <Tooltip title={row.status === 'suspended' ? 'Activate User' : 'Suspend User'}>\r\n            <IconButton \r\n              size=\"small\" \r\n              onClick={(e) => {\r\n                e.stopPropagation();\r\n                handleSuspendUser(row.id, row.status);\r\n              }}\r\n              color={row.status === 'suspended' ? 'success' : 'default'}\r\n            >\r\n              <BlockIcon fontSize=\"small\" />\r\n            </IconButton>\r\n          </Tooltip>\r\n        </Box>\r\n      )\r\n    });\r\n  }\r\n\r\n  return (\r\n    <Box sx={{ maxHeight }}>\r\n      <Box sx={{ mb: 3, display: 'flex', flexDirection: { xs: 'column', md: 'row' }, gap: 2, justifyContent: 'space-between', alignItems: { xs: 'stretch', md: 'center' } }}>\r\n        <Typography variant=\"h6\" component=\"h2\">\r\n          Users\r\n        </Typography>\r\n\r\n        <Box sx={{ display: 'flex', flexDirection: { xs: 'column', sm: 'row' }, gap: 2 }}>\r\n          <Box sx={{ display: 'flex', gap: 2 }}>\r\n            <TextField\r\n              placeholder=\"Search users...\"\r\n              size=\"small\"\r\n              value={searchTerm}\r\n              onChange={(e) => handleSearch(e.target.value)}\r\n              InputProps={{\r\n                startAdornment: (\r\n                  <InputAdornment position=\"start\">\r\n                    <SearchIcon />\r\n                  </InputAdornment>\r\n                ),\r\n                endAdornment: searchTerm && (\r\n                  <InputAdornment position=\"end\">\r\n                    <Button size=\"small\" onClick={() => handleSearch('')}>\r\n                      Clear\r\n                    </Button>\r\n                  </InputAdornment>\r\n                ),\r\n              }}\r\n            />\r\n\r\n            <FormControl sx={{ minWidth: 120 }} size=\"small\">\r\n              <InputLabel id=\"role-filter-label\">Role</InputLabel>\r\n              <Select\r\n                labelId=\"role-filter-label\"\r\n                value={selectedRole}\r\n                onChange={handleRoleChange}\r\n                label=\"Role\"\r\n              >\r\n                <MenuItem value=\"\">All Roles</MenuItem>\r\n                <MenuItem value=\"admin\">Admin</MenuItem>\r\n                <MenuItem value=\"manager\">Manager</MenuItem>\r\n                <MenuItem value=\"staff\">Staff</MenuItem>\r\n                <MenuItem value=\"supplier\">Supplier</MenuItem>\r\n                <MenuItem value=\"dealer\">Dealer</MenuItem>\r\n              </Select>\r\n            </FormControl>\r\n            \r\n            <FormControl sx={{ minWidth: 120 }} size=\"small\">\r\n              <InputLabel id=\"status-filter-label\">Status</InputLabel>\r\n              <Select\r\n                labelId=\"status-filter-label\"\r\n                value={selectedStatus}\r\n                onChange={handleStatusChange}\r\n                label=\"Status\"\r\n              >\r\n                <MenuItem value=\"\">All Status</MenuItem>\r\n                <MenuItem value=\"active\">Active</MenuItem>\r\n                <MenuItem value=\"inactive\">Inactive</MenuItem>\r\n                <MenuItem value=\"pending\">Pending</MenuItem>\r\n                <MenuItem value=\"suspended\">Suspended</MenuItem>\r\n              </Select>\r\n            </FormControl>\r\n          </Box>\r\n          \r\n          {!hideActions && (\r\n            <Box sx={{ display: 'flex', gap: 2 }}>\r\n              {onInviteUser && (\r\n                <Button\r\n                  variant=\"outlined\"\r\n                  startIcon={<PersonAddIcon />}\r\n                  onClick={onInviteUser}\r\n                >\r\n                  Invite User\r\n                </Button>\r\n              )}\r\n              \r\n              {onAddUser && (\r\n                <Button\r\n                  variant=\"contained\"\r\n                  startIcon={<AddIcon />}\r\n                  onClick={onAddUser}\r\n                  sx={buttonStyle}\r\n                >\r\n                  Add User\r\n                </Button>\r\n              )}\r\n            </Box>\r\n          )}\r\n        </Box>\r\n      </Box>\r\n\r\n      <DataTable\r\n        columns={columns}\r\n        data={users}\r\n        loading={loading}\r\n        error={error}\r\n        onRowClick={(row) => onEditUser && onEditUser(row.id)}\r\n        pagination={{\r\n          page,\r\n          totalCount,\r\n          rowsPerPage,\r\n          onPageChange: (newPage) => setPage(newPage),\r\n          onRowsPerPageChange: (newRowsPerPage) => {\r\n            setRowsPerPage(newRowsPerPage);\r\n            setPage(0);\r\n          },\r\n        }}\r\n      />\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default UserList;","usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"d:\\All python project\\Tubex\\Frontend\\app\\src\\components\\whitelabel\\verification\\CompanyVerificationList.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'buttonStyles' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":42,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":42,"endColumn":21},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'handleApprove' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":80,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":80,"endColumn":22},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'openRejectDialog' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":95,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":95,"endColumn":25},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'formatDate' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":126,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":126,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'handleDocumentPreview' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":131,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":131,"endColumn":30}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\r\nimport { \r\n  Box, \r\n  Button, \r\n  Typography, \r\n  TextField,\r\n  Dialog,\r\n  DialogTitle,\r\n  DialogContent,\r\n  DialogContentText,\r\n  DialogActions,\r\n  useTheme as useMuiTheme\r\n} from '@mui/material';\r\nimport { useTheme } from '../../../contexts/ThemeContext';\r\nimport { companyVerificationService } from '../../../services/api';\r\n\r\ninterface CompanyVerificationListProps {\r\n  onVerificationComplete?: () => void;\r\n}\r\n\r\nconst CompanyVerificationList: React.FC<CompanyVerificationListProps> = ({\r\n  onVerificationComplete\r\n}) => {\r\n  const { theme: whitelabelTheme } = useTheme();\r\n  const muiTheme = useMuiTheme();\r\n\r\n  const [pendingVerifications, setPendingVerifications] = useState<any[]>([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState<string | null>(null);\r\n\r\n  // For rejection dialog\r\n  const [rejectDialogOpen, setRejectDialogOpen] = useState(false);\r\n  const [rejectCompanyId, setRejectCompanyId] = useState<string | null>(null);\r\n  const [rejectReason, setRejectReason] = useState('');\r\n  const [rejectionError, setRejectionError] = useState<string | null>(null);\r\n\r\n  // For document preview\r\n  const [previewUrl, setPreviewUrl] = useState<string | null>(null);\r\n  const [previewDialogOpen, setPreviewDialogOpen] = useState(false);\r\n\r\n  // Custom button styles based on the whitelabel theme\r\n  const buttonStyles = {\r\n    approve: {\r\n      backgroundColor: whitelabelTheme?.primaryColor || muiTheme.palette.success.main,\r\n      color: '#fff',\r\n      borderRadius: whitelabelTheme?.buttonRadius !== undefined ? `${whitelabelTheme.buttonRadius}px` : undefined,\r\n      '&:hover': {\r\n        backgroundColor: whitelabelTheme?.primaryColor ? \r\n          `${whitelabelTheme.primaryColor}dd` : muiTheme.palette.success.dark,\r\n      },\r\n    },\r\n    reject: {\r\n      backgroundColor: muiTheme.palette.error.main,\r\n      color: '#fff',\r\n      borderRadius: whitelabelTheme?.buttonRadius !== undefined ? `${whitelabelTheme.buttonRadius}px` : undefined,\r\n      '&:hover': {\r\n        backgroundColor: muiTheme.palette.error.dark,\r\n      },\r\n    }\r\n  };\r\n\r\n  const fetchPendingVerifications = async () => {\r\n    setLoading(true);\r\n    setError(null);\r\n    try {\r\n      const verifications = await companyVerificationService.getPendingVerifications();\r\n      setPendingVerifications(verifications || []);\r\n    } catch (err: any) {\r\n      setError(err.message || 'Failed to load pending verifications');\r\n      console.error('Error fetching verifications:', err);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchPendingVerifications();\r\n  }, []);\r\n\r\n  const handleApprove = async (companyId: string) => {\r\n    try {\r\n      await companyVerificationService.approveCompany(companyId);\r\n      // Remove approved company from the list\r\n      setPendingVerifications(prev => prev.filter(v => v.company_id !== companyId));\r\n      \r\n      if (onVerificationComplete) {\r\n        onVerificationComplete();\r\n      }\r\n    } catch (err: any) {\r\n      setError(err.message || `Failed to approve company: ${companyId}`);\r\n      console.error('Error approving company:', err);\r\n    }\r\n  };\r\n\r\n  const openRejectDialog = (companyId: string) => {\r\n    setRejectCompanyId(companyId);\r\n    setRejectReason('');\r\n    setRejectionError(null);\r\n    setRejectDialogOpen(true);\r\n  };\r\n\r\n  const handleReject = async () => {\r\n    if (!rejectCompanyId) return;\r\n    \r\n    if (!rejectReason.trim()) {\r\n      setRejectionError('Rejection reason is required');\r\n      return;\r\n    }\r\n    \r\n    try {\r\n      await companyVerificationService.rejectCompany(rejectCompanyId, rejectReason);\r\n      // Remove rejected company from the list\r\n      setPendingVerifications(prev => prev.filter(v => v.company_id !== rejectCompanyId));\r\n      \r\n      if (onVerificationComplete) {\r\n        onVerificationComplete();\r\n      }\r\n      \r\n      setRejectDialogOpen(false);\r\n    } catch (err: any) {\r\n      setRejectionError(err.message || `Failed to reject company: ${rejectCompanyId}`);\r\n      console.error('Error rejecting company:', err);\r\n    }\r\n  };\r\n\r\n  const formatDate = (dateString: string) => {\r\n    const date = new Date(dateString);\r\n    return date.toLocaleDateString() + ' ' + date.toLocaleTimeString();\r\n  };\r\n\r\n  const handleDocumentPreview = (url: string) => {\r\n    setPreviewUrl(url);\r\n    setPreviewDialogOpen(true);\r\n  };\r\n\r\n  if (loading && pendingVerifications.length === 0) {\r\n    return (\r\n      <Box sx={{ textAlign: 'center', py: 4 }}>\r\n        <Typography>Loading pending verifications...</Typography>\r\n      </Box>\r\n    );\r\n  }\r\n\r\n  if (error) {\r\n    return (\r\n      <Box sx={{ textAlign: 'center', py: 4, color: 'error.main' }}>\r\n        <Typography>{error}</Typography>\r\n        <Button \r\n          variant=\"outlined\"\r\n          onClick={fetchPendingVerifications}\r\n          sx={{ mt: 2 }}\r\n        >\r\n          Retry\r\n        </Button>\r\n      </Box>\r\n    );\r\n  }\r\n\r\n  if (pendingVerifications.length === 0) {\r\n    return (\r\n      <Box sx={{ textAlign: 'center', py: 4 }}>\r\n        <Typography variant=\"h6\">No pending verifications</Typography>\r\n        <Typography variant=\"body2\" color=\"text.secondary\" sx={{ mt: 1 }}>\r\n          All company registrations have been processed\r\n        </Typography>\r\n      </Box>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Box>\r\n      <Typography variant=\"h6\" component=\"h2\" gutterBottom>\r\n        Pending Company Verifications\r\n      </Typography>\r\n      \r\n      <Box sx={{ display: 'flex', flexDirection: 'row', flexWrap: 'wrap', gap: 2 }}>\r\n        {pendingVerifications.map((verification) => (\r\n          <Box\r\n            key={verification.company_id}\r\n            sx={{ flex: '1 1 calc(50% - 16px)', minWidth: '300px', p: 2, border: '1px solid #ddd', borderRadius: 1 }}\r\n          >\r\n            <Typography variant=\"h6\">{verification.company_name}</Typography>\r\n            <Typography variant=\"body2\" color=\"text.secondary\">\r\n              {verification.status}\r\n            </Typography>\r\n          </Box>\r\n        ))}\r\n      </Box>\r\n\r\n      {/* Reject Dialog */}\r\n      <Dialog open={rejectDialogOpen} onClose={() => setRejectDialogOpen(false)}>\r\n        <DialogTitle>Reject Company Registration</DialogTitle>\r\n        <DialogContent>\r\n          <DialogContentText>\r\n            Please provide a reason for rejecting this company registration.\r\n            This information will be shared with the company.\r\n          </DialogContentText>\r\n          <TextField\r\n            autoFocus\r\n            margin=\"dense\"\r\n            label=\"Rejection Reason\"\r\n            fullWidth\r\n            multiline\r\n            rows={3}\r\n            value={rejectReason}\r\n            onChange={(e) => setRejectReason(e.target.value)}\r\n            error={!!rejectionError}\r\n            helperText={rejectionError}\r\n            variant=\"outlined\"\r\n          />\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={() => setRejectDialogOpen(false)}>Cancel</Button>\r\n          <Button onClick={handleReject} color=\"error\" variant=\"contained\">Confirm Rejection</Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n\r\n      {/* Document Preview Dialog */}\r\n      <Dialog \r\n        open={previewDialogOpen} \r\n        onClose={() => setPreviewDialogOpen(false)}\r\n        maxWidth=\"md\"\r\n        fullWidth\r\n      >\r\n        <DialogTitle>Document Preview</DialogTitle>\r\n        <DialogContent>\r\n          {previewUrl && (\r\n            previewUrl.toLowerCase().endsWith('.pdf') ? (\r\n              <Box sx={{ height: '70vh' }}>\r\n                <iframe \r\n                  src={previewUrl} \r\n                  width=\"100%\" \r\n                  height=\"100%\" \r\n                  title=\"Document Preview\"\r\n                />\r\n              </Box>\r\n            ) : (\r\n              <Box sx={{ textAlign: 'center' }}>\r\n                <img \r\n                  src={previewUrl} \r\n                  alt=\"Document Preview\" \r\n                  style={{ maxWidth: '100%', maxHeight: '70vh' }}\r\n                />\r\n              </Box>\r\n            )\r\n          )}\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={() => setPreviewDialogOpen(false)}>Close</Button>\r\n          <Button component=\"a\" href={previewUrl || '#'} target=\"_blank\" rel=\"noopener noreferrer\">\r\n            Open in New Tab\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default CompanyVerificationList;","usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"d:\\All python project\\Tubex\\Frontend\\app\\src\\config\\api.config.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"d:\\All python project\\Tubex\\Frontend\\app\\src\\config\\api.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"d:\\All python project\\Tubex\\Frontend\\app\\src\\config\\index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"d:\\All python project\\Tubex\\Frontend\\app\\src\\config\\theme.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"d:\\All python project\\Tubex\\Frontend\\app\\src\\contexts\\AuthContext.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'initializeAuth'. Either include it or remove the dependency array.","line":31,"column":6,"nodeType":"ArrayExpression","endLine":31,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [initializeAuth]","fix":{"range":[984,986],"text":"[initializeAuth]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { createContext, useState, useContext, useEffect } from 'react';\r\nimport { authService } from '../services/api';\r\nimport { UserInfo } from '../services/api/authService';\r\n\r\ninterface AuthContextType {\r\n  isAuthenticated: boolean;\r\n  user: UserInfo | null;\r\n  loading: boolean;\r\n  login: (email: string, password: string) => Promise<any>;\r\n  logout: () => void;\r\n  validateToken: () => Promise<boolean>;\r\n}\r\n\r\nconst AuthContext = createContext<AuthContextType>({\r\n  isAuthenticated: false,\r\n  user: null,\r\n  loading: true,\r\n  login: async () => ({}),\r\n  logout: () => {},\r\n  validateToken: async () => false,\r\n});\r\n\r\nexport const AuthProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {\r\n  const [user, setUser] = useState<UserInfo | null>(null);\r\n  const [loading, setLoading] = useState(true);\r\n  \r\n  // Check authentication status on mount\r\n  useEffect(() => {\r\n    console.log('AuthProvider: Initializing auth state');\r\n    initializeAuth();\r\n  }, []);\r\n  \r\n  const initializeAuth = async () => {\r\n    setLoading(true);\r\n    try {\r\n      // First check if we have an access token\r\n      const token = localStorage.getItem('access_token');\r\n      if (!token) {\r\n        console.log('No access token found, user is not authenticated');\r\n        setUser(null);\r\n        return;\r\n      }\r\n      \r\n      // Then validate the token\r\n      const isValid = await validateToken();\r\n      if (!isValid) {\r\n        console.log('Token is invalid or expired');\r\n        setUser(null);\r\n        return;\r\n      }\r\n      \r\n      // Get user info from storage\r\n      const storedUser = localStorage.getItem('user_info');\r\n      if (storedUser) {\r\n        try {\r\n          const parsedUser = JSON.parse(storedUser);\r\n          console.log('User info retrieved from storage:', parsedUser);\r\n          setUser(parsedUser);\r\n        } catch (error) {\r\n          console.error('Failed to parse stored user info:', error);\r\n          setUser(null);\r\n        }\r\n      } else {\r\n        console.log('No user info found in storage');\r\n        setUser(null);\r\n      }\r\n    } catch (error) {\r\n      console.error('Error initializing auth:', error);\r\n      setUser(null);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n  \r\n  const login = async (email: string, password: string) => {\r\n    try {\r\n      const response = await authService.login({\r\n        email,\r\n        password,\r\n      });\r\n      \r\n      console.log('Login successful, auth response:', response);\r\n      \r\n      // The tokens should be automatically stored by authService.login\r\n      // We just need to set the user state here\r\n      const userInfo = authService.getCurrentUser();\r\n      console.log('Current user info:', userInfo);\r\n      \r\n      setUser(userInfo);\r\n      return response;\r\n    } catch (error) {\r\n      console.error('Login error:', error);\r\n      throw error;\r\n    }\r\n  };\r\n  \r\n  const logout = () => {\r\n    console.log('Logging out user');\r\n    authService.logout();\r\n    setUser(null);\r\n  };\r\n  \r\n  const validateToken = async (): Promise<boolean> => {\r\n    try {\r\n      console.log('Validating auth token');\r\n      const valid = await authService.validateToken();\r\n      console.log('Token validation result:', valid);\r\n      return valid;\r\n    } catch (error) {\r\n      console.error('Token validation error:', error);\r\n      return false;\r\n    }\r\n  };\r\n  \r\n  return (\r\n    <AuthContext.Provider\r\n      value={{\r\n        isAuthenticated: !!user,\r\n        user,\r\n        loading,\r\n        login,\r\n        logout,\r\n        validateToken,\r\n      }}\r\n    >\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n\r\nexport const useAuth = () => useContext(AuthContext);","usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"d:\\All python project\\Tubex\\Frontend\\app\\src\\contexts\\CompanySettingsContext.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadUserSettings'. Either include it or remove the dependency array.","line":69,"column":6,"nodeType":"ArrayExpression","endLine":69,"endColumn":12,"suggestions":[{"desc":"Update the dependencies array to be: [loadUserSettings, user]","fix":{"range":[2425,2431],"text":"[loadUserSettings, user]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { createContext, useContext, useState, useEffect, ReactNode } from 'react';\r\nimport { \r\n  CompanySettings, \r\n  defaultSettings, \r\n  getEffectiveSettings, \r\n  saveCompanySettings, \r\n  saveUserOverrides, \r\n  loadUserOverrides,\r\n  loadCompanySettings,\r\n  resetSection,\r\n  SettingsSection\r\n} from '../utils/companySettings';\r\nimport { useAuth } from './AuthContext';\r\n\r\n// Define the context type\r\ninterface CompanySettingsContextType {\r\n  settings: CompanySettings;\r\n  updateSettings: (newSettings: Partial<CompanySettings>, applyToCompany?: boolean) => void;\r\n  isCompanyAdmin: boolean;\r\n  applyCompanySettings: () => void;\r\n  resetSettingsSection: (section: string) => void;\r\n  userOverrides: Partial<CompanySettings>;\r\n  companySettings: CompanySettings;\r\n}\r\n\r\n// Create the context\r\nconst CompanySettingsContext = createContext<CompanySettingsContextType>({\r\n  settings: defaultSettings,\r\n  updateSettings: () => {},\r\n  isCompanyAdmin: false,\r\n  applyCompanySettings: () => {},\r\n  resetSettingsSection: () => {},\r\n  userOverrides: {},\r\n  companySettings: defaultSettings,\r\n});\r\n\r\ninterface CompanySettingsProviderProps {\r\n  children: ReactNode;\r\n}\r\n\r\nexport const CompanySettingsProvider: React.FC<CompanySettingsProviderProps> = ({ children }) => {\r\n  const { user } = useAuth();\r\n  const [settings, setSettings] = useState<CompanySettings>(defaultSettings);\r\n  const [companySettings, setCompanySettings] = useState<CompanySettings>(defaultSettings);\r\n  const [userOverrides, setUserOverrides] = useState<Partial<CompanySettings>>({});\r\n  const [isCompanyAdmin, setIsCompanyAdmin] = useState(false);  // Function to load settings on initialization or refresh\r\n  const loadUserSettings = () => {\r\n    if (user && user.userId) {\r\n      // Determine if user is a company admin\r\n      setIsCompanyAdmin(user.role === 'admin');\r\n      \r\n      // Load company settings\r\n      const company = loadCompanySettings(user.companyId);\r\n      setCompanySettings(company);\r\n      \r\n      // Load user overrides\r\n      const overrides = loadUserOverrides(user.userId);\r\n      setUserOverrides(overrides);\r\n      \r\n      // Load effective settings (company + user overrides)\r\n      const effectiveSettings = getEffectiveSettings(user.companyId, user.userId);\r\n      setSettings(effectiveSettings);\r\n    }\r\n  };\r\n\r\n  // Initialize settings when user info becomes available\r\n  useEffect(() => {\r\n    loadUserSettings();\r\n  }, [user]);\r\n  // Update settings\r\n  const updateSettings = (newSettings: Partial<CompanySettings>, applyToCompany = false) => {\r\n    // Create updated settings object using deep merge\r\n    const updatedSettings = {\r\n      ...settings,\r\n      ...newSettings,\r\n      appearance: {\r\n        ...settings.appearance,\r\n        ...(newSettings.appearance || {}),\r\n      },\r\n      notifications: {\r\n        ...settings.notifications,\r\n        ...(newSettings.notifications || {}),\r\n      },\r\n      integrations: {\r\n        ...settings.integrations,\r\n        ...(newSettings.integrations || {}),\r\n      },\r\n    };\r\n\r\n    // Update state\r\n    setSettings(updatedSettings);\r\n\r\n    // Save to storage\r\n    if (user) {      \r\n      if (applyToCompany && isCompanyAdmin) {\r\n        // Save as company settings\r\n        saveCompanySettings(user.companyId, updatedSettings);\r\n        \r\n        // Update company settings state\r\n        setCompanySettings(updatedSettings);\r\n      } else {\r\n        // Save as user overrides\r\n        saveUserOverrides(user.userId, updatedSettings);\r\n        \r\n        // Refresh user overrides\r\n        const overrides = loadUserOverrides(user.userId);\r\n        setUserOverrides(overrides);\r\n      }\r\n    }\r\n  };  // Apply company settings by clearing user overrides\r\n  const applyCompanySettings = () => {\r\n    if (user) {\r\n      // Clear user overrides\r\n      saveUserOverrides(user.userId, {});\r\n      \r\n      // Load fresh effective settings\r\n      const effectiveSettings = getEffectiveSettings(user.companyId, user.userId);\r\n      setSettings(effectiveSettings);\r\n      \r\n      // Update user overrides state\r\n      setUserOverrides({});\r\n    }\r\n  };// Function to reset a specific section\r\n  const resetSettingsSection = (section: string) => {\r\n    if (user && user.userId) {\r\n      // Reset the specified section\r\n      const updatedSettings = resetSection(user.userId, user.companyId, section as SettingsSection);\r\n      \r\n      // Update state\r\n      setSettings(updatedSettings);\r\n      \r\n      // Refresh user overrides\r\n      const overrides = loadUserOverrides(user.userId);\r\n      setUserOverrides(overrides);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <CompanySettingsContext.Provider \r\n      value={{ \r\n        settings, \r\n        updateSettings, \r\n        isCompanyAdmin,\r\n        applyCompanySettings,\r\n        resetSettingsSection,\r\n        userOverrides,\r\n        companySettings \r\n      }}\r\n    >\r\n      {children}\r\n    </CompanySettingsContext.Provider>\r\n  );\r\n};\r\n\r\n// Custom hook for using company settings\r\nexport const useCompanySettings = () => useContext(CompanySettingsContext);\r\n\r\nexport default CompanySettingsContext;\r\n","usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"d:\\All python project\\Tubex\\Frontend\\app\\src\\contexts\\MockDataContext.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"d:\\All python project\\Tubex\\Frontend\\app\\src\\contexts\\NotificationContext.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"d:\\All python project\\Tubex\\Frontend\\app\\src\\contexts\\ThemeContext.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"d:\\All python project\\Tubex\\Frontend\\app\\src\\contexts\\ToastContext.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'toasts' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":36,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":36,"endColumn":16}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { createContext, useContext, useState, useCallback } from 'react';\r\nimport { \r\n  Snackbar,\r\n  Alert,\r\n  AlertColor,\r\n  Slide,\r\n  SlideProps\r\n} from '@mui/material';\r\n\r\ntype SlideDirection = 'up' | 'down' | 'left' | 'right';\r\n\r\ninterface Toast {\r\n  id: number;\r\n  message: string;\r\n  severity: AlertColor;\r\n  duration?: number;\r\n  slideDirection?: SlideDirection;\r\n}\r\n\r\ninterface ToastContextType {\r\n  showToast: (message: string, severity?: AlertColor, duration?: number, slideDirection?: SlideDirection) => void;\r\n  success: (message: string, duration?: number) => void;\r\n  error: (message: string, duration?: number) => void;\r\n  warning: (message: string, duration?: number) => void;\r\n  info: (message: string, duration?: number) => void;\r\n}\r\n\r\nconst ToastContext = createContext<ToastContextType | undefined>(undefined);\r\n\r\n// Custom SlideTransition component\r\nconst SlideTransition = (props: SlideProps & { direction: SlideDirection }) => {\r\n  return <Slide {...props} direction={props.direction} />;\r\n};\r\n\r\nexport const ToastProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {\r\n  const [toasts, setToasts] = useState<Toast[]>([]);\r\n  const [open, setOpen] = useState(false);\r\n  const [current, setCurrent] = useState<Toast | null>(null);\r\n  const [toastIdCounter, setToastIdCounter] = useState(0);\r\n\r\n  const showToast = useCallback((\r\n    message: string, \r\n    severity: AlertColor = 'info', \r\n    duration: number = 4000,\r\n    slideDirection: SlideDirection = 'left'\r\n  ) => {\r\n    const id = toastIdCounter;\r\n    setToastIdCounter(prev => prev + 1);\r\n    \r\n    const newToast = { id, message, severity, duration, slideDirection };\r\n    \r\n    setToasts(prev => [...prev, newToast]);\r\n    \r\n    if (!open) {\r\n      setCurrent(newToast);\r\n      setOpen(true);\r\n    }\r\n  }, [open, toastIdCounter]);\r\n  \r\n  const success = useCallback((message: string, duration?: number) => \r\n    showToast(message, 'success', duration), [showToast]);\r\n    \r\n  const error = useCallback((message: string, duration?: number) => \r\n    showToast(message, 'error', duration), [showToast]);\r\n    \r\n  const warning = useCallback((message: string, duration?: number) => \r\n    showToast(message, 'warning', duration), [showToast]);\r\n    \r\n  const info = useCallback((message: string, duration?: number) => \r\n    showToast(message, 'info', duration), [showToast]);\r\n\r\n  const handleClose = (_event?: React.SyntheticEvent | Event, reason?: string) => {\r\n    if (reason === 'clickaway') {\r\n      return;\r\n    }\r\n    setOpen(false);\r\n  };\r\n\r\n  const handleExited = () => {\r\n    setToasts(prev => {\r\n      const newToasts = prev.filter(toast => toast.id !== current?.id);\r\n      \r\n      if (newToasts.length > 0) {\r\n        setCurrent(newToasts[0]);\r\n        setOpen(true);\r\n      } else {\r\n        setCurrent(null);\r\n      }\r\n      \r\n      return newToasts;\r\n    });\r\n  };\r\n\r\n  return (\r\n    <ToastContext.Provider value={{ showToast, success, error, warning, info }}>\r\n      {children}\r\n      <Snackbar\r\n        open={open}\r\n        autoHideDuration={current?.duration}\r\n        onClose={handleClose}\r\n        TransitionComponent={(props) => (\r\n          <SlideTransition {...props} direction={current?.slideDirection || 'left'} />\r\n        )}\r\n        TransitionProps={{ \r\n          onExited: handleExited \r\n        }}\r\n        anchorOrigin={{ vertical: 'bottom', horizontal: 'right' }}\r\n      >\r\n        <Alert \r\n          onClose={handleClose} \r\n          severity={current?.severity || 'info'}\r\n          variant=\"filled\"\r\n          elevation={6}\r\n          sx={{ width: '100%' }}\r\n        >\r\n          {current?.message || ''}\r\n        </Alert>\r\n      </Snackbar>\r\n    </ToastContext.Provider>\r\n  );\r\n};\r\n\r\nexport const useToast = (): ToastContextType => {\r\n  const context = useContext(ToastContext);\r\n  if (context === undefined) {\r\n    throw new Error('useToast must be used within a ToastProvider');\r\n  }\r\n  return context;\r\n};\r\n","usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"d:\\All python project\\Tubex\\Frontend\\app\\src\\hooks\\useApiRequest.ts","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has an unnecessary dependency: 'onError'. Either exclude it or remove the dependency array.","line":203,"column":5,"nodeType":"ArrayExpression","endLine":213,"endColumn":6,"suggestions":[{"desc":"Update the dependencies array to be: [fn, onSuccess, cache, userCacheKey, cacheDuration, retry, maxRetries, retryDelay]","fix":{"range":[5837,5999],"text":"[fn, onSuccess, cache, userCacheKey, cacheDuration, retry, maxRetries, retryDelay]"}}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'err' is defined but never used. Allowed unused args must match /^_/u.","line":227,"column":37,"nodeType":"Identifier","messageId":"unusedVar","endLine":227,"endColumn":40},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a spread element in its dependency array. This means we can't statically verify whether you've passed the correct dependencies.","line":232,"column":37,"nodeType":"SpreadElement","endLine":232,"endColumn":52}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useCallback, useRef, useEffect } from 'react';\r\n\r\n// Types\r\nexport type ApiRequestStatus = 'idle' | 'loading' | 'success' | 'error';\r\n\r\nexport interface ApiRequestState<T> {\r\n  data: T | null;\r\n  error: Error | null;\r\n  status: ApiRequestStatus;\r\n  timestamp: number | null;\r\n}\r\n\r\nexport interface ApiRequestOptions<T> {\r\n  onSuccess?: (data: T) => void;\r\n  onError?: (error: Error) => void;\r\n  dependencies?: any[];\r\n  initialData?: T | null;\r\n  cache?: boolean;\r\n  cacheKey?: string;\r\n  cacheDuration?: number; // in milliseconds\r\n  retry?: boolean;\r\n  maxRetries?: number;\r\n  retryDelay?: number; // in milliseconds\r\n  manual?: boolean; // if true, request won't be made automatically\r\n}\r\n\r\n// Simple cache implementation\r\ninterface CacheItem<T> {\r\n  data: T;\r\n  timestamp: number;\r\n  expiresAt: number;\r\n}\r\n\r\n// Global cache store for sharing across hook instances\r\nconst apiCache = new Map<string, CacheItem<any>>();\r\n\r\n// Function to create a default cache key from a function and arguments\r\nfunction createCacheKey(\r\n  fn: (...args: any[]) => Promise<any>,\r\n  args: any[]\r\n): string {\r\n  return `${fn.name || 'anonymous'}_${JSON.stringify(args)}`;\r\n}\r\n\r\n// Main hook\r\nexport function useApiRequest<T, Args extends any[] = any[]>(\r\n  fn: (...args: Args) => Promise<T>,\r\n  defaultArgs?: Args,\r\n  options: ApiRequestOptions<T> = {}\r\n) {\r\n  const {\r\n    onSuccess,\r\n    onError,\r\n    dependencies = [],\r\n    initialData = null,\r\n    cache = false,\r\n    cacheKey: userCacheKey,\r\n    cacheDuration = 5 * 60 * 1000, // 5 minutes default\r\n    retry = false,\r\n    maxRetries = 3,\r\n    retryDelay = 1000,\r\n    manual = false,\r\n  } = options;\r\n\r\n  // Initial state\r\n  const [state, setState] = useState<ApiRequestState<T>>({\r\n    data: initialData,\r\n    error: null,\r\n    status: 'idle',\r\n    timestamp: null,\r\n  });\r\n\r\n  // Refs for latest values to avoid closure issues in callbacks\r\n  const latestFn = useRef(fn);\r\n  const latestOptions = useRef(options);\r\n  const retryCount = useRef(0);\r\n  const requestInProgress = useRef(false);\r\n\r\n  // Keep refs updated\r\n  useEffect(() => {\r\n    latestFn.current = fn;\r\n    latestOptions.current = options;\r\n  }, [fn, options]);\r\n\r\n  // Execute request helper function\r\n  const executeRequest = useCallback(\r\n    async (...args: Args): Promise<T> => {\r\n      // Don't allow multiple in-flight requests for the same hook instance\r\n      if (requestInProgress.current) {\r\n        throw new Error('Request already in progress');\r\n      }\r\n\r\n      requestInProgress.current = true;\r\n      retryCount.current = 0;\r\n      \r\n      // If cache is enabled, generate cache key or use provided one\r\n      const cacheKey = cache\r\n        ? userCacheKey || createCacheKey(fn, args)\r\n        : null;\r\n\r\n      // Check cache first if enabled\r\n      if (cache && cacheKey) {\r\n        const cachedItem = apiCache.get(cacheKey);\r\n        \r\n        // If we have a cached item and it's not expired\r\n        if (\r\n          cachedItem &&\r\n          cachedItem.expiresAt > Date.now()\r\n        ) {\r\n          // Update state with cached data\r\n          setState({\r\n            data: cachedItem.data,\r\n            error: null,\r\n            status: 'success',\r\n            timestamp: cachedItem.timestamp,\r\n          });\r\n          \r\n          // Call onSuccess if provided\r\n          if (onSuccess) onSuccess(cachedItem.data);\r\n          \r\n          requestInProgress.current = false;\r\n          return cachedItem.data;\r\n        }\r\n      }\r\n\r\n      // Set loading state\r\n      setState(prev => ({\r\n        ...prev,\r\n        status: 'loading',\r\n        error: null,\r\n      }));\r\n\r\n      // Try to execute the request with retry logic\r\n      const attemptRequest = async (attempt: number): Promise<T> => {\r\n        try {\r\n          const data = await latestFn.current(...args);\r\n          \r\n          // Cache result if caching is enabled\r\n          if (cache && cacheKey) {\r\n            const now = Date.now();\r\n            apiCache.set(cacheKey, {\r\n              data,\r\n              timestamp: now,\r\n              expiresAt: now + cacheDuration,\r\n            });\r\n          }\r\n          \r\n          // Update state with successful data\r\n          setState({\r\n            data,\r\n            error: null,\r\n            status: 'success',\r\n            timestamp: Date.now(),\r\n          });\r\n          \r\n          // Call onSuccess if provided\r\n          if (latestOptions.current.onSuccess) {\r\n            latestOptions.current.onSuccess(data);\r\n          }\r\n          \r\n          requestInProgress.current = false;\r\n          return data;\r\n          \r\n        } catch (error) {\r\n          // If we should retry and haven't exceeded max retries\r\n          if (retry && attempt < maxRetries) {\r\n            retryCount.current = attempt + 1;\r\n            \r\n            // Wait before retrying\r\n            await new Promise(resolve => \r\n              setTimeout(resolve, retryDelay * Math.pow(2, attempt))\r\n            );\r\n            \r\n            // Try again\r\n            return attemptRequest(attempt + 1);\r\n            \r\n          } else {\r\n            // We're out of retries or retrying is disabled\r\n            const errorObj = error instanceof Error ? error : new Error(String(error));\r\n            \r\n            // Update state with the error\r\n            setState({\r\n              data: null,\r\n              error: errorObj,\r\n              status: 'error',\r\n              timestamp: Date.now(),\r\n            });\r\n            \r\n            // Call onError if provided\r\n            if (latestOptions.current.onError) {\r\n              latestOptions.current.onError(errorObj);\r\n            }\r\n            \r\n            requestInProgress.current = false;\r\n            throw errorObj;\r\n          }\r\n        }\r\n      };\r\n\r\n      // Start the initial attempt\r\n      return attemptRequest(0);\r\n    },\r\n    [\r\n      fn,\r\n      onSuccess,\r\n      onError,\r\n      cache,\r\n      userCacheKey,\r\n      cacheDuration,\r\n      retry,\r\n      maxRetries,\r\n      retryDelay,\r\n    ]\r\n  );\r\n\r\n  // Main request function\r\n  const request = useCallback(\r\n    (...args: Args) => {\r\n      return executeRequest(...(args.length ? args : defaultArgs || [] as unknown as Args));\r\n    },\r\n    [executeRequest, defaultArgs]\r\n  );\r\n\r\n  // Auto-execute on mount or when dependencies change, unless manual=true\r\n  useEffect(() => {\r\n    if (!manual && defaultArgs) {\r\n      request(...defaultArgs).catch(err => {\r\n        // Error is already handled in executeRequest\r\n        // This catch is just to prevent unhandled rejection\r\n      });\r\n    }\r\n  }, [request, manual, defaultArgs, ...dependencies]);\r\n\r\n  // Function to invalidate cached data\r\n  const invalidateCache = useCallback(\r\n    (specificCacheKey?: string) => {\r\n      if (cache) {\r\n        if (specificCacheKey) {\r\n          apiCache.delete(specificCacheKey);\r\n        } else if (userCacheKey) {\r\n          apiCache.delete(userCacheKey);\r\n        }\r\n      }\r\n    },\r\n    [cache, userCacheKey]\r\n  );\r\n\r\n  // Reset state\r\n  const reset = useCallback(() => {\r\n    setState({\r\n      data: initialData,\r\n      error: null,\r\n      status: 'idle',\r\n      timestamp: null,\r\n    });\r\n  }, [initialData]);\r\n\r\n  return {\r\n    ...state,\r\n    isLoading: state.status === 'loading',\r\n    isSuccess: state.status === 'success',\r\n    isError: state.status === 'error',\r\n    request,\r\n    reset,\r\n    invalidateCache,\r\n  };\r\n}\r\n\r\nexport default useApiRequest;\r\n","usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"d:\\All python project\\Tubex\\Frontend\\app\\src\\hooks\\useCustomer.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"d:\\All python project\\Tubex\\Frontend\\app\\src\\hooks\\useDebouncedSearch.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"d:\\All python project\\Tubex\\Frontend\\app\\src\\hooks\\useForm.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"d:\\All python project\\Tubex\\Frontend\\app\\src\\hooks\\useInventory.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"d:\\All python project\\Tubex\\Frontend\\app\\src\\hooks\\useInventoryOperations.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'useState' is defined but never used. Allowed unused vars must match /^_/u.","line":1,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":18},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'onInventoryUpdated' is defined but never used. Allowed unused args must match /^_/u.","line":22,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":22,"endColumn":21},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'onInventoryDeleted' is defined but never used. Allowed unused args must match /^_/u.","line":23,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":23,"endColumn":21}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useCallback } from 'react';\r\nimport useTableData from './useTableData';\r\nimport useApiRequest from './useApiRequest';\r\nimport { inventoryService } from '../services/api';\r\nimport { InventoryItem, InventoryCreateInput, ApiResponse } from '../services/api/inventoryService';\r\n\r\ninterface UseInventoryOperationsProps {\r\n  companyId: string;\r\n  warehouseId?: string;\r\n  onInventoryCreated?: (item: InventoryItem) => void;\r\n  onInventoryUpdated?: (item: InventoryItem) => void;\r\n  onInventoryDeleted?: (itemId: string) => void;\r\n}\r\n\r\n/**\r\n * Custom hook for inventory operations\r\n */\r\nexport function useInventoryOperations({\r\n  companyId,\r\n  warehouseId,\r\n  onInventoryCreated,\r\n  onInventoryUpdated,\r\n  onInventoryDeleted\r\n}: UseInventoryOperationsProps) {\r\n  // Function to fetch inventory data with parameters\r\n  const fetchInventoryData = useCallback(\r\n    async (params: any) => {\r\n      if (!companyId) {\r\n        return { data: [], totalCount: 0 };\r\n      }\r\n\r\n      const apiParams = {\r\n        companyId,\r\n        warehouseId,\r\n        page: params.page,\r\n        limit: params.limit,\r\n        sortBy: params.sortBy,\r\n        sortDirection: params.sortDirection,\r\n        search: params.search || undefined,\r\n        ...params.filters\r\n      };\r\n\r\n      try {\r\n        const response = await inventoryService.getInventory(apiParams);\r\n        return {\r\n          data: response.data || [],\r\n          totalCount: response.pagination?.total || response.data?.length || 0\r\n        };\r\n      } catch (error) {\r\n        console.error('Error fetching inventory:', error);\r\n        throw error;\r\n      }\r\n    },\r\n    [companyId, warehouseId]\r\n  );\r\n\r\n  // Use table hook for inventory data\r\n  const inventoryTable = useTableData<InventoryItem>({\r\n    defaultSortBy: 'product.name',\r\n    defaultSortDirection: 'asc',\r\n    fetchDataFn: fetchInventoryData\r\n  });\r\n  // API request for creating inventory item\r\n  const createInventoryRequest = useApiRequest<{ data: InventoryItem }, [InventoryCreateInput]>(\r\n    async (itemData) => {\r\n      return await inventoryService.createInventoryItem(itemData);\r\n    },\r\n    [{ } as InventoryCreateInput], // Provide default args with correct type\r\n    {\r\n      manual: true,\r\n      onSuccess: (response) => {\r\n        inventoryTable.fetchData();\r\n        if (onInventoryCreated && response.data) {\r\n          onInventoryCreated(response.data);\r\n        }\r\n      }\r\n    }\r\n  );\r\n  // API request for adjusting inventory\r\n  const adjustInventoryRequest = useApiRequest<ApiResponse<void>, [string, number, string]>(\r\n    async (inventoryId, adjustment, reason) => {\r\n      return await inventoryService.adjustInventory(inventoryId, { adjustment, reason });\r\n    },\r\n    ['', 0, ''], // Provide default args with correct types\r\n    {\r\n      manual: true,\r\n      onSuccess: () => {\r\n        inventoryTable.fetchData();\r\n      }\r\n    }\r\n  );\r\n  // API request for transferring inventory\r\n  const transferInventoryRequest = useApiRequest<any, [any]>(\r\n    async (transferData) => {\r\n      return await inventoryService.transferInventory(transferData);\r\n    },\r\n    [{}], // Provide a default empty object argument\r\n    {\r\n      manual: true,\r\n      onSuccess: () => {\r\n        inventoryTable.fetchData();\r\n      }\r\n    }\r\n  );\r\n\r\n  // Helper function to create a new inventory item\r\n  const createInventoryItem = useCallback(\r\n    (itemData: InventoryCreateInput) => {\r\n      if (!companyId) {\r\n        return Promise.reject(new Error('Company ID is missing'));\r\n      }\r\n      \r\n      const fullItemData = {\r\n        ...itemData,\r\n        company_id: companyId\r\n      };\r\n      \r\n      return createInventoryRequest.request(fullItemData);\r\n    },\r\n    [companyId, createInventoryRequest]\r\n  );\r\n\r\n  // Helper function to adjust inventory\r\n  const adjustInventory = useCallback(\r\n    (inventoryId: string, adjustment: number, reason: string) => {\r\n      return adjustInventoryRequest.request(inventoryId, adjustment, reason);\r\n    },\r\n    [adjustInventoryRequest]\r\n  );\r\n\r\n  // Helper function to transfer inventory\r\n  const transferInventory = useCallback(\r\n    (sourceWarehouseId: string, targetWarehouseId: string, productId: string, quantity: number) => {\r\n      if (!companyId) {\r\n        return Promise.reject(new Error('Company ID is missing'));\r\n      }\r\n      \r\n      const transferData = {\r\n        source_warehouse_id: sourceWarehouseId,\r\n        target_warehouse_id: targetWarehouseId,\r\n        product_id: productId,\r\n        quantity: quantity\r\n      };\r\n      \r\n      return transferInventoryRequest.request(transferData);\r\n    },\r\n    [companyId, transferInventoryRequest]\r\n  );\r\n\r\n  // Get combined error from any of the API requests\r\n  const error =\r\n    inventoryTable.error ||\r\n    createInventoryRequest.error?.message ||\r\n    adjustInventoryRequest.error?.message ||\r\n    transferInventoryRequest.error?.message;\r\n\r\n  // Check if any request is loading\r\n  const isLoading =\r\n    inventoryTable.loading ||\r\n    createInventoryRequest.isLoading ||\r\n    adjustInventoryRequest.isLoading ||\r\n    transferInventoryRequest.isLoading;\r\n\r\n  // Function to refetch data when warehouse changes\r\n  const refreshInventory = useCallback(() => {\r\n    inventoryTable.fetchData();\r\n  }, [inventoryTable]);\r\n\r\n  return {\r\n    // State\r\n    inventory: inventoryTable.data,\r\n    isLoading,\r\n    error,\r\n    \r\n    // Table state and actions\r\n    page: inventoryTable.page,\r\n    rowsPerPage: inventoryTable.rowsPerPage,\r\n    totalCount: inventoryTable.totalCount,\r\n    sortBy: inventoryTable.sortBy,\r\n    sortDirection: inventoryTable.sortDirection,\r\n    searchQuery: inventoryTable.searchQuery,\r\n    filters: inventoryTable.filters,\r\n    \r\n    // Table handlers\r\n    handlePageChange: inventoryTable.handlePageChange,\r\n    handleRowsPerPageChange: inventoryTable.handleRowsPerPageChange,\r\n    handleSortByChange: inventoryTable.handleSortByChange,\r\n    handleSortDirectionChange: inventoryTable.handleSortDirectionChange,\r\n    handleSearchQueryChange: inventoryTable.handleSearchQueryChange,\r\n    handleFilterChange: inventoryTable.handleFilterChange,\r\n    resetFilters: inventoryTable.resetFilters,\r\n    \r\n    // Inventory operation functions\r\n    refreshInventory,\r\n    createInventoryItem,\r\n    adjustInventory,\r\n    transferInventory,\r\n    \r\n    // API request states\r\n    createInventoryRequest,\r\n    adjustInventoryRequest,\r\n    transferInventoryRequest\r\n  };\r\n}\r\n\r\nexport default useInventoryOperations;\r\n","usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"d:\\All python project\\Tubex\\Frontend\\app\\src\\hooks\\useMockableData.ts","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has missing dependencies: 'apiCall', 'isMockEnabled', and 'mockDataSelector'. Either include them or remove the dependency array. If 'mockDataSelector' changes too often, find the parent component that defines it and wrap that definition in useCallback.","line":70,"column":6,"nodeType":"ArrayExpression","endLine":70,"endColumn":23,"suggestions":[{"desc":"Update the dependencies array to be: [apiCall, isMockEnabled, mockDataSelector]","fix":{"range":[2113,2130],"text":"[apiCall, isMockEnabled, mockDataSelector]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a spread element in its dependency array. This means we can't statically verify whether you've passed the correct dependencies.","line":70,"column":7,"nodeType":"SpreadElement","endLine":70,"endColumn":22}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect } from 'react';\r\nimport { useMockData } from '../contexts/MockDataContext';\r\nimport { isMockApiEnabled } from '../services/api/apiClient';\r\n\r\n/**\r\n * This hook provides a way to use mock data as a fallback when the API is not available.\r\n * It's especially useful during development when you want to work without a backend.\r\n * \r\n * @param apiCall - The function that makes the actual API call\r\n * @param mockDataSelector - A function that selects the appropriate mock data\r\n * @param dependencies - An array of dependencies that should trigger a re-fetch\r\n */\r\nexport function useMockableData<T>(\r\n  apiCall: () => Promise<T>,\r\n  mockDataSelector: () => T,\r\n  dependencies: any[] = []\r\n) {\r\n  const [data, setData] = useState<T | null>(null);\r\n  const [loading, setLoading] = useState<boolean>(true);\r\n  const [error, setError] = useState<Error | null>(null);\r\n  const { isMockEnabled } = useMockData();\r\n\r\n  useEffect(() => {\r\n    let isMounted = true;\r\n\r\n    const fetchData = async () => {\r\n      setLoading(true);\r\n      setError(null);\r\n\r\n      try {\r\n        if (isMockEnabled || isMockApiEnabled) {\r\n          // Use mock data\r\n          const mockData = mockDataSelector();\r\n          \r\n          // Artificial delay to simulate network request\r\n          await new Promise(resolve => setTimeout(resolve, 500));\r\n          \r\n          if (isMounted) {\r\n            setData(mockData);\r\n            setLoading(false);\r\n          }\r\n        } else {\r\n          // Use real API\r\n          const result = await apiCall();\r\n          \r\n          if (isMounted) {\r\n            setData(result);\r\n            setLoading(false);\r\n          }\r\n        }\r\n      } catch (err) {\r\n        console.error('Error fetching data:', err);\r\n        \r\n        if (isMounted) {\r\n          setError(err as Error);\r\n          setLoading(false);\r\n          \r\n          // If real API fails, fallback to mock data\r\n          const mockData = mockDataSelector();\r\n          setData(mockData);\r\n        }\r\n      }\r\n    };\r\n\r\n    fetchData();\r\n\r\n    return () => {\r\n      isMounted = false;\r\n    };\r\n  }, [...dependencies]);\r\n\r\n  return { data, loading, error };\r\n}\r\n\r\nexport default useMockableData;\r\n","usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"d:\\All python project\\Tubex\\Frontend\\app\\src\\hooks\\useNotification.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"d:\\All python project\\Tubex\\Frontend\\app\\src\\hooks\\usePayment.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"d:\\All python project\\Tubex\\Frontend\\app\\src\\hooks\\useTableData.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"d:\\All python project\\Tubex\\Frontend\\app\\src\\hooks\\useWarehouseOperations.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'React' is defined but never used. Allowed unused vars must match /^_/u.","line":1,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":13},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'response' is defined but never used. Allowed unused args must match /^_/u.","line":88,"column":19,"nodeType":"Identifier","messageId":"unusedVar","endLine":88,"endColumn":27}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useCallback, useRef } from 'react';\r\nimport useApiRequest from './useApiRequest';\r\nimport { warehouseService } from '../services/api';\r\nimport { Warehouse, WarehouseCreateInput, WarehouseUpdateInput } from '../services/api/warehouseService';\r\n\r\ninterface UseWarehouseOperationsProps {\r\n  companyId: string;\r\n  onWarehouseCreated?: (warehouse: Warehouse) => void;\r\n  onWarehouseUpdated?: (warehouse: Warehouse) => void;\r\n  onWarehouseDeleted?: (warehouseId: string) => void;\r\n}\r\n\r\n/**\r\n * Custom hook for warehouse CRUD operations\r\n */\r\nexport function useWarehouseOperations({\r\n  companyId,\r\n  onWarehouseCreated,\r\n  onWarehouseUpdated,\r\n  onWarehouseDeleted\r\n}: UseWarehouseOperationsProps) {  // Track the currently selected warehouse\r\n  const [selectedWarehouse, setSelectedWarehouse] = useState<string>('');\r\n  \r\n  // Reference to store the current warehouse ID for delete operation\r\n  const deleteWarehouseIdRef = useRef<string>('');\r\n\r\n  // API request for fetching warehouses\r\n  const warehousesRequest = useApiRequest<{ data: Warehouse[] }>(\r\n    async () => {\r\n      if (!companyId) {\r\n        return { data: [] };\r\n      }\r\n      return await warehouseService.getWarehouses(companyId);\r\n    },\r\n    [],\r\n    {\r\n      dependencies: [companyId],\r\n      manual: !companyId\r\n    }\r\n  );\r\n  // API request for fetching a single warehouse by ID\r\n  const singleWarehouseRequest = useApiRequest<{ data: Warehouse }, [string, string]>(\r\n    async (companyId, warehouseId) => {\r\n      return await warehouseService.getWarehouse(companyId, warehouseId);\r\n    },\r\n    ['', ''], // Default empty string arguments\r\n    { manual: true }\r\n  );\r\n  // API request for creating a warehouse\r\n  const createWarehouseRequest = useApiRequest<{ data: Warehouse }, [string, WarehouseCreateInput]>(\r\n    async (companyId, warehouseData) => {\r\n      return await warehouseService.createWarehouse(companyId, warehouseData);\r\n    },\r\n    ['', {} as WarehouseCreateInput], // Default arguments\r\n    {\r\n      manual: true,\r\n      onSuccess: (response) => {\r\n        warehousesRequest.request();\r\n        if (onWarehouseCreated && response.data) {\r\n          onWarehouseCreated(response.data);\r\n        }\r\n      }\r\n    }\r\n  );\r\n  // API request for updating a warehouse\r\n  const updateWarehouseRequest = useApiRequest<{ data: Warehouse }, [string, string, WarehouseUpdateInput]>(\r\n    async (companyId, warehouseId, warehouseData) => {\r\n      return await warehouseService.updateWarehouse(companyId, warehouseId, warehouseData);\r\n    },\r\n    ['', '', {} as WarehouseUpdateInput], // Default arguments\r\n    {\r\n      manual: true,\r\n      onSuccess: (response) => {\r\n        warehousesRequest.request();\r\n        if (onWarehouseUpdated && response.data) {\r\n          onWarehouseUpdated(response.data);\r\n        }\r\n      }\r\n    }\r\n  );\r\n  // API request for deleting a warehouse\r\n  const deleteWarehouseRequest = useApiRequest<any, [string, string]>(\r\n    async (companyId, warehouseId) => {\r\n      return await warehouseService.deleteWarehouse(companyId, warehouseId);\r\n    },\r\n    ['', ''], // Default arguments\r\n    {      manual: true,\r\n      onSuccess: (response) => {\r\n        // Store warehouseId locally from the request context\r\n        const storedWarehouseId = deleteWarehouseIdRef.current;\r\n        \r\n        warehousesRequest.request();\r\n        if (onWarehouseDeleted && storedWarehouseId) {\r\n          onWarehouseDeleted(storedWarehouseId);\r\n        }\r\n        \r\n        // If the deleted warehouse was selected, reset selection\r\n        if (selectedWarehouse === storedWarehouseId) {\r\n          setSelectedWarehouse('');\r\n        }\r\n      }\r\n    }\r\n  );\r\n\r\n  // Helper function to fetch all warehouses\r\n  const fetchWarehouses = useCallback(() => {\r\n    if (companyId) {\r\n      warehousesRequest.request();\r\n    }\r\n  }, [companyId, warehousesRequest]);\r\n\r\n  // Helper function to fetch a specific warehouse\r\n  const fetchWarehouse = useCallback(\r\n    (warehouseId: string) => {\r\n      if (companyId && warehouseId) {\r\n        return singleWarehouseRequest.request(companyId, warehouseId);\r\n      }\r\n      return Promise.reject(new Error('Company ID or Warehouse ID is missing'));\r\n    },\r\n    [companyId, singleWarehouseRequest]\r\n  );\r\n\r\n  // Helper function to create a new warehouse\r\n  const createWarehouse = useCallback(\r\n    (warehouseData: WarehouseCreateInput) => {\r\n      if (companyId) {\r\n        return createWarehouseRequest.request(companyId, warehouseData);\r\n      }\r\n      return Promise.reject(new Error('Company ID is missing'));\r\n    },\r\n    [companyId, createWarehouseRequest]\r\n  );\r\n\r\n  // Helper function to update a warehouse\r\n  const updateWarehouse = useCallback(\r\n    (warehouseId: string, warehouseData: WarehouseUpdateInput) => {\r\n      if (companyId && warehouseId) {\r\n        return updateWarehouseRequest.request(companyId, warehouseId, warehouseData);\r\n      }\r\n      return Promise.reject(new Error('Company ID or Warehouse ID is missing'));\r\n    },\r\n    [companyId, updateWarehouseRequest]\r\n  );\r\n  // Helper function to delete a warehouse\r\n  const deleteWarehouse = useCallback(\r\n    (warehouseId: string) => {\r\n      if (companyId && warehouseId) {\r\n        // Store the warehouseId in the ref to access it in onSuccess callback\r\n        deleteWarehouseIdRef.current = warehouseId;\r\n        return deleteWarehouseRequest.request(companyId, warehouseId);\r\n      }\r\n      return Promise.reject(new Error('Company ID or Warehouse ID is missing'));\r\n    },\r\n    [companyId, deleteWarehouseRequest]\r\n  );\r\n\r\n  // Get combined error from any of the API requests\r\n  const error =\r\n    warehousesRequest.error ||\r\n    singleWarehouseRequest.error ||\r\n    createWarehouseRequest.error ||\r\n    updateWarehouseRequest.error ||\r\n    deleteWarehouseRequest.error;\r\n\r\n  // Check if any request is loading\r\n  const isLoading =\r\n    warehousesRequest.isLoading ||\r\n    singleWarehouseRequest.isLoading ||\r\n    createWarehouseRequest.isLoading ||\r\n    updateWarehouseRequest.isLoading ||\r\n    deleteWarehouseRequest.isLoading;\r\n\r\n  // Get warehouses from the request data\r\n  const warehouses = warehousesRequest.data?.data || [];\r\n\r\n  return {\r\n    // State\r\n    selectedWarehouse,\r\n    setSelectedWarehouse,\r\n    warehouses,\r\n    error,\r\n    isLoading,\r\n    \r\n    // API request states\r\n    warehousesRequest,\r\n    singleWarehouseRequest,\r\n    createWarehouseRequest,\r\n    updateWarehouseRequest,\r\n    deleteWarehouseRequest,\r\n    \r\n    // Helper methods\r\n    fetchWarehouses,\r\n    fetchWarehouse,\r\n    createWarehouse,\r\n    updateWarehouse,\r\n    deleteWarehouse\r\n  };\r\n}\r\n\r\nexport default useWarehouseOperations;\r\n","usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"d:\\All python project\\Tubex\\Frontend\\app\\src\\index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"d:\\All python project\\Tubex\\Frontend\\app\\src\\pages\\AnalyticsDashboard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"d:\\All python project\\Tubex\\Frontend\\app\\src\\pages\\Dashboard.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'location' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":56,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":56,"endColumn":17},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'fetchInventory'. Either include it or remove the dependency array.","line":143,"column":6,"nodeType":"ArrayExpression","endLine":143,"endColumn":37,"suggestions":[{"desc":"Update the dependencies array to be: [value, companyId, authLoading, fetchInventory]","fix":{"range":[5053,5084],"text":"[value, companyId, authLoading, fetchInventory]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\r\nimport { \r\n  Box, \r\n  Container, \r\n  Paper, \r\n  Typography,\r\n  Tabs,\r\n  Tab,\r\n  CircularProgress,\r\n  Alert,\r\n  Button\r\n} from '@mui/material';\r\nimport PendingEmployeesList from '../components/whitelabel/users/PendingEmployeesList';\r\nimport EmployeeInvitationGenerator from '../components/whitelabel/users/EmployeeInvitationGenerator';\r\nimport { dashboardService } from '../services/api/dashboardService';\r\nimport { productService, orderService, inventoryService } from '../services/api';\r\nimport { useAuth } from '../contexts/AuthContext';\r\nimport { useNavigate, useLocation } from 'react-router-dom';\r\n\r\ninterface TabPanelProps {\r\n  children?: React.ReactNode;\r\n  index: number;\r\n  value: number;\r\n}\r\n\r\nfunction TabPanel(props: TabPanelProps) {\r\n  const { children, value, index, ...other } = props;\r\n\r\n  return (\r\n    <div\r\n      role=\"tabpanel\"\r\n      hidden={value !== index}\r\n      id={`dashboard-tabpanel-${index}`}\r\n      aria-labelledby={`dashboard-tab-${index}`}\r\n      {...other }\r\n    >\r\n      {value === index && (\r\n        <Box sx={{ p: 3 }}>\r\n          {children}\r\n        </Box>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction a11yProps(index: number) {\r\n  return {\r\n    id: `dashboard-tab-${index}`,\r\n    'aria-controls': `dashboard-tabpanel-${index}`,\r\n  };\r\n}\r\n\r\nconst Dashboard: React.FC = () => {\r\n  const { user, loading: authLoading } = useAuth();\r\n  const navigate = useNavigate();\r\n  const location = useLocation();\r\n  const [value, setValue] = useState(0);\r\n  const [companyId, setCompanyId] = useState<string>('');\r\n  \r\n  // State for dashboard overview data\r\n  const [orderSummary, setOrderSummary] = useState<any>(null);\r\n  const [productSummary, setProductSummary] = useState<any>(null);\r\n  const [inventorySummary, setInventorySummary] = useState<any>(null);\r\n  \r\n  // State for tab-specific data\r\n  const [products, setProducts] = useState<any[]>([]);\r\n  const [orders, setOrders] = useState<any[]>([]);\r\n  const [inventory, setInventory] = useState<any[]>([]);\r\n  \r\n  // UI state\r\n  const [loading, setLoading] = useState<boolean>(false);\r\n  const [error, setError] = useState<string | null>(null);\r\n  const [activeTabLoading, setActiveTabLoading] = useState<boolean>(false);\r\n  const [activeTabError, setActiveTabError] = useState<string | null>(null);\r\n\r\n  useEffect(() => {\r\n    if (authLoading) {\r\n      console.log('Dashboard: Auth is loading, companyId not yet set from context.');\r\n      // Optionally, you could clear companyId here if strict reset is needed during auth loading\r\n      // setCompanyId(''); \r\n      return;\r\n    }\r\n\r\n    // Auth process is complete\r\n    if (user?.companyId) {\r\n      setCompanyId(user.companyId);\r\n      console.log('Dashboard: CompanyId set from AuthContext:', user.companyId);\r\n    } else {\r\n      setCompanyId(''); // Clear local companyId if not available from context\r\n      console.log('Dashboard: CompanyId cleared (user or user.companyId missing after auth). User:', user);\r\n      if (user && !user.companyId) {\r\n        console.warn('Dashboard: User object from AuthContext is present but companyId is missing.');\r\n      }\r\n    }\r\n  }, [user, authLoading]);\r\n\r\n  // Main data fetching logic based on active tab and companyId availability\r\n  useEffect(() => {\r\n    if (authLoading) {\r\n      console.log('Dashboard: Auth is loading, deferring data fetch for tab', value);\r\n      if (value === 0) setLoading(true); else setActiveTabLoading(true); // Show loading indicators\r\n      return;\r\n    }\r\n\r\n    // Auth is loaded. Proceed with fetching.\r\n    // Clear previous errors for the current scope (overview or active tab)\r\n    if (value === 0) setError(null); else setActiveTabError(null);\r\n\r\n    console.log(`Dashboard: Fetching data for tab ${value}, companyId: \"${companyId}\"`);\r\n\r\n    switch (value) {\r\n      case 0: // Overview\r\n        fetchDashboardData();\r\n        break;\r\n      case 1: // User Management\r\n        // Components handle their own data.\r\n        // EmployeeInvitationGenerator is passed companyId and should react to its changes.\r\n        // Ensure loading states are reset if they were set by other tabs.\r\n        setActiveTabLoading(false);\r\n        break;\r\n      case 2: // Products\r\n        fetchProducts();\r\n        break;\r\n      case 3: // Orders\r\n        fetchOrders();\r\n        break;\r\n      case 4: // Inventory Tab\r\n        if (companyId) {\r\n          fetchInventory(); // This function explicitly uses companyId\r\n        } else {\r\n          // companyId is not available, and auth is complete.\r\n          console.log('Dashboard: Company ID not available for Inventory tab (Tab 4).');\r\n          setInventory([]); // Clear data\r\n          setActiveTabError('Company ID is not available. Cannot load inventory.');\r\n          setActiveTabLoading(false); // Ensure loading is false\r\n        }\r\n        break;\r\n      default:\r\n        // For any other tabs, ensure loading states are reset.\r\n        if (value !==0) setActiveTabLoading(false); else setLoading(false);\r\n        break;\r\n    }\r\n  }, [value, companyId, authLoading]); // Key dependencies: tab, companyId, and auth status\r\n\r\n  const fetchDashboardData = async () => {\r\n    setLoading(true);\r\n    setError(null);\r\n    \r\n    try {\r\n      // Fetch all summary data in parallel\r\n      // Add individual error handlers for each request to handle gracefully\r\n      const [orders, products, inventory] = await Promise.all([\r\n        dashboardService.getOrderSummary()\r\n          .catch(err => {\r\n            console.error('Failed to load order summary:', err);\r\n            return null;\r\n          }),\r\n        dashboardService.getProductSummary()\r\n          .catch(err => {\r\n            console.error('Failed to load product summary:', err);\r\n            return null;\r\n          }),\r\n        dashboardService.getInventorySummary()  // Pass the companyId from component state\r\n          .catch(err => {\r\n            console.error('Failed to load inventory summary:', err);\r\n            return null;\r\n          })\r\n      ]);\r\n      \r\n      // Set data for each summary individually\r\n      setOrderSummary(orders);\r\n      setProductSummary(products);\r\n      setInventorySummary(inventory);\r\n\r\n      // Show error if all requests failed\r\n      if (!orders && !products && !inventory) {\r\n        setError('Unable to load dashboard data. Please try refreshing the page or contact support if the issue persists.');\r\n      }\r\n    } catch (err: any) {\r\n      console.error('Error fetching dashboard data:', err);\r\n      setError(err.message || 'Failed to load dashboard data');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const fetchProducts = async () => {\r\n    setActiveTabLoading(true);\r\n    setActiveTabError(null);\r\n    \r\n    try {\r\n      const response = await productService.getProducts({ limit: 5 });\r\n      // Using PaginationResponse format\r\n      setProducts(response.products || []);\r\n    } catch (err: any) {\r\n      console.error('Error fetching products:', err);\r\n      setActiveTabError(err.message || 'Failed to load products');\r\n    } finally {\r\n      setActiveTabLoading(false);\r\n    }\r\n  };\r\n\r\n  const fetchOrders = async () => {\r\n    setActiveTabLoading(true);\r\n    setActiveTabError(null);\r\n    \r\n    try {\r\n      const response = await orderService.getOrders({ limit: 5 });\r\n      \r\n      // We know the response is OrdersListResponse with orders array\r\n      if (response && response.orders) {\r\n        setOrders(response.orders);\r\n      } else if (Array.isArray(response)) {\r\n        // Fallback in case of direct array response\r\n        setOrders(response);\r\n      } else {\r\n        console.warn('Unexpected order response format:', response);\r\n        setOrders([]);\r\n      }\r\n    } catch (err: any) {\r\n      console.error('Error fetching orders:', err);\r\n      setActiveTabError(err.message || 'Failed to load orders');\r\n    } finally {\r\n      setActiveTabLoading(false);\r\n    }\r\n  };\r\n\r\n  const fetchInventory = async () => {\r\n    setActiveTabLoading(true);\r\n    setActiveTabError(null);\r\n    \r\n    if (!companyId) {\r\n      console.error('fetchInventory: Company ID is required to fetch inventory');\r\n      setActiveTabError('Company ID is required to fetch inventory');\r\n      setActiveTabLoading(false);\r\n      return;\r\n    }\r\n\r\n    try {\r\n      // Use getInventory instead of getInventoryItems which doesn't exist\r\n      const response = await inventoryService.getInventory({ companyId, limit: 5 });\r\n      setInventory(response.data || []);\r\n    } catch (err: any) {\r\n      console.error('Error fetching inventory:', err);\r\n      setActiveTabError(err.message || 'Failed to load inventory');\r\n    } finally {\r\n      setActiveTabLoading(false);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    console.log('Dashboard: Current local companyId state updated:', companyId);\r\n  }, [companyId]); // Debug log for local companyId state changes\r\n\r\n  const handleChange = (event: React.SyntheticEvent, newValue: number) => {\r\n    setValue(newValue);\r\n  };\r\n\r\n  // Handle navigation with query params instead of routes\r\n  const handleNavigation = (path: string) => {\r\n    // Extract the base path and action\r\n    const [basePath, action] = path.split('/').filter(Boolean);\r\n    \r\n    if (action === 'create' || action === 'transfer' || action === 'adjust') {\r\n      // Instead of navigating to a new route, add query param to existing route\r\n      navigate(`/${basePath}?action=${action}`);\r\n    } else if (path.includes('/')) {\r\n      // For item details, extract the ID and use query param\r\n      const segments = path.split('/');\r\n      const id = segments[segments.length - 1];\r\n      if (segments.length > 2 && segments[2] === 'adjust') {\r\n        navigate(`/${basePath}?id=${id}&action=adjust`);\r\n      } else {\r\n        navigate(`/${basePath}?id=${id}`);\r\n      }\r\n    } else {\r\n      // Regular navigation for main sections\r\n      navigate(path);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Container maxWidth=\"lg\" sx={{ mt: 4, mb: 4 }}>\r\n      {/* Sticky Dashboard Header */}\r\n      <Box position=\"sticky\" top={0} zIndex={10} bgcolor=\"background.paper\" boxShadow={1} borderRadius={2} px={{ xs: 2, md: 4 }} py={2} mb={3}>\r\n        <Typography component=\"h1\" variant=\"h4\" color=\"primary.main\" fontWeight={700}>\r\n          Tubex Dashboard\r\n        </Typography>\r\n        <Typography variant=\"body1\" color=\"text.secondary\">\r\n          Manage your inventory, products, orders, and employees from this central dashboard.\r\n        </Typography>\r\n      </Box>\r\n\r\n      <Box sx={{ display: 'flex', flexDirection: 'column', gap: 4 }}>\r\n        {/* Dashboard Tabs */}\r\n        <Paper sx={{ width: '100%', borderRadius: 3, boxShadow: 2, p: { xs: 1, md: 2 } }}>\r\n          <Box sx={{ borderBottom: 1, borderColor: 'divider', bgcolor: 'grey.50', borderRadius: 2 }}>\r\n            <Tabs \r\n              value={value} \r\n              onChange={handleChange} \r\n              aria-label=\"dashboard tabs\"\r\n              variant=\"scrollable\"\r\n              scrollButtons=\"auto\"\r\n            >\r\n              <Tab label=\"Overview\" {...a11yProps(0)} />\r\n              <Tab label=\"User Management\" {...a11yProps(1)} />\r\n              <Tab label=\"Products\" {...a11yProps(2)} />\r\n              <Tab label=\"Orders\" {...a11yProps(3)} />\r\n              <Tab label=\"Inventory\" {...a11yProps(4)} />\r\n            </Tabs>\r\n          </Box>\r\n\r\n          {/* Overview Tab */}\r\n          <TabPanel value={value} index={0}>\r\n            {error && (\r\n              <Alert severity=\"error\" sx={{ mb: 2 }}>\r\n                {error}\r\n                <Button \r\n                  size=\"small\" \r\n                  sx={{ ml: 2 }} \r\n                  onClick={() => fetchDashboardData()}\r\n                >\r\n                  Retry\r\n                </Button>\r\n              </Alert>\r\n            )}\r\n            {loading ? (\r\n              <Box sx={{ display: 'flex', justifyContent: 'center', p: 4 }}>\r\n                <CircularProgress />\r\n              </Box>\r\n            ) : (\r\n              <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 3, justifyContent: { xs: 'center', md: 'flex-start' } }}>\r\n                {/* Orders Summary */}\r\n                <Box sx={{ flex: '1 1 320px', minWidth: 260 }}>\r\n                  <Paper sx={{ p: 3, borderRadius: 3, bgcolor: 'grey.100', height: 240, display: 'flex', flexDirection: 'column', justifyContent: 'center', boxShadow: 0 }}>\r\n                    <Typography variant=\"subtitle1\" fontWeight={700} color=\"primary.main\" gutterBottom>\r\n                      Recent Orders\r\n                    </Typography>\r\n                    {orderSummary ? (\r\n                      <Box>\r\n                        <Typography variant=\"body2\">\r\n                          <strong>Total Orders:</strong> {orderSummary.totalOrders || 0}\r\n                        </Typography>\r\n                        <Typography variant=\"body2\">\r\n                          <strong>Pending Orders:</strong> {orderSummary.pendingOrders || 0}\r\n                        </Typography>\r\n                        {orderSummary.recentOrders?.length > 0 ? (\r\n                          <Typography variant=\"body2\" sx={{ mt: 2 }}>\r\n                            <strong>Latest:</strong> {orderSummary.recentOrders[0]?.customer || 'N/A'} - ${orderSummary.recentOrders[0]?.total || 0}\r\n                          </Typography>\r\n                        ) : (\r\n                          <Typography variant=\"body2\" sx={{ mt: 2 }}>No recent orders</Typography>\r\n                        )}\r\n                      </Box>\r\n                    ) : (\r\n                      <Typography variant=\"body2\" color=\"text.secondary\">No order data available</Typography>\r\n                    )}\r\n                  </Paper>\r\n                </Box>\r\n                {/* Products Summary */}\r\n                <Box sx={{ flex: '1 1 320px', minWidth: 260 }}>\r\n                  <Paper sx={{ p: 3, borderRadius: 3, bgcolor: 'grey.100', height: 240, display: 'flex', flexDirection: 'column', justifyContent: 'center', boxShadow: 0 }}>\r\n                    <Typography variant=\"subtitle1\" fontWeight={700} color=\"primary.main\" gutterBottom>\r\n                      Products\r\n                    </Typography>\r\n                    {productSummary ? (\r\n                      <Box>\r\n                        <Typography variant=\"body2\">\r\n                          <strong>Total Products:</strong> {productSummary.totalProducts || 0}\r\n                        </Typography>\r\n                        <Typography variant=\"body2\" sx={{ mt: 2 }}>\r\n                          <strong>Featured Products:</strong>\r\n                        </Typography>\r\n                        {productSummary.featuredProducts?.length > 0 ? (\r\n                          <Box>\r\n                            {productSummary.featuredProducts.slice(0, 2).map((product: any) => (\r\n                              <Typography key={product.id} variant=\"body2\">\r\n                                {product.name} - ${product.price}\r\n                              </Typography>\r\n                            ))}\r\n                          </Box>\r\n                        ) : (\r\n                          <Typography variant=\"body2\">No featured products</Typography>\r\n                        )}\r\n                      </Box>\r\n                    ) : (\r\n                      <Typography variant=\"body2\" color=\"text.secondary\">No product data available</Typography>\r\n                    )}\r\n                  </Paper>\r\n                </Box>\r\n                {/* Inventory Summary */}\r\n                <Box sx={{ flex: '1 1 320px', minWidth: 260 }}>\r\n                  <Paper sx={{ p: 3, borderRadius: 3, bgcolor: 'grey.100', height: 240, display: 'flex', flexDirection: 'column', justifyContent: 'center', boxShadow: 0 }}>\r\n                    <Typography variant=\"subtitle1\" fontWeight={700} color=\"primary.main\" gutterBottom>\r\n                      Inventory Status\r\n                    </Typography>\r\n                    {inventorySummary ? (\r\n                      <Box>\r\n                        <Typography variant=\"body2\">\r\n                          <strong>Total Items:</strong> {inventorySummary.totalItems || 0}\r\n                        </Typography>\r\n                        <Typography variant=\"body2\">\r\n                          <strong>Low Stock Items:</strong> {inventorySummary.lowStockItems || 0}\r\n                        </Typography>\r\n                        <Typography variant=\"body2\">\r\n                          <strong>Warehouse Utilization:</strong> {inventorySummary.warehouseUtilization || 0}%\r\n                        </Typography>\r\n                      </Box>\r\n                    ) : (\r\n                      <Typography variant=\"body2\" color=\"text.secondary\">No inventory data available</Typography>\r\n                    )}\r\n                  </Paper>\r\n                </Box>\r\n              </Box>\r\n            )}\r\n          </TabPanel>\r\n          \r\n          {/* User Management Tab */}\r\n          <TabPanel value={value} index={1}>\r\n            <Box sx={{ display: 'flex', flexDirection: 'column', gap: 3 }}>\r\n              <Box>\r\n                <EmployeeInvitationGenerator companyId={companyId} />\r\n              </Box>\r\n              <Box>\r\n                <PendingEmployeesList onEmployeeStatusChange={() => {}} />\r\n              </Box>\r\n            </Box>\r\n          </TabPanel>\r\n\r\n          {/* Products Tab */}\r\n          <TabPanel value={value} index={2}>\r\n            <Box sx={{ display: 'flex', flexDirection: 'column', gap: 2 }}>\r\n              <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 1 }}>\r\n                <Typography variant=\"h6\" fontWeight={700} color=\"primary.main\">Product Management</Typography>\r\n                <Button \r\n                  variant=\"contained\" \r\n                  color=\"primary\"\r\n                  onClick={() => handleNavigation('/products/create')}\r\n                >\r\n                  Add New Product\r\n                </Button>\r\n              </Box>\r\n              {activeTabError && (\r\n                <Alert severity=\"error\" sx={{ mb: 2 }}>\r\n                  {activeTabError}\r\n                  <Button \r\n                    size=\"small\" \r\n                    sx={{ ml: 2 }} \r\n                    onClick={() => fetchProducts()}\r\n                  >\r\n                    Retry\r\n                  </Button>\r\n                </Alert>\r\n              )}\r\n              {activeTabLoading ? (\r\n                <Box sx={{ display: 'flex', justifyContent: 'center', p: 4 }}>\r\n                  <CircularProgress />\r\n                </Box>\r\n              ) : (\r\n                <>\r\n                  {products.length > 0 ? (\r\n                    <Paper sx={{ width: '100%', overflow: 'auto', borderRadius: 2, boxShadow: 0 }}>\r\n                      <Box sx={{ p: 2 }}>\r\n                        <Typography variant=\"subtitle1\" fontWeight={700} color=\"primary.main\" gutterBottom>\r\n                          Recent Products\r\n                        </Typography>\r\n                        <Box component=\"table\" sx={{ width: '100%', borderCollapse: 'collapse' }}>\r\n                          <Box component=\"thead\" sx={{ bgcolor: 'grey.50' }}>\r\n                            <Box component=\"tr\" sx={{ borderBottom: '1px solid #e0e0e0' }}>\r\n                              <Box component=\"th\" sx={{ p: 1, textAlign: 'left' }}>Name</Box>\r\n                              <Box component=\"th\" sx={{ p: 1, textAlign: 'left' }}>Price</Box>\r\n                              <Box component=\"th\" sx={{ p: 1, textAlign: 'left' }}>Status</Box>\r\n                              <Box component=\"th\" sx={{ p: 1, textAlign: 'left' }}>Actions</Box>\r\n                            </Box>\r\n                          </Box>\r\n                          <Box component=\"tbody\">\r\n                            {products.map((product) => (\r\n                              <Box component=\"tr\" key={product.id} sx={{ borderBottom: '1px solid #e0e0e0', transition: 'background 0.2s', '&:hover': { bgcolor: 'grey.100' } }}>\r\n                                <Box component=\"td\" sx={{ p: 1 }}>{product.name}</Box>\r\n                                <Box component=\"td\" sx={{ p: 1 }}>${product.base_price}</Box>\r\n                                <Box component=\"td\" sx={{ p: 1 }}>{product.status}</Box>\r\n                                <Box component=\"td\" sx={{ p: 1 }}>\r\n                                  <Button \r\n                                    size=\"small\" \r\n                                    variant=\"outlined\"\r\n                                    onClick={() => handleNavigation(`/products/${product.id}`)}\r\n                                  >\r\n                                    View\r\n                                  </Button>\r\n                                </Box>\r\n                              </Box>\r\n                            ))}\r\n                          </Box>\r\n                        </Box>\r\n                      </Box>\r\n                      <Box sx={{ p: 2, display: 'flex', justifyContent: 'flex-end' }}>\r\n                        <Button \r\n                          onClick={() => handleNavigation('/products')}\r\n                          color=\"primary\"\r\n                        >\r\n                          View All Products\r\n                        </Button>\r\n                      </Box>\r\n                    </Paper>\r\n                  ) : (\r\n                    <Paper sx={{ p: 3, textAlign: 'center', borderRadius: 2, boxShadow: 0 }}>\r\n                      <Typography>No products found</Typography>\r\n                      <Button \r\n                        variant=\"outlined\" \r\n                        color=\"primary\" \r\n                        sx={{ mt: 2 }}\r\n                        onClick={() => handleNavigation('/products/create')}\r\n                      >\r\n                        Add Your First Product\r\n                      </Button>\r\n                    </Paper>\r\n                  )}\r\n                </>\r\n              )}\r\n            </Box>\r\n          </TabPanel>\r\n\r\n          {/* Orders Tab */}\r\n          <TabPanel value={value} index={3}>\r\n            <Box sx={{ display: 'flex', flexDirection: 'column', gap: 2 }}>\r\n              <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 1 }}>\r\n                <Typography variant=\"h6\" fontWeight={700} color=\"primary.main\">Order Management</Typography>\r\n                <Button \r\n                  variant=\"contained\" \r\n                  color=\"primary\"\r\n                  onClick={() => handleNavigation('/orders/create')}\r\n                >\r\n                  Create New Order\r\n                </Button>\r\n              </Box>\r\n              {activeTabError && (\r\n                <Alert severity=\"error\" sx={{ mb: 2 }}>\r\n                  {activeTabError}\r\n                  <Button \r\n                    size=\"small\" \r\n                    sx={{ ml: 2 }} \r\n                    onClick={() => fetchOrders()}\r\n                  >\r\n                    Retry\r\n                  </Button>\r\n                </Alert>\r\n              )}\r\n              {activeTabLoading ? (\r\n                <Box sx={{ display: 'flex', justifyContent: 'center', p: 4 }}>\r\n                  <CircularProgress />\r\n                </Box>\r\n              ) : (\r\n                <>\r\n                  {orders.length > 0 ? (\r\n                    <Paper sx={{ width: '100%', overflow: 'auto', borderRadius: 2, boxShadow: 0 }}>\r\n                      <Box sx={{ p: 2 }}>\r\n                        <Typography variant=\"subtitle1\" fontWeight={700} color=\"primary.main\" gutterBottom>\r\n                          Recent Orders\r\n                        </Typography>\r\n                        <Box component=\"table\" sx={{ width: '100%', borderCollapse: 'collapse' }}>\r\n                          <Box component=\"thead\" sx={{ bgcolor: 'grey.50' }}>\r\n                            <Box component=\"tr\" sx={{ borderBottom: '1px solid #e0e0e0' }}>\r\n                              <Box component=\"th\" sx={{ p: 1, textAlign: 'left' }}>Order ID</Box>\r\n                              <Box component=\"th\" sx={{ p: 1, textAlign: 'left' }}>Date</Box>\r\n                              <Box component=\"th\" sx={{ p: 1, textAlign: 'left' }}>Amount</Box>\r\n                              <Box component=\"th\" sx={{ p: 1, textAlign: 'left' }}>Status</Box>\r\n                              <Box component=\"th\" sx={{ p: 1, textAlign: 'left' }}>Actions</Box>\r\n                            </Box>\r\n                          </Box>\r\n                          <Box component=\"tbody\">\r\n                            {orders.map((order) => (\r\n                              <Box component=\"tr\" key={order.id} sx={{ borderBottom: '1px solid #e0e0e0', transition: 'background 0.2s', '&:hover': { bgcolor: 'grey.100' } }}>\r\n                                <Box component=\"td\" sx={{ p: 1 }}>#{order.id.slice(-6)}</Box>\r\n                                <Box component=\"td\" sx={{ p: 1 }}>{new Date(order.createdAt).toLocaleDateString()}</Box>\r\n                                <Box component=\"td\" sx={{ p: 1 }}>${order.totalAmount}</Box>\r\n                                <Box component=\"td\" sx={{ p: 1 }}>\r\n                                  <Box sx={{\r\n                                    display: 'inline-block',\r\n                                    px: 1,\r\n                                    py: 0.5,\r\n                                    borderRadius: 1,\r\n                                    fontSize: '0.75rem',\r\n                                    bgcolor: \r\n                                      order.status === 'delivered' ? 'success.light' : \r\n                                      order.status === 'cancelled' ? 'error.light' :\r\n                                      order.status === 'processing' ? 'info.light' : 'warning.light'\r\n                                  }}>\r\n                                    {order.status}\r\n                                  </Box>\r\n                                </Box>\r\n                                <Box component=\"td\" sx={{ p: 1 }}>\r\n                                  <Button \r\n                                    size=\"small\" \r\n                                    variant=\"outlined\"\r\n                                    onClick={() => handleNavigation(`/orders/${order.id}`)}\r\n                                  >\r\n                                    View\r\n                                  </Button>\r\n                                </Box>\r\n                              </Box>\r\n                            ))}\r\n                          </Box>\r\n                        </Box>\r\n                      </Box>\r\n                      <Box sx={{ p: 2, display: 'flex', justifyContent: 'flex-end' }}>\r\n                        <Button \r\n                          onClick={() => handleNavigation('/orders')}\r\n                          color=\"primary\"\r\n                        >\r\n                          View All Orders\r\n                        </Button>\r\n                      </Box>\r\n                    </Paper>\r\n                  ) : (\r\n                    <Paper sx={{ p: 3, textAlign: 'center', borderRadius: 2, boxShadow: 0 }}>\r\n                      <Typography>No orders found</Typography>\r\n                      <Button \r\n                        variant=\"outlined\" \r\n                        color=\"primary\" \r\n                        sx={{ mt: 2 }}\r\n                        onClick={() => handleNavigation('/orders/create')}\r\n                      >\r\n                        Create Your First Order\r\n                      </Button>\r\n                    </Paper>\r\n                  )}\r\n                </>\r\n              )}\r\n            </Box>\r\n          </TabPanel>\r\n\r\n          {/* Inventory Tab */}\r\n          <TabPanel value={value} index={4}>\r\n            <Box sx={{ display: 'flex', flexDirection: 'column', gap: 2 }}>\r\n              <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 1 }}>\r\n                <Typography variant=\"h6\" fontWeight={700} color=\"primary.main\">Inventory Management</Typography>\r\n                <Box>\r\n                  <Button \r\n                    variant=\"contained\" \r\n                    color=\"primary\"\r\n                    onClick={() => handleNavigation('/inventory/create')}\r\n                    sx={{ mr: 1 }}\r\n                  >\r\n                    Add Inventory Item\r\n                  </Button>\r\n                  <Button\r\n                    variant=\"outlined\"\r\n                    onClick={() => handleNavigation('/inventory/transfer')}\r\n                  >\r\n                    Transfer Stock\r\n                  </Button>\r\n                </Box>\r\n              </Box>\r\n              {activeTabError && (\r\n                <Alert severity=\"error\" sx={{ mb: 2 }}>\r\n                  {activeTabError}\r\n                  <Button \r\n                    size=\"small\" \r\n                    sx={{ ml: 2 }} \r\n                    onClick={() => fetchInventory()}\r\n                  >\r\n                    Retry\r\n                  </Button>\r\n                </Alert>\r\n              )}\r\n              {activeTabLoading ? (\r\n                <Box sx={{ display: 'flex', justifyContent: 'center', p: 4 }}>\r\n                  <CircularProgress />\r\n                </Box>\r\n              ) : (\r\n                <>\r\n                  {inventory.length > 0 ? (\r\n                    <Paper sx={{ width: '100%', overflow: 'auto', borderRadius: 2, boxShadow: 0 }}>\r\n                      <Box sx={{ p: 2 }}>\r\n                        <Typography variant=\"subtitle1\" fontWeight={700} color=\"primary.main\" gutterBottom>\r\n                          Current Inventory\r\n                        </Typography>\r\n                        <Box component=\"table\" sx={{ width: '100%', borderCollapse: 'collapse' }}>\r\n                          <Box component=\"thead\" sx={{ bgcolor: 'grey.50' }}>\r\n                            <Box component=\"tr\" sx={{ borderBottom: '1px solid #e0e0e0' }}>\r\n                              <Box component=\"th\" sx={{ p: 1, textAlign: 'left' }}>Product</Box>\r\n                              <Box component=\"th\" sx={{ p: 1, textAlign: 'left' }}>Warehouse</Box>\r\n                              <Box component=\"th\" sx={{ p: 1, textAlign: 'left' }}>Quantity</Box>\r\n                              <Box component=\"th\" sx={{ p: 1, textAlign: 'left' }}>Status</Box>\r\n                              <Box component=\"th\" sx={{ p: 1, textAlign: 'left' }}>Actions</Box>\r\n                            </Box>\r\n                          </Box>\r\n                          <Box component=\"tbody\">\r\n                            {inventory.map((item) => (\r\n                              <Box component=\"tr\" key={item.id} sx={{ borderBottom: '1px solid #e0e0e0', transition: 'background 0.2s', '&:hover': { bgcolor: 'grey.100' } }}>\r\n                                <Box component=\"td\" sx={{ p: 1 }}>{item.product?.name || 'Unknown Product'}</Box>\r\n                                <Box component=\"td\" sx={{ p: 1 }}>{item.warehouse?.name || 'Unknown Warehouse'}</Box>\r\n                                <Box component=\"td\" sx={{ p: 1 }}>{item.quantity} {item.unit}</Box>\r\n                                <Box component=\"td\" sx={{ p: 1 }}>\r\n                                  <Box sx={{\r\n                                    display: 'inline-block',\r\n                                    px: 1,\r\n                                    py: 0.5,\r\n                                    borderRadius: 1,\r\n                                    fontSize: '0.75rem',\r\n                                    bgcolor: \r\n                                      (item.stockStatus?.isLow) ? 'error.light' : \r\n                                      (item.quantity === 0) ? 'warning.light' : 'success.light'\r\n                                  }}>\r\n                                    {item.stockStatus?.isLow ? 'Low Stock' : \r\n                                     item.quantity === 0 ? 'Out of Stock' : 'In Stock'}\r\n                                  </Box>\r\n                                </Box>\r\n                                <Box component=\"td\" sx={{ p: 1 }}>\r\n                                  <Button \r\n                                    size=\"small\" \r\n                                    variant=\"outlined\"\r\n                                    onClick={() => handleNavigation(`/inventory/${item.id}`)}\r\n                                    sx={{ mr: 1 }}\r\n                                  >\r\n                                    View\r\n                                  </Button>\r\n                                  <Button \r\n                                    size=\"small\" \r\n                                    variant=\"outlined\"\r\n                                    color=\"secondary\"\r\n                                    onClick={() => handleNavigation(`/inventory/${item.id}/adjust`)}\r\n                                  >\r\n                                    Adjust\r\n                                  </Button>\r\n                                </Box>\r\n                              </Box>\r\n                            ))}\r\n                          </Box>\r\n                        </Box>\r\n                      </Box>\r\n                      <Box sx={{ p: 2, display: 'flex', justifyContent: 'flex-end' }}>\r\n                        <Button \r\n                          onClick={() => handleNavigation('/inventory')}\r\n                          color=\"primary\"\r\n                        >\r\n                          View All Inventory\r\n                        </Button>\r\n                      </Box>\r\n                    </Paper>\r\n                  ) : (\r\n                    <Paper sx={{ p: 3, textAlign: 'center', borderRadius: 2, boxShadow: 0 }}>\r\n                      <Typography>No inventory items found</Typography>\r\n                      <Button \r\n                        variant=\"outlined\" \r\n                        color=\"primary\" \r\n                        sx={{ mt: 2 }}\r\n                        onClick={() => handleNavigation('/inventory/create')}\r\n                      >\r\n                        Add Your First Inventory Item\r\n                      </Button>\r\n                    </Paper>\r\n                  )}\r\n                </>\r\n              )}\r\n            </Box>\r\n          </TabPanel>\r\n        </Paper>\r\n      </Box>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default Dashboard;","usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"d:\\All python project\\Tubex\\Frontend\\app\\src\\pages\\ForgotPassword.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"d:\\All python project\\Tubex\\Frontend\\app\\src\\pages\\InventoryManagement.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'inventory' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":57,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":57,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'setInventory' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":57,"column":21,"nodeType":"Identifier","messageId":"unusedVar","endLine":57,"endColumn":33},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'loading' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":58,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":58,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":59,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":59,"endColumn":15},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'fetchAlerts'. Either include it or remove the dependency array.","line":88,"column":6,"nodeType":"ArrayExpression","endLine":88,"endColumn":32,"suggestions":[{"desc":"Update the dependencies array to be: [companyId, fetchAlerts, isInitialized]","fix":{"range":[2971,2997],"text":"[companyId, fetchAlerts, isInitialized]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'fetchInventoryItem'. Either include it or remove the dependency array.","line":163,"column":6,"nodeType":"ArrayExpression","endLine":163,"endColumn":23,"suggestions":[{"desc":"Update the dependencies array to be: [fetchInventoryItem, location.search]","fix":{"range":[5405,5422],"text":"[fetchInventoryItem, location.search]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\r\nimport { useLocation } from 'react-router-dom';\r\nimport { \r\n  Box, \r\n  Container, \r\n  Paper, \r\n  Typography, \r\n  Button,\r\n  Tabs,\r\n  Tab,\r\n  Alert\r\n} from '@mui/material';\r\nimport  InventoryList  from '../components/whitelabel/inventory/InventoryList';\r\nimport  InventoryTransferModal  from '../components/inventory/InventoryTransferModal';\r\nimport  InventoryAuditLog  from '../components/inventory/InventoryAuditLog';\r\nimport { inventoryService } from '../services/api';\r\nimport { useAuth } from '../contexts/AuthContext';\r\n\r\ninterface TabPanelProps {\r\n  children?: React.ReactNode;\r\n  index: number;\r\n  value: number;\r\n}\r\n\r\nfunction TabPanel(props: TabPanelProps) {\r\n  const { children, value, index, ...other } = props;\r\n\r\n  return (\r\n    <div\r\n      role=\"tabpanel\"\r\n      hidden={value !== index}\r\n      id={`inventory-tabpanel-${index}`}\r\n      aria-labelledby={`inventory-tab-${index}`}\r\n      {...other}\r\n    >\r\n      {value === index && (\r\n        <Box sx={{ p: 3 }}>\r\n          {children}\r\n        </Box>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction a11yProps(index: number) {\r\n  return {\r\n    id: `inventory-tab-${index}`,\r\n    'aria-controls': `inventory-tabpanel-${index}`,\r\n  };\r\n}\r\n\r\nconst InventoryManagement: React.FC = () => {\r\n  const [tabValue, setTabValue] = useState(0);\r\n  const [transferModalOpen, setTransferModalOpen] = useState(false);\r\n  const [selectedProduct, setSelectedProduct] = useState<{ id: string; name: string } | null>(null);\r\n  const [selectedInventoryItem, setSelectedInventoryItem] = useState<string | null>(null);\r\n  const [inventory, setInventory] = useState<any[]>([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState<string | null>(null);\r\n  const [viewMode, setViewMode] = useState<'list' | 'create' | 'view' | 'adjust' | 'transfer'>('list');\r\n  const [selectedItem, setSelectedItem] = useState<any | null>(null);\r\n  const location = useLocation();\r\n  // Get company ID from auth context\r\n  const { user, loading: authLoading } = useAuth();\r\n  const [companyId, setCompanyId] = useState<string>('');\r\n  const [isInitialized, setIsInitialized] = useState(false);\r\n  \r\n  const [lowStockItems, setLowStockItems] = useState<any[]>([]);\r\n  const [expiringItems, setExpiringItems] = useState<any[]>([]);\r\n  const [alertsLoading, setAlertsLoading] = useState(false);\r\n  const [alertsError, setAlertsError] = useState<string | null>(null);\r\n\r\n  // Set companyId from auth context when user data is available\r\n  useEffect(() => {\r\n    if (user && user.companyId) {\r\n      console.log('Setting company ID:', user.companyId);\r\n      setCompanyId(user.companyId);\r\n      setIsInitialized(true);\r\n    } else if (!authLoading) {\r\n      console.error('User or companyId not available');\r\n      setIsInitialized(true);\r\n    }\r\n  }, [user, authLoading]);\r\n  useEffect(() => {\r\n    if (companyId && isInitialized) {\r\n      fetchAlerts();\r\n    }\r\n  }, [companyId, isInitialized]);\r\n  const fetchAlerts = async () => {\r\n    if (!companyId) {\r\n      console.error('Cannot fetch alerts: Company ID is not available');\r\n      setAlertsError('Company ID is required to fetch inventory alerts');\r\n      return;\r\n    }\r\n\r\n    setAlertsLoading(true);\r\n    setAlertsError(null);\r\n\r\n    try {\r\n      // Fetch low stock alerts\r\n      const lowStockResponse = await inventoryService.getLowStockItems(companyId);\r\n      setLowStockItems(lowStockResponse.data || []);\r\n\r\n      // Fetch expiring batches (30 days threshold)\r\n      const expiringResponse = await inventoryService.getExpiringBatches(companyId, 30);\r\n      setExpiringItems(expiringResponse.data || []);\r\n    } catch (err: any) {\r\n      console.error('Error fetching inventory alerts:', err);\r\n      setAlertsError(err.message || 'Failed to fetch inventory alerts');\r\n    } finally {\r\n      setAlertsLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleTabChange = (event: React.SyntheticEvent, newValue: number) => {\r\n    setTabValue(newValue);\r\n  };\r\n\r\n  const handleOpenTransferModal = (product: { id: string; name: string }) => {\r\n    setSelectedProduct(product);\r\n    setTransferModalOpen(true);\r\n  };\r\n\r\n  const handleCloseTransferModal = () => {\r\n    setTransferModalOpen(false);\r\n    setSelectedProduct(null);\r\n  };\r\n\r\n  const handleInventorySelect = (inventoryId: string) => {\r\n    setSelectedInventoryItem(inventoryId);\r\n    setTabValue(3); // Switch to Audit Log tab\r\n  };\r\n\r\n  const handleTransferComplete = () => {\r\n    // Refresh inventory list after a transfer\r\n    // If you have a refresh function in your InventoryList component, call it here\r\n    fetchAlerts(); // Refresh alerts as well\r\n  };\r\n\r\n  // Parse query parameters and set up the correct view\r\n  useEffect(() => {\r\n    const queryParams = new URLSearchParams(location.search);\r\n    const action = queryParams.get('action');\r\n    const id = queryParams.get('id');\r\n    \r\n    if (action === 'create') {\r\n      setViewMode('create');\r\n      setSelectedItem(null);\r\n    } else if (action === 'transfer') {\r\n      setViewMode('transfer');\r\n      setSelectedItem(null);\r\n    } else if (action === 'adjust' && id) {\r\n      setViewMode('adjust');\r\n      fetchInventoryItem(id);\r\n    } else if (id) {\r\n      setViewMode('view');\r\n      fetchInventoryItem(id);\r\n    } else {\r\n      // Reset to list view\r\n      setViewMode('list');\r\n      setSelectedItem(null);\r\n    }\r\n  }, [location.search]);\r\n\r\n  const fetchInventoryItem = async (id: string) => {\r\n    if (!companyId) return;\r\n    \r\n    setLoading(true);\r\n    try {\r\n      const item = await inventoryService.getInventoryItem(id);\r\n      setSelectedItem(item);\r\n    } catch (err: any) {\r\n      console.error('Error fetching inventory item:', err);\r\n      setError(err.message || 'Failed to load inventory item');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Container maxWidth=\"lg\" sx={{ mt: 4, mb: 4 }}>\r\n      {viewMode === 'list' && (\r\n        <Box sx={{ display: 'flex', flexDirection: 'column', gap: 3 }}>\r\n          {/* Page Header */}\r\n          <Box>\r\n            <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 2 }}>\r\n              <Typography component=\"h1\" variant=\"h4\">\r\n                Inventory Management\r\n              </Typography>\r\n            </Box>\r\n          </Box>\r\n\r\n          {/* Alerts Section */}\r\n          <Box>\r\n            <Paper sx={{ p: 2 }}>\r\n              <Typography variant=\"h6\" gutterBottom>\r\n                Inventory Alerts\r\n              </Typography>\r\n\r\n              {alertsError && (\r\n                <Alert severity=\"error\" sx={{ mb: 2 }}>\r\n                  {alertsError}\r\n                </Alert>\r\n              )}\r\n\r\n              <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 2 }}>\r\n                <Box sx={{ flex: '1 1 45%', minWidth: '250px' }}>\r\n                  <Paper \r\n                    variant=\"outlined\" \r\n                    sx={{ \r\n                      p: 2, \r\n                      bgcolor: 'warning.light', \r\n                      color: 'warning.contrastText',\r\n                      height: '100%'\r\n                    }}\r\n                  >\r\n                    <Typography variant=\"subtitle1\" fontWeight=\"bold\" gutterBottom>\r\n                      Low Stock Items: {lowStockItems.length}\r\n                    </Typography>\r\n                    <Typography variant=\"body2\">\r\n                      {lowStockItems.length > 0 \r\n                        ? 'Some items are running low on stock. Check inventory levels and consider restocking.' \r\n                        : 'All items have sufficient stock levels.'}\r\n                    </Typography>\r\n                  </Paper>\r\n                </Box>\r\n                <Box sx={{ flex: '1 1 45%', minWidth: '250px' }}>\r\n                  <Paper \r\n                    variant=\"outlined\" \r\n                    sx={{ \r\n                      p: 2, \r\n                      bgcolor: 'error.light', \r\n                      color: 'error.contrastText',\r\n                      height: '100%'\r\n                    }}\r\n                  >\r\n                    <Typography variant=\"subtitle1\" fontWeight=\"bold\" gutterBottom>\r\n                      Expiring Batches: {expiringItems.length}\r\n                    </Typography>\r\n                    <Typography variant=\"body2\">\r\n                      {expiringItems.length > 0 \r\n                        ? 'Some batches are expiring within 30 days. Review and take action.' \r\n                        : 'No batches expiring within the next 30 days.'}\r\n                    </Typography>\r\n                  </Paper>\r\n                </Box>\r\n              </Box>\r\n\r\n              <Box sx={{ display: 'flex', justifyContent: 'flex-end', mt: 2 }}>\r\n                <Button \r\n                  onClick={fetchAlerts} \r\n                  variant=\"outlined\" \r\n                  size=\"small\"\r\n                  disabled={alertsLoading}\r\n                >\r\n                  Refresh Alerts\r\n                </Button>\r\n              </Box>\r\n            </Paper>\r\n          </Box>\r\n\r\n          {/* Main Content Tabs */}\r\n          <Box>\r\n            <Paper sx={{ width: '100%' }}>\r\n              <Box sx={{ borderBottom: 1, borderColor: 'divider' }}>\r\n                <Tabs \r\n                  value={tabValue} \r\n                  onChange={handleTabChange} \r\n                  aria-label=\"inventory management tabs\"\r\n                  variant=\"scrollable\"\r\n                  scrollButtons=\"auto\"\r\n                >\r\n                  <Tab label=\"Inventory List\" {...a11yProps(0)} />\r\n                  <Tab label=\"Low Stock\" {...a11yProps(1)} />\r\n                  <Tab label=\"Expiring Items\" {...a11yProps(2)} />\r\n                  {selectedInventoryItem && <Tab label=\"Audit Log\" {...a11yProps(3)} />}\r\n                </Tabs>\r\n              </Box>            {/* Inventory List Tab */}\r\n              <TabPanel value={tabValue} index={0}>\r\n                {!isInitialized ? (\r\n                  <Box sx={{ display: 'flex', justifyContent: 'center', p: 3 }}>\r\n                    <Typography>Loading...</Typography>\r\n                  </Box>\r\n                ) : companyId ? (\r\n                  <InventoryList \r\n                    companyId={companyId}\r\n                    onTransferClick={handleOpenTransferModal}\r\n                    onInventorySelect={handleInventorySelect}\r\n                  />\r\n                ) : (\r\n                  <Alert severity=\"error\" sx={{ mb: 2 }}>\r\n                    Company ID not available. Please ensure you're logged in with a valid company account.\r\n                  </Alert>\r\n                )}\r\n              </TabPanel>\r\n\r\n              {/* Low Stock Tab */}\r\n              <TabPanel value={tabValue} index={1}>\r\n                {/* Add a dedicated LowStockItems component if needed */}\r\n                <Typography variant=\"h6\">Low Stock Items</Typography>\r\n                {/* Display low stock items */}\r\n              </TabPanel>\r\n\r\n              {/* Expiring Items Tab */}\r\n              <TabPanel value={tabValue} index={2}>\r\n                {/* Add a dedicated ExpiringItems component if needed */}\r\n                <Typography variant=\"h6\">Expiring Batches</Typography>\r\n                {/* Display expiring items */}\r\n              </TabPanel>\r\n\r\n              {/* Audit Log Tab - Conditionally rendered */}\r\n              {selectedInventoryItem && (\r\n                <TabPanel value={tabValue} index={3}>\r\n                  <InventoryAuditLog \r\n                    inventoryId={selectedInventoryItem}\r\n                    title=\"Inventory Transaction History\"\r\n                  />\r\n                </TabPanel>\r\n              )}\r\n            </Paper>\r\n          </Box>\r\n        </Box>\r\n      )}\r\n      \r\n      {viewMode === 'create' && (\r\n        <Box>\r\n          <Typography variant=\"h6\">Create Inventory Item</Typography>\r\n          {/* Render create form */}\r\n          {/* ...existing code... */}\r\n        </Box>\r\n      )}\r\n      \r\n      {viewMode === 'view' && selectedItem && (\r\n        <Box>\r\n          <Typography variant=\"h6\">Inventory Item Details</Typography>\r\n          {/* Render inventory item details */}\r\n          {/* ...existing code... */}\r\n        </Box>\r\n      )}\r\n      \r\n      {viewMode === 'adjust' && selectedItem && (\r\n        <Box>\r\n          <Typography variant=\"h6\">Adjust Inventory</Typography>\r\n          {/* Render adjustment form */}\r\n          {/* ...existing code... */}\r\n        </Box>\r\n      )}\r\n      \r\n      {viewMode === 'transfer' && (\r\n        <Box>\r\n          <Typography variant=\"h6\">Transfer Inventory</Typography>\r\n          {/* Render transfer form */}\r\n          {/* ...existing code... */}\r\n        </Box>\r\n      )}\r\n\r\n      {/* Inventory Transfer Modal */}\r\n      {selectedProduct && (\r\n        <InventoryTransferModal\r\n          open={transferModalOpen}\r\n          onClose={handleCloseTransferModal}\r\n          productId={selectedProduct.id}\r\n          productName={selectedProduct.name}\r\n          companyId={companyId}\r\n          onTransferComplete={handleTransferComplete}\r\n        />\r\n      )}\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default InventoryManagement;","usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"d:\\All python project\\Tubex\\Frontend\\app\\src\\pages\\InvoiceManagement.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"d:\\All python project\\Tubex\\Frontend\\app\\src\\pages\\Join.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'userData' is defined but never used. Allowed unused args must match /^_/u.","line":9,"column":38,"nodeType":"Identifier","messageId":"unusedVar","endLine":9,"endColumn":51}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\r\nimport { Box, Container, Paper, Typography } from '@mui/material';\r\nimport JoinByInvitation from '../components/auth/JoinByInvitation';\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\nconst Join: React.FC = () => {\r\n  const navigate = useNavigate();\r\n\r\n  const handleRegistrationSuccess = (userData: any) => {\r\n    // Redirect to dashboard or show a success message\r\n    navigate('/dashboard');\r\n  };\r\n\r\n  return (\r\n    <Container maxWidth=\"md\">\r\n      <Box sx={{ my: 4 }}>\r\n        <Paper elevation={3} sx={{ p: 3, mb: 4 }}>\r\n          <Typography variant=\"h4\" component=\"h1\" align=\"center\" gutterBottom>\r\n            Join Your Company\r\n          </Typography>\r\n          <Typography variant=\"body1\" align=\"center\" color=\"text.secondary\" paragraph>\r\n            Complete your registration using the invitation code provided by your company administrator.\r\n          </Typography>\r\n\r\n          <JoinByInvitation onRegisterSuccess={handleRegistrationSuccess} />\r\n        </Paper>\r\n      </Box>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default Join;","usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"d:\\All python project\\Tubex\\Frontend\\app\\src\\pages\\Login.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'userData' is defined but never used. Allowed unused args must match /^_/u.","line":9,"column":31,"nodeType":"Identifier","messageId":"unusedVar","endLine":9,"endColumn":44}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\r\nimport { Container, Box } from '@mui/material';\r\nimport Login from '../components/auth/Login';\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\nconst LoginPage: React.FC = () => {\r\n  const navigate = useNavigate();\r\n\r\n  const handleLoginSuccess = (userData: any) => {\r\n    navigate('/dashboard');\r\n  };\r\n\r\n  return (\r\n    <Container maxWidth=\"md\">\r\n      <Box sx={{ my: 4 }}>\r\n        <Login onLoginSuccess={handleLoginSuccess} />\r\n      </Box>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default LoginPage;\r\n","usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"d:\\All python project\\Tubex\\Frontend\\app\\src\\pages\\NotFound.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"d:\\All python project\\Tubex\\Frontend\\app\\src\\pages\\OrderManagement.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Tabs' is defined but never used. Allowed unused vars must match /^_/u.","line":8,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":8,"endColumn":7},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Tab' is defined but never used. Allowed unused vars must match /^_/u.","line":9,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":9,"endColumn":6},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'TabPanel' is defined but never used. Allowed unused vars must match /^_/u.","line":36,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":36,"endColumn":18},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'a11yProps' is defined but never used. Allowed unused vars must match /^_/u.","line":52,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":52,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'tabValue' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":70,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":70,"endColumn":18},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'params' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":91,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":91,"endColumn":15},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'fetchOrders'. Either include it or remove the dependency array.","line":105,"column":6,"nodeType":"ArrayExpression","endLine":105,"endColumn":42,"suggestions":[{"desc":"Update the dependencies array to be: [filterStatus, dateRange, companyId, fetchOrders]","fix":{"range":[3149,3185],"text":"[filterStatus, dateRange, companyId, fetchOrders]"}}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'handleTabChange' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":168,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":168,"endColumn":24}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\r\nimport { useParams, useLocation } from 'react-router-dom';\r\nimport {\r\n  Box,\r\n  Container,\r\n  Typography,\r\n  Paper,\r\n  Tabs,\r\n  Tab,\r\n  Button,\r\n  TextField,\r\n  CircularProgress,\r\n  Alert,\r\n  IconButton,\r\n  Menu,\r\n  MenuItem,\r\n  Chip\r\n} from '@mui/material';\r\nimport { AdapterDateFns } from '@mui/x-date-pickers/AdapterDateFns';\r\nimport { LocalizationProvider, DatePicker } from '@mui/x-date-pickers';\r\nimport MoreVertIcon from '@mui/icons-material/MoreVert';\r\nimport FilterListIcon from '@mui/icons-material/FilterList';\r\nimport SearchIcon from '@mui/icons-material/Search';\r\nimport { orderService } from '../services/api';\r\nimport OrderDetails from '../components/whitelabel/orders/OrderDetails';\r\nimport CreateOrderForm from '../components/whitelabel/orders/CreateOrderForm';\r\nimport { format } from 'date-fns';\r\nimport { useAuth } from '../contexts/AuthContext';\r\n\r\ninterface TabPanelProps {\r\n  children?: React.ReactNode;\r\n  index: number;\r\n  value: number;\r\n}\r\n\r\nfunction TabPanel(props: TabPanelProps) {\r\n  const { children, value, index, ...other } = props;\r\n\r\n  return (\r\n    <div\r\n      role=\"tabpanel\"\r\n      hidden={value !== index}\r\n      id={`order-tabpanel-${index}`}\r\n      aria-labelledby={`order-tab-${index}`}\r\n      {...other}\r\n    >\r\n      {value === index && <Box sx={{ p: 3 }}>{children}</Box>}\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction a11yProps(index: number) {\r\n  return {\r\n    id: `order-tab-${index}`,\r\n    'aria-controls': `order-tabpanel-${index}`,\r\n  };\r\n}\r\n\r\nconst statusColors: Record<string, \"default\" | \"primary\" | \"secondary\" | \"error\" | \"info\" | \"success\" | \"warning\"> = {\r\n  'pending': 'warning',\r\n  'processing': 'info',\r\n  'shipped': 'primary',\r\n  'delivered': 'success',\r\n  'cancelled': 'error',\r\n  'returned': 'secondary',\r\n  'default': 'default'\r\n};\r\n\r\nconst OrderManagement: React.FC = () => {\r\n  const [tabValue, setTabValue] = useState(0);\r\n  const [orders, setOrders] = useState<any[]>([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState<string | null>(null);\r\n  const [selectedOrder, setSelectedOrder] = useState<any | null>(null);\r\n  const [showCreateForm, setShowCreateForm] = useState(false);\r\n  const [searchQuery, setSearchQuery] = useState('');\r\n  const [filterStatus, setFilterStatus] = useState('all');\r\n  const [dateRange, setDateRange] = useState<{ start: Date | null; end: Date | null }>({\r\n    start: null,\r\n    end: null,\r\n  });\r\n  \r\n  // Get company ID from auth context\r\n  const { user } = useAuth();\r\n  const [companyId, setCompanyId] = useState<string>('');\r\n  \r\n  const [anchorEl, setAnchorEl] = useState<null | HTMLElement>(null);\r\n  const [actionOrderId, setActionOrderId] = useState<string | null>(null);\r\n\r\n  const location = useLocation();\r\n  const params = useParams();\r\n\r\n  // Set companyId from auth context when user data is available\r\n  useEffect(() => {\r\n    if (user && user.companyId) {\r\n      setCompanyId(user.companyId);\r\n    }\r\n  }, [user]);\r\n\r\n  // Fetch orders when component mounts or filters change\r\n  useEffect(() => {\r\n    if (companyId) {\r\n      fetchOrders();\r\n    }\r\n  }, [filterStatus, dateRange, companyId]);\r\n\r\n  // Parse query parameters and set up the correct view\r\n  useEffect(() => {\r\n    const queryParams = new URLSearchParams(location.search);\r\n    const action = queryParams.get('action');\r\n    const id = queryParams.get('id');\r\n    \r\n    if (action === 'create') {\r\n      setSelectedOrder(null);\r\n      setShowCreateForm(true);\r\n    } else if (id) {\r\n      // Fetch and show specific order\r\n      const fetchOrderDetails = async () => {\r\n        setLoading(true);\r\n        try {\r\n          const order = await orderService.getOrderById(id);\r\n          setSelectedOrder(order);\r\n          setShowCreateForm(false);\r\n        } catch (err: any) {\r\n          console.error('Error fetching order details:', err);\r\n          setError(err.message || 'Failed to load order details');\r\n        } finally {\r\n          setLoading(false);\r\n        }\r\n      };\r\n      fetchOrderDetails();\r\n    } else {\r\n      // Reset to list view\r\n      setSelectedOrder(null);\r\n      setShowCreateForm(false);\r\n    }\r\n  }, [location.search]);\r\n\r\n  const fetchOrders = async () => {\r\n    setLoading(true);\r\n    setError(null);\r\n\r\n    try {\r\n      const params: any = { companyId };\r\n      if (filterStatus !== 'all') {\r\n        params.status = filterStatus;\r\n      }\r\n      if (dateRange.start) {\r\n        params.startDate = dateRange.start.toISOString();\r\n      }\r\n      if (dateRange.end) {\r\n        params.endDate = dateRange.end.toISOString();\r\n      }\r\n      if (searchQuery) {\r\n        params.search = searchQuery;\r\n      }\r\n\r\n      const response = await orderService.getOrders(params);\r\n      setOrders(response.orders || []); // Adjusted to use 'orders' instead of 'data'\r\n    } catch (err: any) {\r\n      console.error('Error fetching orders:', err);\r\n      setError(err.message || 'Failed to fetch orders');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleTabChange = (event: React.SyntheticEvent, newValue: number) => {\r\n    setTabValue(newValue);\r\n  };\r\n\r\n  const handleViewOrder = (order: any) => {\r\n    setSelectedOrder(order);\r\n    setShowCreateForm(false);\r\n  };\r\n\r\n  const handleCreateOrder = () => {\r\n    setSelectedOrder(null);\r\n    setShowCreateForm(true);\r\n  };\r\n\r\n  const handleBackToList = () => {\r\n    setSelectedOrder(null);\r\n    setShowCreateForm(false);\r\n  };\r\n\r\n  const handleSearch = () => {\r\n    fetchOrders();\r\n  };\r\n\r\n  const handleActionClick = (event: React.MouseEvent<HTMLElement>, orderId: string) => {\r\n    setAnchorEl(event.currentTarget);\r\n    setActionOrderId(orderId);\r\n  };\r\n\r\n  const handleActionClose = () => {\r\n    setAnchorEl(null);\r\n    setActionOrderId(null);\r\n  };\r\n\r\n  const handleStatusChange = async (status: 'confirmed' | 'processing' | 'shipped' | 'delivered' | 'cancelled') => {\r\n    if (!actionOrderId) return;\r\n\r\n    setLoading(true);\r\n    setError(null);\r\n\r\n    try {\r\n      await orderService.updateOrder(actionOrderId, { status });\r\n      fetchOrders();\r\n    } catch (err: any) {\r\n      console.error('Error updating order status:', err);\r\n      setError(err.message || 'Failed to update order status');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n\r\n    handleActionClose();\r\n  };\r\n\r\n  const handleOrderSave = () => {\r\n    fetchOrders();\r\n    handleBackToList();\r\n  };\r\n\r\n  const formatDate = (dateString: string) => {\r\n    try {\r\n      return format(new Date(dateString), 'MMM dd, yyyy');\r\n    } catch (e) {\r\n      return dateString;\r\n    }\r\n  };\r\n\r\n  const formatCurrency = (value: number) => {\r\n    return new Intl.NumberFormat('en-US', {\r\n      style: 'currency',\r\n      currency: 'USD',\r\n    }).format(value);\r\n  };\r\n\r\n  const renderOrderList = () => (\r\n    <Box>\r\n      <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 3 }}>\r\n        <Typography variant=\"h4\" component=\"h1\">\r\n          Orders\r\n        </Typography>\r\n        <Button\r\n          variant=\"contained\"\r\n          color=\"primary\"\r\n          onClick={handleCreateOrder}\r\n        >\r\n          Create New Order\r\n        </Button>\r\n      </Box>\r\n\r\n      {/* Search and Filter */}\r\n      <Paper sx={{ p: 2, mb: 3 }}>\r\n        <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 2, alignItems: 'center' }}>\r\n          <Box sx={{ display: 'flex', flex: '1 1 300px', gap: 1 }}>\r\n            <TextField\r\n              placeholder=\"Search by order ID or customer...\"\r\n              variant=\"outlined\"\r\n              size=\"small\"\r\n              fullWidth\r\n              value={searchQuery}\r\n              onChange={(e) => setSearchQuery(e.target.value)}\r\n            />\r\n            <Button\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              onClick={handleSearch}\r\n              startIcon={<SearchIcon />}\r\n            >\r\n              Search\r\n            </Button>\r\n          </Box>\r\n\r\n          <Box sx={{ display: 'flex', gap: 2, flexWrap: 'wrap', alignItems: 'center' }}>\r\n            <TextField\r\n              select\r\n              label=\"Status\"\r\n              value={filterStatus}\r\n              onChange={(e) => setFilterStatus(e.target.value)}\r\n              size=\"small\"\r\n              sx={{ minWidth: 120 }}\r\n            >\r\n              <MenuItem value=\"all\">All Status</MenuItem>\r\n              <MenuItem value=\"pending\">Pending</MenuItem>\r\n              <MenuItem value=\"processing\">Processing</MenuItem>\r\n              <MenuItem value=\"shipped\">Shipped</MenuItem>\r\n              <MenuItem value=\"delivered\">Delivered</MenuItem>\r\n              <MenuItem value=\"cancelled\">Cancelled</MenuItem>\r\n              <MenuItem value=\"returned\">Returned</MenuItem>\r\n            </TextField>\r\n\r\n            <LocalizationProvider dateAdapter={AdapterDateFns}>\r\n              <DatePicker\r\n                label=\"From\"\r\n                value={dateRange.start}\r\n                onChange={(date) => setDateRange({ ...dateRange, start: date })}\r\n                slotProps={{ textField: { size: 'small' } }}\r\n              />\r\n              <DatePicker\r\n                label=\"To\"\r\n                value={dateRange.end}\r\n                onChange={(date) => setDateRange({ ...dateRange, end: date })}\r\n                slotProps={{ textField: { size: 'small' } }}\r\n              />\r\n            </LocalizationProvider>\r\n\r\n            <Button\r\n              variant=\"outlined\"\r\n              startIcon={<FilterListIcon />}\r\n              onClick={fetchOrders}\r\n            >\r\n              Apply Filters\r\n            </Button>\r\n          </Box>\r\n        </Box>\r\n      </Paper>\r\n\r\n      {/* Orders Table */}\r\n      {loading ? (\r\n        <Box sx={{ display: 'flex', justifyContent: 'center', p: 3 }}>\r\n          <CircularProgress />\r\n        </Box>\r\n      ) : error ? (\r\n        <Alert severity=\"error\" sx={{ mb: 3 }}>\r\n          {error}\r\n        </Alert>\r\n      ) : (\r\n        <Box>\r\n          {orders.length > 0 ? (\r\n            orders.map((order) => (\r\n              <Paper\r\n                key={order.id}\r\n                sx={{\r\n                  p: 2,\r\n                  mb: 2,\r\n                  cursor: 'pointer',\r\n                  '&:hover': { bgcolor: 'action.hover' }\r\n                }}\r\n                onClick={() => handleViewOrder(order)}\r\n              >\r\n                <Box sx={{ display: 'flex', flexDirection: { xs: 'column', sm: 'row' }, alignItems: { sm: 'center' }, justifyContent: 'space-between' }}>\r\n                  <Box>\r\n                    <Box sx={{ display: 'flex', gap: 1, alignItems: 'center', mb: 1 }}>\r\n                      <Typography variant=\"subtitle1\" fontWeight=\"bold\">\r\n                        #{order.order_number}\r\n                      </Typography>\r\n                      <Chip\r\n                        size=\"small\"\r\n                        label={order.status}\r\n                        color={statusColors[order.status] || statusColors.default}\r\n                      />\r\n                    </Box>\r\n                    <Typography variant=\"body2\" color=\"text.secondary\">\r\n                      {order.customer_name} • {formatDate(order.created_at)}\r\n                    </Typography>\r\n                  </Box>\r\n\r\n                  <Box sx={{ display: 'flex', gap: 2, alignItems: 'center', mt: { xs: 1, sm: 0 } }}>\r\n                    <Typography variant=\"subtitle1\" fontWeight=\"bold\">\r\n                      {formatCurrency(order.total_amount)}\r\n                    </Typography>\r\n                    <Typography variant=\"body2\" color=\"text.secondary\">\r\n                      {order.items_count} items\r\n                    </Typography>\r\n                    <IconButton\r\n                      onClick={(e) => {\r\n                        e.stopPropagation();\r\n                        handleActionClick(e, order.id);\r\n                      }}\r\n                    >\r\n                      <MoreVertIcon />\r\n                    </IconButton>\r\n                  </Box>\r\n                </Box>\r\n              </Paper>\r\n            ))\r\n          ) : (\r\n            <Paper sx={{ p: 3, textAlign: 'center' }}>\r\n              <Typography variant=\"body1\" color=\"text.secondary\">\r\n                No orders found. Try a different filter or create a new order.\r\n              </Typography>\r\n              <Button\r\n                variant=\"outlined\"\r\n                color=\"primary\"\r\n                sx={{ mt: 2 }}\r\n                onClick={handleCreateOrder}\r\n              >\r\n                Create New Order\r\n              </Button>\r\n            </Paper>\r\n          )}\r\n        </Box>\r\n      )}\r\n\r\n      {/* Action Menu */}\r\n      <Menu\r\n        anchorEl={anchorEl}\r\n        open={Boolean(anchorEl)}\r\n        onClose={handleActionClose}\r\n      >\r\n        <MenuItem onClick={() => handleStatusChange('processing')}>Mark as Processing</MenuItem>\r\n        <MenuItem onClick={() => handleStatusChange('shipped')}>Mark as Shipped</MenuItem>\r\n        <MenuItem onClick={() => handleStatusChange('delivered')}>Mark as Delivered</MenuItem>\r\n        <MenuItem onClick={() => handleStatusChange('cancelled')}>Cancel Order</MenuItem>\r\n      </Menu>\r\n    </Box>\r\n  );\r\n\r\n  return (\r\n    <Container maxWidth=\"lg\" sx={{ mt: 4, mb: 4 }}>\r\n      {/* Main Content */}\r\n      {!selectedOrder && !showCreateForm && renderOrderList()}\r\n\r\n      {/* Order Details View */}\r\n      {selectedOrder && (\r\n        <Box>\r\n          <Button\r\n            variant=\"text\"\r\n            onClick={handleBackToList}\r\n            sx={{ mb: 2 }}\r\n          >\r\n            ← Back to Orders\r\n          </Button>\r\n\r\n          <OrderDetails\r\n            order={selectedOrder}\r\n            onStatusChange={(status) => {\r\n              handleStatusChange(status as 'confirmed' | 'processing' | 'shipped' | 'delivered' | 'cancelled');\r\n              handleBackToList(); // Go back to list after status change\r\n            }}\r\n          />\r\n        </Box>\r\n      )}\r\n\r\n      {/* Create Order Form */}\r\n      {showCreateForm && (\r\n        <Box>\r\n          <Button\r\n            variant=\"text\"\r\n            onClick={handleBackToList}\r\n            sx={{ mb: 2 }}\r\n          >\r\n            ← Back to Orders\r\n          </Button>\r\n\r\n          <CreateOrderForm\r\n            companyId={companyId}\r\n            onSave={handleOrderSave}\r\n            onCancel={handleBackToList}\r\n          />\r\n        </Box>\r\n      )}\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default OrderManagement;","usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"d:\\All python project\\Tubex\\Frontend\\app\\src\\pages\\PaymentManagement.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"d:\\All python project\\Tubex\\Frontend\\app\\src\\pages\\PendingApproval.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"d:\\All python project\\Tubex\\Frontend\\app\\src\\pages\\PriceListManagement.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"d:\\All python project\\Tubex\\Frontend\\app\\src\\pages\\ProductManagement.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Tab' is defined but never used. Allowed unused vars must match /^_/u.","line":8,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":8,"endColumn":6},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Tabs' is defined but never used. Allowed unused vars must match /^_/u.","line":9,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":9,"endColumn":7},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'activeTab' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":19,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":19,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'handleTabChange' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":72,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":72,"endColumn":24}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\r\nimport { useLocation } from 'react-router-dom';\r\nimport {\r\n  Box,\r\n  Container,\r\n  Typography,\r\n  IconButton,\r\n  Tab,\r\n  Tabs\r\n} from '@mui/material';\r\nimport ArrowBackIcon from '@mui/icons-material/ArrowBack';\r\nimport ProductList from '../components/whitelabel/products/ProductList';\r\nimport ProductForm from '../components/whitelabel/products/ProductForm';\r\nimport { useAuth } from '../contexts/AuthContext';\r\n\r\nconst ProductManagement: React.FC = () => {\r\n  const [showAddForm, setShowAddForm] = useState(false);\r\n  const [selectedProductId, setSelectedProductId] = useState<string | null>(null);\r\n  const [activeTab, setActiveTab] = useState<number>(0);\r\n  const location = useLocation();\r\n  \r\n  // Get company ID from auth context\r\n  const { user } = useAuth();\r\n  const [companyId, setCompanyId] = useState<string>('');\r\n  \r\n  // Set companyId from auth context when user data is available\r\n  useEffect(() => {\r\n    if (user && user.companyId) {\r\n      setCompanyId(user.companyId);\r\n    }\r\n  }, [user]);\r\n\r\n  // Parse query parameters\r\n  useEffect(() => {\r\n    const queryParams = new URLSearchParams(location.search);\r\n    const action = queryParams.get('action');\r\n    const id = queryParams.get('id');\r\n    \r\n    if (action === 'create') {\r\n      setShowAddForm(true);\r\n      setSelectedProductId(null);\r\n    } else if (id) {\r\n      setSelectedProductId(id);\r\n      setShowAddForm(false);\r\n    } else {\r\n      // Reset to list view if no params\r\n      setShowAddForm(false);\r\n      setSelectedProductId(null);\r\n    }\r\n  }, [location.search]);\r\n\r\n  const handleAddProduct = () => {\r\n    setShowAddForm(true);\r\n    setSelectedProductId(null);\r\n  };\r\n\r\n  const handleEditProduct = (productId: string) => {\r\n    setSelectedProductId(productId);\r\n    setShowAddForm(false);\r\n  };\r\n\r\n  const handleCloseForm = () => {\r\n    setShowAddForm(false);\r\n    setSelectedProductId(null);\r\n  };\r\n\r\n  const handleProductSave = () => {\r\n    // Refresh the product list after saving\r\n    handleCloseForm();\r\n  };\r\n\r\n  const handleTabChange = (event: React.SyntheticEvent, newValue: number) => {\r\n    setActiveTab(newValue);\r\n  };\r\n\r\n  return (\r\n    <Container maxWidth=\"lg\" sx={{ mt: 4, mb: 4 }}>\r\n      {/* Product List View */}\r\n      {!showAddForm && selectedProductId === null && (\r\n        <ProductList\r\n          companyId={companyId}\r\n          onAddProduct={handleAddProduct}\r\n          onEditProduct={handleEditProduct}\r\n        />\r\n      )}\r\n\r\n      {/* Add/Edit Product Form */}\r\n      {(showAddForm || selectedProductId !== null) && (\r\n        <Box>\r\n          <Box sx={{ display: 'flex', alignItems: 'center', mb: 3 }}>\r\n            <IconButton\r\n              edge=\"start\"\r\n              color=\"inherit\"\r\n              onClick={handleCloseForm}\r\n              sx={{ mr: 2 }}\r\n            >\r\n              <ArrowBackIcon />\r\n            </IconButton>\r\n            <Typography variant=\"h5\">\r\n              {selectedProductId ? 'Edit Product' : 'Add New Product'}\r\n            </Typography>\r\n          </Box>\r\n\r\n          <ProductForm\r\n            productId={selectedProductId || undefined}\r\n            companyId={companyId}\r\n            onSave={handleProductSave}\r\n            onCancel={handleCloseForm}\r\n          />\r\n        </Box>\r\n      )}\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default ProductManagement;","usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"d:\\All python project\\Tubex\\Frontend\\app\\src\\pages\\QuoteManagement.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"d:\\All python project\\Tubex\\Frontend\\app\\src\\pages\\Register.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"d:\\All python project\\Tubex\\Frontend\\app\\src\\pages\\ReportManagement.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"d:\\All python project\\Tubex\\Frontend\\app\\src\\pages\\ResetPassword.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"d:\\All python project\\Tubex\\Frontend\\app\\src\\pages\\Settings.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'theme' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":81,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":81,"endColumn":16},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'updateTheme'. Either include it or remove the dependency array.","line":307,"column":6,"nodeType":"ArrayExpression","endLine":307,"endColumn":16,"suggestions":[{"desc":"Update the dependencies array to be: [darkMode, updateTheme]","fix":{"range":[9984,9994],"text":"[darkMode, updateTheme]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\r\nimport {\r\n  Box,\r\n  Container,\r\n  Paper,\r\n  Typography,\r\n  Tabs,\r\n  Tab,\r\n  Switch,\r\n  FormControlLabel,\r\n  FormGroup,\r\n  FormControl,\r\n  InputLabel,\r\n  Select,\r\n  MenuItem,\r\n  Button,\r\n  Divider,\r\n  Slider,\r\n  TextField,\r\n  Alert,\r\n  CircularProgress,\r\n  Card,\r\n  CardContent,\r\n  ListItemText,\r\n  List,\r\n  ListItem,\r\n  Dialog,\r\n  DialogTitle,\r\n  DialogContent,\r\n  DialogContentText,\r\n  DialogActions\r\n} from '@mui/material';\r\nimport {\r\n  DarkMode as DarkModeIcon,\r\n  LightMode as LightModeIcon,\r\n  Notifications as NotificationsIcon,\r\n  Language as LanguageIcon,\r\n  Security as SecurityIcon,\r\n  Storage as StorageIcon,\r\n  Palette as PaletteIcon,\r\n  AddCircleOutline as AddIcon,\r\n  Check as CheckIcon\r\n} from '@mui/icons-material';\r\nimport { useTheme } from '../contexts/ThemeContext';\r\nimport TenantConfigPanel from '../components/whitelabel/TenantConfigPanel';\r\nimport { useAuth } from '../contexts/AuthContext';\r\nimport { useCompanySettings } from '../contexts/CompanySettingsContext';\r\nimport SettingsOverrideDisplay from '../components/settings/SettingsOverrideDisplay';\r\n\r\n// Define interface for integration objects\r\ninterface Integration {\r\n  id: number;\r\n  name: string;\r\n  connected: boolean;\r\n}\r\n\r\ninterface TabPanelProps {\r\n  children?: React.ReactNode;\r\n  index: number;\r\n  value: number;\r\n}\r\n\r\nfunction TabPanel(props: TabPanelProps) {\r\n  const { children, value, index, ...other } = props;\r\n\r\n  return (\r\n    <div\r\n      role=\"tabpanel\"\r\n      hidden={value !== index}\r\n      id={`settings-tabpanel-${index}`}\r\n      aria-labelledby={`settings-tab-${index}`}\r\n      {...other}\r\n    >\r\n      {value === index && <Box sx={{ p: 3 }}>{children}</Box>}\r\n    </div>\r\n  );\r\n}\r\n\r\nconst Settings: React.FC = () => {\r\n  const { user } = useAuth();\r\n  const { theme, updateTheme } = useTheme();\r\n  const { \r\n    settings, \r\n    updateSettings, \r\n    isCompanyAdmin, \r\n    applyCompanySettings, \r\n    resetSettingsSection,\r\n    userOverrides,\r\n    companySettings \r\n  } = useCompanySettings();\r\n  \r\n  const [tabValue, setTabValue] = useState(0);\r\n  const [loading, setLoading] = useState(false);\r\n  const [success, setSuccess] = useState<string | null>(null);\r\n  const [error, setError] = useState<string | null>(null);\r\n  \r\n  // Extract appearance settings\r\n  const [darkMode, setDarkMode] = useState(() => settings.appearance.darkMode);\r\n  const [language, setLanguage] = useState(() => settings.appearance.language);\r\n  const [fontSize, setFontSize] = useState(() => settings.appearance.fontSize);\r\n  \r\n  // Extract notification settings\r\n  const [emailNotifications, setEmailNotifications] = useState(() => settings.notifications.email);\r\n  const [pushNotifications, setPushNotifications] = useState(() => settings.notifications.push);\r\n  const [newOrderNotifications, setNewOrderNotifications] = useState(() => settings.notifications.newOrders);\r\n  const [inventoryAlerts, setInventoryAlerts] = useState(() => settings.notifications.inventory);\r\n  \r\n  // Extract integration settings\r\n  const [apiKey, setApiKey] = useState(() => settings.integrations.apiKey);\r\n  const [integrations, setIntegrations] = useState<Integration[]>(() => \r\n    settings.integrations.connectedServices || [\r\n      { id: 1, name: 'Warehouse System', connected: true },\r\n      { id: 2, name: 'Accounting Software', connected: false },\r\n      { id: 3, name: 'CRM System', connected: false }\r\n    ]\r\n  );\r\n  \r\n  // Update local state when settings change\r\n  useEffect(() => {\r\n    setDarkMode(settings.appearance.darkMode);\r\n    setLanguage(settings.appearance.language);\r\n    setFontSize(settings.appearance.fontSize);\r\n    setEmailNotifications(settings.notifications.email);\r\n    setPushNotifications(settings.notifications.push);\r\n    setNewOrderNotifications(settings.notifications.newOrders);\r\n    setInventoryAlerts(settings.notifications.inventory);\r\n    setApiKey(settings.integrations.apiKey);\r\n    if (settings.integrations.connectedServices) {\r\n      setIntegrations(settings.integrations.connectedServices);\r\n    }\r\n  }, [settings]);\r\n  \r\n  // Dialog state\r\n  const [deleteDialogOpen, setDeleteDialogOpen] = useState(false);\r\n  const [exportDialogOpen, setExportDialogOpen] = useState(false);\r\n  \r\n  const handleTabChange = (event: React.SyntheticEvent, newValue: number) => {\r\n    setTabValue(newValue);\r\n  };\r\n  const handleSaveAppSettings = async () => {\r\n    setLoading(true);\r\n    setError(null);\r\n    setSuccess(null);\r\n    \r\n    try {\r\n      // Determine if we should apply settings company-wide\r\n      const applyToCompany = isCompanyAdmin && document.getElementById('applyCompanyWide')?.getAttribute('data-checked') === 'true';\r\n      \r\n      // Update company settings context\r\n      updateSettings({\r\n        appearance: {\r\n          darkMode,\r\n          language,\r\n          fontSize\r\n        }\r\n      }, applyToCompany);\r\n      \r\n      // Update theme with proper dark mode colors\r\n      if (darkMode) {\r\n        updateTheme({\r\n          backgroundColor: '#121212',\r\n          textColor: '#ffffff'\r\n        });\r\n      } else {\r\n        updateTheme({\r\n          backgroundColor: '#fafafa',\r\n          textColor: '#333333'\r\n        });\r\n      }\r\n      \r\n      // Simulate API call (so users see the loading state)\r\n      await new Promise(resolve => setTimeout(resolve, 500));\r\n      \r\n      setSuccess(`Application settings saved successfully${applyToCompany ? ' and applied company-wide' : ''}`);\r\n    } catch (err: any) {\r\n      setError(err.message || 'Failed to save settings');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n  const handleSaveNotificationSettings = async () => {\r\n    setLoading(true);\r\n    setError(null);\r\n    setSuccess(null);\r\n    \r\n    try {\r\n      // Determine if we should apply settings company-wide\r\n      const applyToCompany = isCompanyAdmin && document.getElementById('notificationsApplyCompanyWide')?.getAttribute('data-checked') === 'true';\r\n      \r\n      // Update company settings context\r\n      updateSettings({\r\n        notifications: {\r\n          email: emailNotifications,\r\n          push: pushNotifications,\r\n          newOrders: newOrderNotifications,\r\n          inventory: inventoryAlerts\r\n        }\r\n      }, applyToCompany);\r\n      \r\n      // Simulate API call (so users see the loading state)\r\n      await new Promise(resolve => setTimeout(resolve, 500));\r\n      \r\n      setSuccess(`Notification settings saved successfully${applyToCompany ? ' and applied company-wide' : ''}`);\r\n    } catch (err: any) {\r\n      setError(err.message || 'Failed to save settings');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n    const handleGenerateApiKey = async () => {\r\n    setLoading(true);\r\n    setError(null);\r\n    setSuccess(null);\r\n    \r\n    try {\r\n      // Simulate API call\r\n      await new Promise(resolve => setTimeout(resolve, 800));\r\n      \r\n      // Generate a random API key for demo purposes\r\n      const newApiKey = `api_${Math.random().toString(36).substring(2, 15)}_${Date.now().toString(36)}`;\r\n      \r\n      // Determine if we should apply settings company-wide\r\n      const applyToCompany = isCompanyAdmin && document.getElementById('integrationsApplyCompanyWide')?.getAttribute('data-checked') === 'true';\r\n      \r\n      // Update company settings context\r\n      updateSettings({\r\n        integrations: {\r\n          ...settings.integrations, // Spread existing integrations to keep all properties\r\n          apiKey: newApiKey\r\n        }\r\n      }, applyToCompany);\r\n      \r\n      // Update local state\r\n      setApiKey(newApiKey);\r\n      \r\n      setSuccess(`New API key generated successfully${applyToCompany ? ' and applied company-wide' : ''}`);\r\n    } catch (err: any) {\r\n      setError(err.message || 'Failed to generate API key');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n    const handleConnectIntegration = async (integrationId: number) => {\r\n    setLoading(true);\r\n    setError(null);\r\n    setSuccess(null);\r\n    \r\n    try {\r\n      // Simulate API call\r\n      await new Promise(resolve => setTimeout(resolve, 700));\r\n      \r\n      // Update local state\r\n      const updatedIntegrations = integrations.map(integration =>\r\n        integration.id === integrationId\r\n          ? { ...integration, connected: !integration.connected }\r\n          : integration\r\n      );\r\n      \r\n      // Determine if we should apply settings company-wide\r\n      const applyToCompany = isCompanyAdmin && document.getElementById('integrationsApplyCompanyWide')?.getAttribute('data-checked') === 'true';\r\n      \r\n      // Update company settings context\r\n      updateSettings({\r\n        integrations: {\r\n          ...settings.integrations, // Spread existing integrations to keep all properties\r\n          connectedServices: updatedIntegrations\r\n        }\r\n      }, applyToCompany);\r\n      \r\n      // Update local state\r\n      setIntegrations(updatedIntegrations);\r\n      \r\n      setSuccess(`Integration updated successfully${applyToCompany ? ' and applied company-wide' : ''}`);\r\n    } catch (err: any) {\r\n      setError(err.message || 'Failed to update integration');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // Apply font size changes immediately\r\n  useEffect(() => {\r\n    document.documentElement.style.fontSize = `${fontSize}px`;\r\n    return () => {\r\n      // Reset font size when component unmounts\r\n      document.documentElement.style.fontSize = ''; \r\n    };\r\n  }, [fontSize]);\r\n  \r\n  // Apply dark mode immediately for better visual feedback\r\n  useEffect(() => {\r\n    if (darkMode) {\r\n      document.body.classList.add('dark-mode');\r\n      // Apply immediate theme changes for dark mode\r\n      updateTheme({\r\n        backgroundColor: '#121212',\r\n        textColor: '#ffffff'\r\n      });\r\n    } else {\r\n      document.body.classList.remove('dark-mode');\r\n      // Apply immediate theme changes for light mode\r\n      updateTheme({\r\n        backgroundColor: '#fafafa',\r\n        textColor: '#333333'\r\n      });\r\n    }\r\n  }, [darkMode]);\r\n\r\n  return (\r\n    <Container maxWidth=\"lg\" sx={{ mt: 4, mb: 4 }}>\r\n      <Paper sx={{ p: { xs: 2, md: 3 } }}>\r\n        <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between', mb: 3 }}>\r\n          <Typography variant=\"h4\" component=\"h1\">\r\n            Settings\r\n          </Typography>\r\n          \r\n          {isCompanyAdmin ? (\r\n            <Typography variant=\"subtitle1\" color=\"primary\">\r\n              Company Admin\r\n            </Typography>\r\n          ) : (\r\n            <Button \r\n              variant=\"outlined\" \r\n              size=\"small\"\r\n              onClick={applyCompanySettings}\r\n              startIcon={<PaletteIcon />}\r\n            >\r\n              Use Company Defaults\r\n            </Button>\r\n          )}\r\n        </Box>\r\n        \r\n        {/* Display customized settings */}\r\n        {!isCompanyAdmin && Object.keys(userOverrides).length > 0 && (\r\n          <SettingsOverrideDisplay \r\n            companySettings={companySettings}\r\n            userSettings={userOverrides}\r\n            onResetToCompany={resetSettingsSection}\r\n          />\r\n        )}\r\n\r\n        <Box sx={{ borderBottom: 1, borderColor: 'divider' }}>\r\n          <Tabs value={tabValue} onChange={handleTabChange} aria-label=\"settings tabs\">\r\n            <Tab icon={<PaletteIcon />} iconPosition=\"start\" label=\"Appearance\" />\r\n            <Tab icon={<NotificationsIcon />} iconPosition=\"start\" label=\"Notifications\" />\r\n            <Tab icon={<StorageIcon />} iconPosition=\"start\" label=\"Integrations\" />\r\n            <Tab icon={<SecurityIcon />} iconPosition=\"start\" label=\"Privacy & Data\" />\r\n          </Tabs>\r\n        </Box>\r\n        \r\n        {success && <Alert severity=\"success\" sx={{ mt: 2 }}>{success}</Alert>}\r\n        {error && <Alert severity=\"error\" sx={{ mt: 2 }}>{error}</Alert>}\r\n        \r\n        <TabPanel value={tabValue} index={0}>\r\n          <Box sx={{ maxWidth: 800 }}>\r\n            <Typography variant=\"h6\" gutterBottom>\r\n              Theme Settings\r\n            </Typography>\r\n            \r\n            <FormGroup>\r\n              <FormControlLabel\r\n                control={\r\n                  <Switch\r\n                    checked={darkMode}\r\n                    onChange={(e) => setDarkMode(e.target.checked)}\r\n                  />\r\n                }\r\n                label={\r\n                  <Box sx={{ display: 'flex', alignItems: 'center' }}>\r\n                    {darkMode ? <DarkModeIcon sx={{ mr: 1 }} /> : <LightModeIcon sx={{ mr: 1 }} />}\r\n                    {darkMode ? 'Dark Mode' : 'Light Mode'}\r\n                  </Box>\r\n                }\r\n              />\r\n            </FormGroup>\r\n            \r\n            <Typography id=\"font-size-slider\" gutterBottom>\r\n              Font Size\r\n            </Typography>\r\n            <Box sx={{ display: 'flex', alignItems: 'center', gap: 2 }}>\r\n              <Box sx={{ flex: 1 }}>\r\n                <Slider\r\n                  value={fontSize}\r\n                  min={12}\r\n                  max={24}\r\n                  step={1}\r\n                  onChange={(e: Event, newValue: number | number[]) => setFontSize(newValue as number)}\r\n                  aria-labelledby=\"font-size-slider\"\r\n                />\r\n              </Box>\r\n              <Box>\r\n                <Typography>{fontSize}px</Typography>\r\n              </Box>\r\n            </Box>\r\n            \r\n            <FormControl fullWidth sx={{ mt: 2 }}>\r\n              <InputLabel id=\"language-select-label\">Language</InputLabel>\r\n              <Select\r\n                labelId=\"language-select-label\"\r\n                value={language}\r\n                label=\"Language\"\r\n                onChange={(e) => setLanguage(e.target.value as string)}\r\n                startAdornment={<LanguageIcon sx={{ mr: 1, ml: -0.5 }} />}\r\n              >\r\n                <MenuItem value=\"en\">English</MenuItem>\r\n                <MenuItem value=\"vi\">Vietnamese</MenuItem>\r\n                <MenuItem value=\"ja\">Japanese</MenuItem>\r\n                <MenuItem value=\"ko\">Korean</MenuItem>\r\n                <MenuItem value=\"zh\">Chinese</MenuItem>\r\n              </Select>\r\n            </FormControl>\r\n            \r\n            {isCompanyAdmin && (\r\n              <FormControlLabel\r\n                control={\r\n                  <Switch\r\n                    id=\"applyCompanyWide\"\r\n                    onChange={(e) => e.target.setAttribute('data-checked', e.target.checked.toString())}\r\n                  />\r\n                }\r\n                label=\"Apply to all company users\"\r\n                sx={{ mt: 2, display: 'block' }}\r\n              />\r\n            )}\r\n            \r\n            <Button\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              sx={{ mt: 3 }}\r\n              onClick={handleSaveAppSettings}\r\n              disabled={loading}\r\n              startIcon={loading ? <CircularProgress size={20} /> : null}\r\n            >\r\n              Save Appearance Settings\r\n            </Button>\r\n            \r\n            <Divider sx={{ my: 4 }} />\r\n            \r\n            {user?.role === 'admin' && (\r\n              <>\r\n                <Typography variant=\"h6\" gutterBottom>\r\n                  White Label Settings\r\n                </Typography>\r\n                \r\n                <Typography variant=\"body2\" color=\"text.secondary\" paragraph>\r\n                  Customize your company's branding and appearance. These settings apply to all users in your organization.\r\n                </Typography>\r\n                \r\n                <TenantConfigPanel tenantId={user.companyId} />\r\n              </>\r\n            )}\r\n          </Box>\r\n        </TabPanel>\r\n        \r\n        <TabPanel value={tabValue} index={1}>\r\n          <Box sx={{ maxWidth: 800 }}>\r\n            <Typography variant=\"h6\" gutterBottom>\r\n              Notification Preferences\r\n            </Typography>\r\n            <FormGroup>\r\n              <Typography variant=\"subtitle1\" sx={{ mt: 3 }}>\r\n                Channels\r\n              </Typography>\r\n              <FormControlLabel\r\n                control={\r\n                  <Switch\r\n                    checked={emailNotifications}\r\n                    onChange={(e) => setEmailNotifications(e.target.checked)}\r\n                  />\r\n                }\r\n                label=\"Email Notifications\"\r\n              />\r\n              <FormControlLabel\r\n                control={\r\n                  <Switch\r\n                    checked={pushNotifications}\r\n                    onChange={(e) => setPushNotifications(e.target.checked)}\r\n                  />\r\n                }\r\n                label=\"Push Notifications\"\r\n              />\r\n            </FormGroup>\r\n            <FormGroup>\r\n              <Typography variant=\"subtitle1\" sx={{ mt: 3 }}>\r\n                Events\r\n              </Typography>\r\n              <FormControlLabel\r\n                control={\r\n                  <Switch\r\n                    checked={newOrderNotifications}\r\n                    onChange={(e) => setNewOrderNotifications(e.target.checked)}\r\n                  />\r\n                }\r\n                label=\"New Orders\"\r\n              />\r\n              <FormControlLabel\r\n                control={\r\n                  <Switch\r\n                    checked={inventoryAlerts}\r\n                    onChange={(e) => setInventoryAlerts(e.target.checked)}\r\n                  />\r\n                }\r\n                label=\"Low Inventory Alerts\"\r\n              />\r\n            </FormGroup>\r\n            \r\n            {isCompanyAdmin && (\r\n              <FormControlLabel\r\n                control={\r\n                  <Switch\r\n                    id=\"notificationsApplyCompanyWide\"\r\n                    onChange={(e) => e.target.setAttribute('data-checked', e.target.checked.toString())}\r\n                  />\r\n                }\r\n                label=\"Apply to all company users\"\r\n                sx={{ mt: 2, display: 'block' }}\r\n              />\r\n            )}\r\n            \r\n            <Button\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              sx={{ mt: 3 }}\r\n              onClick={handleSaveNotificationSettings}\r\n              disabled={loading}\r\n              startIcon={loading ? <CircularProgress size={20} /> : null}\r\n            >\r\n              Save Notification Settings\r\n            </Button>\r\n          </Box>\r\n        </TabPanel>\r\n        \r\n        <TabPanel value={tabValue} index={2}>\r\n          <Box sx={{ maxWidth: 800 }}>\r\n            <Typography variant=\"h6\" gutterBottom>\r\n              API Configuration\r\n            </Typography>\r\n            <Card variant=\"outlined\" sx={{ mb: 4 }}>\r\n              <CardContent>\r\n                <Typography variant=\"subtitle1\" gutterBottom>\r\n                  Your API Key\r\n                </Typography>\r\n                <TextField\r\n                  fullWidth\r\n                  value={apiKey || '•••••••••••••••••••••••••'}\r\n                  InputProps={{\r\n                    readOnly: true\r\n                  }}\r\n                  variant=\"outlined\"\r\n                  sx={{ mb: 2 }}\r\n                />\r\n                {isCompanyAdmin && (\r\n                  <FormControlLabel\r\n                    control={\r\n                      <Switch\r\n                        id=\"integrationsApplyCompanyWide\"\r\n                        onChange={(e) => e.target.setAttribute('data-checked', e.target.checked.toString())}\r\n                      />\r\n                    }\r\n                    label=\"Apply to all company users\"\r\n                  />\r\n                )}\r\n                <Button\r\n                  variant=\"contained\"\r\n                  onClick={handleGenerateApiKey}\r\n                  disabled={loading}\r\n                  startIcon={loading ? <CircularProgress size={20} /> : null}\r\n                >\r\n                  Generate New API Key\r\n                </Button>\r\n              </CardContent>\r\n            </Card>\r\n            \r\n            <Typography variant=\"h6\" gutterBottom>\r\n              Connected Systems\r\n            </Typography>\r\n            <List>\r\n              {integrations.map((integration) => (\r\n                <ListItem\r\n                  key={integration.id}\r\n                  secondaryAction={\r\n                    <Button\r\n                      variant={integration.connected ? \"outlined\" : \"contained\"}\r\n                      color={integration.connected ? \"error\" : \"primary\"}\r\n                      onClick={() => handleConnectIntegration(integration.id)}\r\n                      size=\"small\"\r\n                    >\r\n                      {integration.connected ? 'Disconnect' : 'Connect'}\r\n                    </Button>\r\n                  }\r\n                  disablePadding\r\n                  sx={{ mb: 1, border: '1px solid', borderColor: 'divider', borderRadius: 1 }}\r\n                >\r\n                  <Box sx={{ p: 2, width: '100%', display: 'flex', alignItems: 'center' }}>\r\n                    {integration.connected && (\r\n                      <CheckIcon color=\"success\" sx={{ mr: 1 }} />\r\n                    )}\r\n                    <ListItemText\r\n                      primary={integration.name}\r\n                      secondary={integration.connected ? 'Connected' : 'Not connected'}\r\n                    />\r\n                  </Box>\r\n                </ListItem>\r\n              ))}\r\n            </List>\r\n            <Button\r\n              variant=\"outlined\"\r\n              startIcon={<AddIcon />}\r\n              sx={{ mt: 2 }}\r\n            >\r\n              Add New Integration\r\n            </Button>\r\n          </Box>\r\n        </TabPanel>\r\n        \r\n        <TabPanel value={tabValue} index={3}>\r\n          <Box sx={{ maxWidth: 800 }}>\r\n            <Typography variant=\"h6\" gutterBottom>\r\n              Data Management\r\n            </Typography>\r\n            <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 3 }}>\r\n              <Box sx={{ flex: { xs: '1 1 100%', md: '0 0 calc(50% - 12px)' } }}>\r\n                <Card variant=\"outlined\">\r\n                  <CardContent>\r\n                    <Typography variant=\"subtitle1\" gutterBottom>\r\n                      Export Your Data\r\n                    </Typography>\r\n                    <Typography variant=\"body2\" color=\"text.secondary\" paragraph>\r\n                      Download a copy of all your data in CSV or JSON format.\r\n                    </Typography>\r\n                    <Button\r\n                      variant=\"outlined\"\r\n                      onClick={() => setExportDialogOpen(true)}\r\n                    >\r\n                      Export Data\r\n                    </Button>\r\n                  </CardContent>\r\n                </Card>\r\n              </Box>\r\n              <Box sx={{ flex: { xs: '1 1 100%', md: '0 0 calc(50% - 12px)' } }}>\r\n                <Card variant=\"outlined\" sx={{ borderColor: 'error.light' }}>\r\n                  <CardContent>\r\n                    <Typography variant=\"subtitle1\" color=\"error\" gutterBottom>\r\n                      Delete Account\r\n                    </Typography>\r\n                    <Typography variant=\"body2\" color=\"text.secondary\" paragraph>\r\n                      Permanently delete your account and all associated data.\r\n                    </Typography>\r\n                    <Button\r\n                      variant=\"outlined\"\r\n                      color=\"error\"\r\n                      onClick={() => setDeleteDialogOpen(true)}\r\n                    >\r\n                      Delete Account\r\n                    </Button>\r\n                  </CardContent>\r\n                </Card>\r\n              </Box>\r\n            </Box>\r\n          </Box>\r\n        </TabPanel>\r\n      </Paper>\r\n      \r\n      {/* Export Data Dialog */}\r\n      <Dialog\r\n        open={exportDialogOpen}\r\n        onClose={() => setExportDialogOpen(false)}\r\n      >\r\n        <DialogTitle>Export Your Data</DialogTitle>\r\n        <DialogContent>\r\n          <DialogContentText>\r\n            Choose the format you want to export your data in:\r\n          </DialogContentText>\r\n          <Box sx={{ display: 'flex', justifyContent: 'space-around', mt: 2 }}>\r\n            <Button variant=\"outlined\">\r\n              CSV Format\r\n            </Button>\r\n            <Button variant=\"outlined\">\r\n              JSON Format\r\n            </Button>\r\n          </Box>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={() => setExportDialogOpen(false)}>Cancel</Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n      \r\n      {/* Delete Account Dialog */}\r\n      <Dialog\r\n        open={deleteDialogOpen}\r\n        onClose={() => setDeleteDialogOpen(false)}\r\n      >\r\n        <DialogTitle>\r\n          <Typography color=\"error\">Delete Account</Typography>\r\n        </DialogTitle>\r\n        <DialogContent>\r\n          <DialogContentText>\r\n            Are you sure you want to delete your account? This action cannot be undone and all your data will be permanently deleted.\r\n          </DialogContentText>\r\n          <TextField\r\n            autoFocus\r\n            margin=\"dense\"\r\n            id=\"confirmation\"\r\n            label=\"Type 'DELETE' to confirm\"\r\n            fullWidth\r\n            variant=\"outlined\"\r\n            sx={{ mt: 2 }}\r\n          />\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={() => setDeleteDialogOpen(false)}>Cancel</Button>\r\n          <Button color=\"error\">\r\n            Delete Permanently\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default Settings;","usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"d:\\All python project\\Tubex\\Frontend\\app\\src\\pages\\UserManagement.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'setRoles' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":70,"column":17,"nodeType":"Identifier","messageId":"unusedVar","endLine":70,"endColumn":25},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'setInvitations' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":71,"column":23,"nodeType":"Identifier","messageId":"unusedVar","endLine":71,"endColumn":37},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'setSearchQuery' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":72,"column":23,"nodeType":"Identifier","messageId":"unusedVar","endLine":72,"endColumn":37},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'setAvailablePermissions' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":113,"column":32,"nodeType":"Identifier","messageId":"unusedVar","endLine":113,"endColumn":55},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'fetchUsers'. Either include it or remove the dependency array.","line":126,"column":6,"nodeType":"ArrayExpression","endLine":126,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [fetchUsers]","fix":{"range":[3882,3884],"text":"[fetchUsers]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\r\nimport {\r\n  Box,\r\n  Container,\r\n  Typography,\r\n  Paper,\r\n  Button,\r\n  TextField,\r\n  Chip,\r\n  Dialog,\r\n  DialogActions,\r\n  DialogContent,\r\n  DialogTitle,\r\n  FormControl,\r\n  InputLabel,\r\n  Select,\r\n  MenuItem,\r\n  FormHelperText,\r\n  CircularProgress,\r\n  Alert,\r\n  Tabs,\r\n  Tab,\r\n  Switch,\r\n  FormControlLabel,\r\n} from '@mui/material';\r\nimport { userManagementService, UserListParams, UserListResponse, UserUpdateRequest, UserCreateRequest } from '../services/api';\r\nimport { useAuth } from '../contexts/AuthContext';\r\nimport UsersTab from '../components/whitelabel/user-management/UsersTab';\r\nimport RolesTab from '../components/whitelabel/user-management/RolesTab';\r\nimport InvitationsTab from '../components/whitelabel/user-management/InvitationsTab';\r\n\r\ninterface TabPanelProps {\r\n  children?: React.ReactNode;\r\n  index: number;\r\n  value: number;\r\n}\r\n\r\nfunction TabPanel(props: TabPanelProps) {\r\n  const { children, value, index, ...other } = props;\r\n\r\n  return (\r\n    <div\r\n      role=\"tabpanel\"\r\n      hidden={value !== index}\r\n      id={`user-tabpanel-${index}`}\r\n      aria-labelledby={`user-tab-${index}`}\r\n      {...other}\r\n    >\r\n      {value === index && <Box sx={{ pt: 2 }}>{children}</Box>}\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction a11yProps(index: number) {\r\n  return {\r\n    id: `user-tab-${index}`,\r\n    'aria-controls': `user-tabpanel-${index}`,\r\n  };\r\n}\r\n\r\nconst UserManagement: React.FC = () => {\r\n  const { user } = useAuth(); // Retrieve user object from AuthContext\r\n  const companyId = user?.companyId; // Extract companyId dynamically\r\n\r\n  // Tab state\r\n  const [tabValue, setTabValue] = useState(0);\r\n  \r\n  // Users state\r\n  const [users, setUsers] = useState<any[]>([]);\r\n  const [roles, setRoles] = useState<any[]>([]);\r\n  const [invitations, setInvitations] = useState<any[]>([]);\r\n  const [searchQuery, setSearchQuery] = useState('');\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState<string | null>(null);\r\n  \r\n  // User dialog state\r\n  const [userDialogOpen, setUserDialogOpen] = useState(false);\r\n  const [selectedUser, setSelectedUser] = useState<any | null>(null);\r\n  const [userFormData, setUserFormData] = useState({\r\n    name: '',\r\n    email: '',\r\n    role: '',\r\n    isActive: true\r\n  });\r\n  const [userFormErrors, setUserFormErrors] = useState<Record<string, string>>({});\r\n  \r\n  // Role dialog state\r\n  const [roleDialogOpen, setRoleDialogOpen] = useState(false);\r\n  const [selectedRole, setSelectedRole] = useState<any | null>(null);\r\n  const [roleFormData, setRoleFormData] = useState({\r\n    name: '',\r\n    description: '',\r\n    permissions: [] as string[]\r\n  });\r\n  const [roleFormErrors, setRoleFormErrors] = useState<Record<string, string>>({});\r\n  \r\n  // Invitation dialog state\r\n  const [inviteDialogOpen, setInviteDialogOpen] = useState(false);\r\n  const [inviteFormData, setInviteFormData] = useState({\r\n    email: '',\r\n    role: '',\r\n    message: ''\r\n  });\r\n  const [inviteFormErrors, setInviteFormErrors] = useState<Record<string, string>>({});\r\n\r\n  // Confirmation dialog state\r\n  const [confirmDialogOpen, setConfirmDialogOpen] = useState(false);\r\n  const [confirmAction, setConfirmAction] = useState<(() => Promise<void>) | null>(null);\r\n  const [confirmTitle, setConfirmTitle] = useState('');\r\n  const [confirmMessage, setConfirmMessage] = useState('');\r\n\r\n  // Available permissions\r\n  const [availablePermissions, setAvailablePermissions] = useState<string[]>([\r\n    'users:read', 'users:write', 'users:delete',\r\n    'inventory:read', 'inventory:write', 'inventory:delete',\r\n    'products:read', 'products:write', 'products:delete',\r\n    'orders:read', 'orders:write', 'orders:delete',\r\n    'reports:read'\r\n  ]);\r\n\r\n  // Fetch all data when component mounts\r\n  useEffect(() => {\r\n    fetchUsers();\r\n    fetchRoles();\r\n    fetchInvitations();\r\n  }, []);\r\n\r\n  // Fetch users based on search query\r\n  const fetchUsers = async () => {\r\n    setLoading(true);\r\n    setError(null);\r\n    \r\n    try {\r\n      const params: UserListParams = {\r\n        company_id: companyId,\r\n        search: searchQuery || undefined, // Ensure compatibility with `UserListParams`\r\n      };\r\n\r\n      const response: UserListResponse = await userManagementService.getUsers(params);\r\n      setUsers(response.data || []); // Adjusted to use `data` instead of `users`\r\n    } catch (err: any) {\r\n      console.error('Error fetching users:', err);\r\n      setError(err.message || 'Failed to load users');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const fetchRoles = async () => {\r\n    console.warn('`getRoles` method is not implemented in `userManagementService`.');\r\n  };\r\n\r\n  const fetchInvitations = async () => {\r\n    console.warn('`getInvitations` method is not implemented in `userManagementService`.');\r\n  };\r\n\r\n  // Tab change handler\r\n  const handleTabChange = (event: React.SyntheticEvent, newValue: number) => {\r\n    setTabValue(newValue);\r\n  };\r\n\r\n  // User form handlers\r\n  const openUserDialog = (user: any = null) => {\r\n    if (user) {\r\n      setSelectedUser(user);\r\n      setUserFormData({\r\n        name: user.name || '',\r\n        email: user.email || '',\r\n        role: user.role?.id || '',\r\n        isActive: user.isActive !== false\r\n      });\r\n    } else {\r\n      setSelectedUser(null);\r\n      setUserFormData({\r\n        name: '',\r\n        email: '',\r\n        role: '',\r\n        isActive: true\r\n      });\r\n    }\r\n    setUserFormErrors({});\r\n    setUserDialogOpen(true);\r\n  };\r\n\r\n  const closeUserDialog = () => {\r\n    setUserDialogOpen(false);\r\n    setSelectedUser(null);\r\n  };\r\n\r\n  const handleUserFormChange = (field: string, value: any) => {\r\n    if (field === 'role' && !['admin', 'manager', 'staff', 'supplier', 'dealer'].includes(value)) {\r\n      setUserFormErrors((prev) => ({ ...prev, role: 'Invalid role selected' }));\r\n      return;\r\n    }\r\n\r\n    setUserFormData((prev) => ({ ...prev, [field]: value }));\r\n    if (userFormErrors[field]) {\r\n      setUserFormErrors((prev) => ({ ...prev, [field]: '' }));\r\n    }\r\n  };\r\n\r\n  const validateUserForm = () => {\r\n    const errors: Record<string, string> = {};\r\n    \r\n    if (!userFormData.name.trim()) {\r\n      errors['name'] = 'Name is required';\r\n    }\r\n    \r\n    if (!userFormData.email.trim()) {\r\n      errors['email'] = 'Email is required';\r\n    } else if (!/\\S+@\\S+\\.\\S+/.test(userFormData.email)) {\r\n      errors['email'] = 'Invalid email format';\r\n    }\r\n    \r\n    if (!userFormData.role) {\r\n      errors['role'] = 'Role is required';\r\n    }\r\n    \r\n    setUserFormErrors(errors);\r\n    return Object.keys(errors).length === 0;\r\n  };\r\n\r\n  const handleUserSave = async () => {\r\n    if (!validateUserForm()) return;\r\n    \r\n    setLoading(true);\r\n    try {\r\n      if (selectedUser) {\r\n        const updateData: UserUpdateRequest = {\r\n          firstName: userFormData.name.split(' ')[0],\r\n          lastName: userFormData.name.split(' ').slice(1).join(' ') || '',\r\n          email: userFormData.email,\r\n          role: userFormData.role as UserUpdateRequest['role'],\r\n          status: userFormData.isActive ? 'active' : 'inactive',\r\n          companyId: companyId ?? '',\r\n        };\r\n        await userManagementService.updateUser(selectedUser.id, updateData);\r\n      } else {\r\n        const createData: UserCreateRequest = {\r\n          firstName: userFormData.name.split(' ')[0],\r\n          lastName: userFormData.name.split(' ').slice(1).join(' ') || '',\r\n          email: userFormData.email,\r\n          password: 'defaultPassword123', // Placeholder password\r\n          role: userFormData.role as UserCreateRequest['role'],\r\n          status: userFormData.isActive ? 'active' : 'inactive',\r\n          companyId: companyId ?? '',\r\n        };\r\n        await userManagementService.createUser(createData);\r\n      }\r\n      \r\n      fetchUsers();\r\n      closeUserDialog();\r\n    } catch (err: any) {\r\n      console.error('Error saving user:', err);\r\n      setError(err.message || 'Failed to save user');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleDeleteUser = (userId: string) => {\r\n    setConfirmTitle('Delete User');\r\n    setConfirmMessage('Are you sure you want to delete this user? This action cannot be undone.');\r\n    setConfirmAction(async () => {\r\n      try {\r\n        await userManagementService.deleteUser(userId);\r\n        fetchUsers();\r\n      } catch (err: any) {\r\n        console.error('Error deleting user:', err);\r\n        setError(err.message || 'Failed to delete user');\r\n      }\r\n    });\r\n    setConfirmDialogOpen(true);\r\n  };\r\n\r\n  // Role form handlers\r\n  const openRoleDialog = (role: any = null) => {\r\n    if (role) {\r\n      setSelectedRole(role);\r\n      setRoleFormData({\r\n        name: role.name || '',\r\n        description: role.description || '',\r\n        permissions: role.permissions || []\r\n      });\r\n    } else {\r\n      setSelectedRole(null);\r\n      setRoleFormData({\r\n        name: '',\r\n        description: '',\r\n        permissions: []\r\n      });\r\n    }\r\n    setRoleFormErrors({});\r\n    setRoleDialogOpen(true);\r\n  };\r\n\r\n  const closeRoleDialog = () => {\r\n    setRoleDialogOpen(false);\r\n    setSelectedRole(null);\r\n  };\r\n\r\n  const handleRoleFormChange = (field: string, value: any) => {\r\n    setRoleFormData(prev => ({ ...prev, [field]: value }));\r\n    if (roleFormErrors[field]) {\r\n      setRoleFormErrors(prev => ({ ...prev, [field]: '' }));\r\n    }\r\n  };\r\n\r\n  const handlePermissionToggle = (permission: string) => {\r\n    setRoleFormData(prev => {\r\n      const isSelected = prev.permissions.includes(permission);\r\n      const updatedPermissions = isSelected\r\n        ? prev.permissions.filter(p => p !== permission)\r\n        : [...prev.permissions, permission];\r\n        \r\n      return { ...prev, permissions: updatedPermissions };\r\n    });\r\n  };\r\n\r\n  const validateRoleForm = () => {\r\n    const errors: Record<string, string> = {};\r\n    \r\n    if (!roleFormData.name.trim()) {\r\n      errors['name'] = 'Role name is required';\r\n    }\r\n    \r\n    if (roleFormData.permissions.length === 0) {\r\n      errors['permissions'] = 'At least one permission must be selected';\r\n    }\r\n    \r\n    setRoleFormErrors(errors);\r\n    return Object.keys(errors).length === 0;\r\n  };\r\n\r\n  const handleRoleSave = async () => {\r\n    if (!validateRoleForm()) return;\r\n    \r\n    setLoading(true);\r\n    try {\r\n      if (selectedRole) {\r\n        await userManagementService.updateRole(selectedRole.id, {\r\n          ...roleFormData,\r\n          companyId\r\n        });\r\n      } else {\r\n        await userManagementService.createRole({\r\n          ...roleFormData,\r\n          companyId\r\n        });\r\n      }\r\n      \r\n      fetchRoles();\r\n      closeRoleDialog();\r\n    } catch (err: any) {\r\n      console.error('Error saving role:', err);\r\n      setError(err.message || 'Failed to save role');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleDeleteRole = (roleId: string) => {\r\n    setConfirmTitle('Delete Role');\r\n    setConfirmMessage('Are you sure you want to delete this role? Users with this role will need to be reassigned.');\r\n    setConfirmAction(async () => {\r\n      try {\r\n        await userManagementService.deleteRole(roleId);\r\n        fetchRoles();\r\n      } catch (err: any) {\r\n        console.error('Error deleting role:', err);\r\n        setError(err.message || 'Failed to delete role');\r\n      }\r\n    });\r\n    setConfirmDialogOpen(true);\r\n  };\r\n\r\n  // Invitation form handlers\r\n  const openInviteDialog = () => {\r\n    setInviteFormData({\r\n      email: '',\r\n      role: '',\r\n      message: 'I would like to invite you to join our team on Tubex.'\r\n    });\r\n    setInviteFormErrors({});\r\n    setInviteDialogOpen(true);\r\n  };\r\n\r\n  const closeInviteDialog = () => {\r\n    setInviteDialogOpen(false);\r\n  };\r\n\r\n  const handleInviteFormChange = (field: string, value: any) => {\r\n    setInviteFormData(prev => ({ ...prev, [field]: value }));\r\n    if (inviteFormErrors[field]) {\r\n      setInviteFormErrors(prev => ({ ...prev, [field]: '' }));\r\n    }\r\n  };\r\n\r\n  const validateInviteForm = () => {\r\n    const errors: Record<string, string> = {};\r\n    \r\n    if (!inviteFormData.email.trim()) {\r\n      errors['email'] = 'Email is required';\r\n    } else if (!/\\S+@\\S+\\.\\S+/.test(inviteFormData.email)) {\r\n      errors['email'] = 'Invalid email format';\r\n    }\r\n    \r\n    if (!inviteFormData.role) {\r\n      errors['role'] = 'Role is required';\r\n    }\r\n    \r\n    setInviteFormErrors(errors);\r\n    return Object.keys(errors).length === 0;\r\n  };\r\n\r\n  const handleSendInvite = async () => {\r\n    if (!validateInviteForm()) return;\r\n    \r\n    setLoading(true);\r\n    try {\r\n      await userManagementService.sendInvitation({\r\n        ...inviteFormData,\r\n        companyId\r\n      });\r\n      \r\n      fetchInvitations();\r\n      closeInviteDialog();\r\n    } catch (err: any) {\r\n      console.error('Error sending invitation:', err);\r\n      setError(err.message || 'Failed to send invitation');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleResendInvite = (invitationId: string) => {\r\n    setLoading(true);\r\n    setError(null);\r\n    \r\n    (async () => {\r\n      try {\r\n        await userManagementService.resendInvitation(invitationId);\r\n        fetchInvitations();\r\n      } catch (err: any) {\r\n        console.error('Error resending invitation:', err);\r\n        setError(err.message || 'Failed to resend invitation');\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    })();\r\n  };\r\n\r\n  const handleCancelInvite = (invitationId: string) => {\r\n    setConfirmTitle('Cancel Invitation');\r\n    setConfirmMessage('Are you sure you want to cancel this invitation?');\r\n    setConfirmAction(async () => {\r\n      try {\r\n        await userManagementService.cancelInvitation(invitationId);\r\n        fetchInvitations();\r\n      } catch (err: any) {\r\n        console.error('Error cancelling invitation:', err);\r\n        setError(err.message || 'Failed to cancel invitation');\r\n      }\r\n    });\r\n    setConfirmDialogOpen(true);\r\n  };\r\n\r\n  // Permission group rendering\r\n  const renderPermissionGroup = (group: string) => {\r\n    const groupPermissions = availablePermissions.filter(p => p.startsWith(`${group}:`));\r\n    \r\n    return (\r\n      <Paper key={group} sx={{ p: 2, mb: 2 }}>\r\n        <Typography variant=\"subtitle1\" sx={{ mb: 1 }}>\r\n          {group.charAt(0).toUpperCase() + group.slice(1)}\r\n        </Typography>\r\n        <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 1 }}>\r\n          {groupPermissions.map(permission => {\r\n            const action = permission.split(':')[1];\r\n            const isSelected = roleFormData.permissions.includes(permission);\r\n            \r\n            return (\r\n              <Chip\r\n                key={permission}\r\n                label={action}\r\n                color={isSelected ? 'primary' : 'default'}\r\n                onClick={() => handlePermissionToggle(permission)}\r\n                sx={{ textTransform: 'capitalize' }}\r\n              />\r\n            );\r\n          })}\r\n        </Box>\r\n      </Paper>\r\n    );\r\n  };\r\n\r\n  // Get unique permission groups\r\n  const permissionGroups = Array.from(new Set(availablePermissions.map((p) => p.split(':')[0])));\r\n\r\n  if (!companyId) {\r\n    return <Typography variant=\"h6\">Company ID is not available. Please log in again.</Typography>;\r\n  }\r\n\r\n  return (\r\n    <Container maxWidth=\"lg\" sx={{ mt: 4, mb: 4 }}>\r\n      <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 3 }}>\r\n        <Typography variant=\"h4\" component=\"h1\">\r\n          User Management\r\n        </Typography>\r\n      </Box>\r\n\r\n      {error && (\r\n        <Alert severity=\"error\" sx={{ mb: 3 }}>\r\n          {error}\r\n        </Alert>\r\n      )}\r\n\r\n      <Paper sx={{ mb: 3 }}>\r\n        <Box sx={{ borderBottom: 1, borderColor: 'divider' }}>\r\n          <Tabs value={tabValue} onChange={handleTabChange} aria-label=\"user management tabs\">\r\n            <Tab label=\"Users\" {...a11yProps(0)} />\r\n            <Tab label=\"Roles\" {...a11yProps(1)} />\r\n            <Tab label=\"Invitations\" {...a11yProps(2)} />\r\n          </Tabs>\r\n        </Box>\r\n\r\n        <TabPanel value={tabValue} index={0}>\r\n          <UsersTab\r\n            users={users}\r\n            loading={loading}\r\n            fetchUsers={fetchUsers}\r\n            openUserDialog={openUserDialog}\r\n            handleDeleteUser={handleDeleteUser}\r\n          />\r\n        </TabPanel>\r\n\r\n        <TabPanel value={tabValue} index={1}>\r\n          <RolesTab\r\n            roles={roles}\r\n            loading={loading}\r\n            openRoleDialog={openRoleDialog}\r\n            handleDeleteRole={handleDeleteRole}\r\n          />\r\n        </TabPanel>\r\n\r\n        <TabPanel value={tabValue} index={2}>\r\n          <InvitationsTab\r\n            invitations={invitations}\r\n            loading={loading}\r\n            openInviteDialog={openInviteDialog}\r\n            handleResendInvite={handleResendInvite}\r\n            handleCancelInvite={handleCancelInvite}\r\n          />\r\n        </TabPanel>\r\n      </Paper>\r\n\r\n      {/* User Dialog */}\r\n      <Dialog \r\n        open={userDialogOpen} \r\n        onClose={closeUserDialog}\r\n        maxWidth=\"sm\"\r\n        fullWidth\r\n      >\r\n        <DialogTitle>\r\n          {selectedUser ? 'Edit User' : 'Add New User'}\r\n        </DialogTitle>\r\n        <DialogContent>\r\n          <Box sx={{ pt: 1, display: 'flex', flexDirection: 'column', gap: 2 }}>\r\n            <TextField\r\n              label=\"Name\"\r\n              fullWidth\r\n              value={userFormData.name}\r\n              onChange={(e) => handleUserFormChange('name', e.target.value)}\r\n              error={!!userFormErrors.name}\r\n              helperText={userFormErrors.name}\r\n            />\r\n            \r\n            <TextField\r\n              label=\"Email\"\r\n              type=\"email\"\r\n              fullWidth\r\n              value={userFormData.email}\r\n              onChange={(e) => handleUserFormChange('email', e.target.value)}\r\n              error={!!userFormErrors.email}\r\n              helperText={userFormErrors.email}\r\n              disabled={!!selectedUser} // Email can't be changed for existing users\r\n            />\r\n            \r\n            <FormControl fullWidth error={!!userFormErrors.role}>\r\n              <InputLabel>Role</InputLabel>\r\n              <Select\r\n                value={userFormData.role}\r\n                label=\"Role\"\r\n                onChange={(e) => handleUserFormChange('role', e.target.value)}\r\n              >\r\n                {roles.map(role => (\r\n                  <MenuItem key={role.id} value={role.id}>\r\n                    {role.name}\r\n                  </MenuItem>\r\n                ))}\r\n              </Select>\r\n              {userFormErrors.role && (\r\n                <FormHelperText>{userFormErrors.role}</FormHelperText>\r\n              )}\r\n            </FormControl>\r\n            \r\n            <FormControlLabel\r\n              control={\r\n                <Switch\r\n                  checked={userFormData.isActive}\r\n                  onChange={(e) => handleUserFormChange('isActive', e.target.checked)}\r\n                />\r\n              }\r\n              label=\"Active\"\r\n            />\r\n          </Box>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={closeUserDialog}>Cancel</Button>\r\n          <Button \r\n            onClick={handleUserSave} \r\n            variant=\"contained\" \r\n            color=\"primary\"\r\n            disabled={loading}\r\n          >\r\n            {loading ? <CircularProgress size={24} /> : 'Save'}\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n\r\n      {/* Role Dialog */}\r\n      <Dialog \r\n        open={roleDialogOpen} \r\n        onClose={closeRoleDialog}\r\n        maxWidth=\"md\"\r\n        fullWidth\r\n      >\r\n        <DialogTitle>\r\n          {selectedRole ? 'Edit Role' : 'Add New Role'}\r\n        </DialogTitle>\r\n        <DialogContent>\r\n          <Box sx={{ pt: 1, display: 'flex', flexDirection: 'column', gap: 2 }}>\r\n            <TextField\r\n              label=\"Role Name\"\r\n              fullWidth\r\n              value={roleFormData.name}\r\n              onChange={(e) => handleRoleFormChange('name', e.target.value)}\r\n              error={!!roleFormErrors.name}\r\n              helperText={roleFormErrors.name}\r\n            />\r\n            \r\n            <TextField\r\n              label=\"Description\"\r\n              fullWidth\r\n              value={roleFormData.description}\r\n              onChange={(e) => handleRoleFormChange('description', e.target.value)}\r\n            />\r\n            \r\n            <Typography variant=\"subtitle1\" gutterBottom>\r\n              Permissions\r\n            </Typography>\r\n            \r\n            {roleFormErrors.permissions && (\r\n              <FormHelperText error>{roleFormErrors.permissions}</FormHelperText>\r\n            )}\r\n            \r\n            {permissionGroups.map(group => renderPermissionGroup(group))}\r\n          </Box>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={closeRoleDialog}>Cancel</Button>\r\n          <Button \r\n            onClick={handleRoleSave} \r\n            variant=\"contained\" \r\n            color=\"primary\"\r\n            disabled={loading}\r\n          >\r\n            {loading ? <CircularProgress size={24} /> : 'Save'}\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n\r\n      {/* Invite Dialog */}\r\n      <Dialog \r\n        open={inviteDialogOpen} \r\n        onClose={closeInviteDialog}\r\n        maxWidth=\"sm\"\r\n        fullWidth\r\n      >\r\n        <DialogTitle>Invite User</DialogTitle>\r\n        <DialogContent>\r\n          <Box sx={{ pt: 1, display: 'flex', flexDirection: 'column', gap: 2 }}>\r\n            <TextField\r\n              label=\"Email Address\"\r\n              type=\"email\"\r\n              fullWidth\r\n              value={inviteFormData.email}\r\n              onChange={(e) => handleInviteFormChange('email', e.target.value)}\r\n              error={!!inviteFormErrors.email}\r\n              helperText={inviteFormErrors.email}\r\n            />\r\n            \r\n            <FormControl fullWidth error={!!inviteFormErrors.role}>\r\n              <InputLabel>Role</InputLabel>\r\n              <Select\r\n                value={inviteFormData.role}\r\n                label=\"Role\"\r\n                onChange={(e) => handleInviteFormChange('role', e.target.value)}\r\n              >\r\n                {roles.map(role => (\r\n                  <MenuItem key={role.id} value={role.id}>\r\n                    {role.name}\r\n                  </MenuItem>\r\n                ))}\r\n              </Select>\r\n              {inviteFormErrors.role && (\r\n                <FormHelperText>{inviteFormErrors.role}</FormHelperText>\r\n              )}\r\n            </FormControl>\r\n            \r\n            <TextField\r\n              label=\"Invitation Message\"\r\n              multiline\r\n              rows={3}\r\n              fullWidth\r\n              value={inviteFormData.message}\r\n              onChange={(e) => handleInviteFormChange('message', e.target.value)}\r\n            />\r\n          </Box>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={closeInviteDialog}>Cancel</Button>\r\n          <Button \r\n            onClick={handleSendInvite} \r\n            variant=\"contained\" \r\n            color=\"primary\"\r\n            disabled={loading}\r\n          >\r\n            {loading ? <CircularProgress size={24} /> : 'Send Invitation'}\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n\r\n      {/* Confirmation Dialog */}\r\n      <Dialog open={confirmDialogOpen} onClose={() => setConfirmDialogOpen(false)}>\r\n        <DialogTitle>{confirmTitle}</DialogTitle>\r\n        <DialogContent>\r\n          <Typography>{confirmMessage}</Typography>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={() => setConfirmDialogOpen(false)}>Cancel</Button>\r\n          <Button\r\n            variant=\"contained\"\r\n            color=\"error\"\r\n            onClick={async () => {\r\n              if (confirmAction) {\r\n                setLoading(true);\r\n                await confirmAction();\r\n                setLoading(false);\r\n              }\r\n              setConfirmDialogOpen(false);\r\n            }}\r\n            disabled={loading}\r\n          >\r\n            {loading ? <CircularProgress size={24} /> : 'Confirm'}\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default UserManagement;","usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"d:\\All python project\\Tubex\\Frontend\\app\\src\\pages\\UserProfile.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"d:\\All python project\\Tubex\\Frontend\\app\\src\\pages\\WarehouseManagement.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'loading' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":35,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":35,"endColumn":17},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'fetchWarehouses'. Either include it or remove the dependency array.","line":51,"column":6,"nodeType":"ArrayExpression","endLine":51,"endColumn":17,"suggestions":[{"desc":"Update the dependencies array to be: [companyId, fetchWarehouses]","fix":{"range":[1648,1659],"text":"[companyId, fetchWarehouses]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'fetchInventory'. Either include it or remove the dependency array.","line":57,"column":6,"nodeType":"ArrayExpression","endLine":57,"endColumn":25,"suggestions":[{"desc":"Update the dependencies array to be: [fetchInventory, selectedWarehouse]","fix":{"range":[1788,1807],"text":"[fetchInventory, selectedWarehouse]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\r\nimport {\r\n  Box,\r\n  Paper,\r\n  Typography,\r\n  Button,\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableContainer,\r\n  TableHead,\r\n  TableRow,\r\n  IconButton,\r\n  Tooltip,\r\n  Dialog,\r\n  DialogTitle,\r\n  DialogContent,\r\n  DialogActions,\r\n  TextField,\r\n} from '@mui/material';\r\nimport EditIcon from '@mui/icons-material/Edit';\r\nimport DeleteIcon from '@mui/icons-material/Delete';\r\nimport AddCircleOutlineIcon from '@mui/icons-material/AddCircleOutline';\r\nimport { inventoryService, warehouseService } from '../services/api';\r\nimport { InventoryItem } from '../services/api/inventoryService';\r\nimport { Warehouse, ApiError } from '../services/api/warehouseService';\r\nimport { useAuth } from '../contexts/AuthContext';\r\n\r\nconst WarehouseManagement: React.FC = () => {\r\n  const [warehouses, setWarehouses] = useState<Warehouse[]>([]);\r\n  const [inventory, setInventory] = useState<InventoryItem[]>([]);\r\n  const [selectedWarehouse, setSelectedWarehouse] = useState<string>('');\r\n  const [openDialog, setOpenDialog] = useState(false);\r\n  const [newWarehouse, setNewWarehouse] = useState({ name: '', address: '', capacity: '' });\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState<string | null>(null);\r\n  \r\n  // Get company ID from auth context\r\n  const { user } = useAuth();\r\n  const [companyId, setCompanyId] = useState<string>('');\r\n  \r\n  // Set companyId from auth context when user data is available\r\n  useEffect(() => {\r\n    if (user && user.companyId) {\r\n      setCompanyId(user.companyId);\r\n    }\r\n  }, [user]);\r\n\r\n  useEffect(() => {\r\n    fetchWarehouses();\r\n  }, [companyId]); // Re-fetch when companyId changes\r\n\r\n  useEffect(() => {\r\n    if (selectedWarehouse) {\r\n      fetchInventory();\r\n    }\r\n  }, [selectedWarehouse]);\r\n  const fetchWarehouses = async () => {\r\n    try {\r\n      if (!companyId) {\r\n        setWarehouses([]);\r\n        return;\r\n      }\r\n      \r\n      setLoading(true);\r\n      const response = await warehouseService.getWarehouses(companyId);\r\n      \r\n      // Debug the response structure\r\n      console.log('Warehouse API response:', response);\r\n      \r\n      // Check the structure of the response and extract the warehouses array\r\n      if (Array.isArray(response.data)) {\r\n        setWarehouses(response.data);\r\n      } \r\n      // If response.data contains a warehouses property that is an array\r\n      else if (response.data && typeof response.data === 'object' && 'warehouses' in response.data && \r\n               Array.isArray((response.data as any).warehouses)) {\r\n        setWarehouses((response.data as any).warehouses);\r\n      }\r\n      // If response.data.data contains the warehouses array\r\n      else if (response.data && typeof response.data === 'object' && 'data' in response.data && \r\n               Array.isArray((response.data as any).data)) {\r\n        setWarehouses((response.data as any).data);\r\n      }\r\n      // Default to empty array if no matching structure is found\r\n      else {\r\n        console.error('Unexpected API response format:', response);\r\n        setWarehouses([]);\r\n      }\r\n      \r\n      setError(null);\r\n    } catch (err) {\r\n      if (err instanceof ApiError) {\r\n        setError(err.message);\r\n      } else {\r\n        setError('Failed to fetch warehouses');\r\n        console.error(err);\r\n      }\r\n      // Always set warehouses to an empty array on error\r\n      setWarehouses([]);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const fetchInventory = async () => {\r\n    try {\r\n      setLoading(true);\r\n      const response = await inventoryService.getInventory({\r\n        companyId,\r\n        warehouseId: selectedWarehouse\r\n      });\r\n      setInventory(response.data);\r\n      setError(null);\r\n    } catch (err) {\r\n      setError('Failed to fetch inventory');\r\n      console.error(err);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleWarehouseSelect = (warehouseId: string) => {\r\n    setSelectedWarehouse(warehouseId);\r\n  };\r\n\r\n  const handleOpenDialog = () => {\r\n    setOpenDialog(true);\r\n  };\r\n\r\n  const handleCloseDialog = () => {\r\n    setOpenDialog(false);\r\n    setNewWarehouse({ name: '', address: '', capacity: '' });\r\n  };\r\n  const handleCreateWarehouse = async () => {\r\n    try {\r\n      if (!newWarehouse.name.trim()) {\r\n        setError('Warehouse name is required');\r\n        return;\r\n      }\r\n      if (!newWarehouse.address.trim()) {\r\n        setError('Warehouse address is required');\r\n        return;\r\n      }\r\n      if (!newWarehouse.capacity || isNaN(Number(newWarehouse.capacity)) || Number(newWarehouse.capacity) <= 0) {\r\n        setError('Valid warehouse capacity is required');\r\n        return;\r\n      }\r\n\r\n      await warehouseService.createWarehouse(companyId, {\r\n        name: newWarehouse.name.trim(),\r\n        address: newWarehouse.address.trim(),\r\n        capacity: Number(newWarehouse.capacity),\r\n        // Removed 'status' as it is not part of 'WarehouseCreateInput'\r\n      });\r\n      \r\n      await handleCloseDialog();\r\n      await fetchWarehouses();\r\n      setError(null);\r\n    } catch (err) {\r\n      if (err instanceof ApiError) {\r\n        setError(err.message);\r\n      } else {\r\n        setError('Failed to create warehouse');\r\n        console.error(err);\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleDeleteWarehouse = async (warehouseId: string) => {\r\n    try {\r\n      await warehouseService.deleteWarehouse(companyId, warehouseId);\r\n      await fetchWarehouses();\r\n      if (selectedWarehouse === warehouseId) {\r\n        setSelectedWarehouse('');\r\n      }\r\n      setError(null);\r\n    } catch (err) {\r\n      if (err instanceof ApiError) {\r\n        setError(err.message);\r\n      } else {\r\n        setError('Failed to delete warehouse');\r\n        console.error(err);\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Box sx={{ p: 3 }}>\r\n      <Typography variant=\"h4\" gutterBottom>\r\n        Warehouse Management\r\n      </Typography>\r\n\r\n      {error && (\r\n        <Paper sx={{ p: 2, mb: 2, backgroundColor: 'error.light' }}>\r\n          <Typography color=\"error\">{error}</Typography>\r\n        </Paper>\r\n      )}\r\n\r\n      <Box sx={{ display: 'flex', gap: 3 }}>\r\n        {/* Warehouses List */}\r\n        <Box sx={{ flex: 1 }}>\r\n          <Paper sx={{ p: 2 }}>\r\n            <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 2 }}>\r\n              <Typography variant=\"h6\">Warehouses</Typography>\r\n              <Button\r\n                startIcon={<AddCircleOutlineIcon />}\r\n                onClick={handleOpenDialog}\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n              >\r\n                Add Warehouse\r\n              </Button>\r\n            </Box>\r\n            <Box sx={{ display: 'flex', flexDirection: 'column', gap: 1 }}>              {Array.isArray(warehouses) ? warehouses.map((warehouse) => (\r\n                <Paper\r\n                  key={warehouse.id}\r\n                  elevation={selectedWarehouse === warehouse.id ? 3 : 1}\r\n                  sx={{\r\n                    p: 2,\r\n                    cursor: 'pointer',\r\n                    backgroundColor: selectedWarehouse === warehouse.id ? 'primary.light' : 'background.paper',\r\n                  }}\r\n                  onClick={() => handleWarehouseSelect(warehouse.id)}\r\n                >\r\n                  <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>\r\n                    <Typography>{warehouse.name}</Typography>\r\n                    <Box>\r\n                      <IconButton size=\"small\" onClick={(e) => {\r\n                        e.stopPropagation();\r\n                        // Add edit logic\r\n                      }}>\r\n                        <EditIcon fontSize=\"small\" />\r\n                      </IconButton>\r\n                      <IconButton\r\n                        size=\"small\"\r\n                        onClick={(e) => {\r\n                          e.stopPropagation();\r\n                          handleDeleteWarehouse(warehouse.id);\r\n                        }}\r\n                      >\r\n                        <DeleteIcon fontSize=\"small\" />                      </IconButton>\r\n                    </Box>\r\n                  </Box>\r\n                </Paper>\r\n              )) : (\r\n                <Paper elevation={1} sx={{ p: 2 }}>\r\n                  <Typography color=\"text.secondary\">No warehouses available</Typography>\r\n                </Paper>\r\n              )}\r\n            </Box>\r\n          </Paper>\r\n        </Box>\r\n\r\n        {/* Inventory List */}\r\n        <Box sx={{ flex: 2 }}>\r\n          <Paper sx={{ p: 2 }}>\r\n            <Typography variant=\"h6\" gutterBottom>\r\n              Inventory\r\n            </Typography>\r\n            {selectedWarehouse ? (\r\n              <TableContainer>\r\n                <Table>\r\n                  <TableHead>\r\n                    <TableRow>\r\n                      <TableCell>Product</TableCell>\r\n                      <TableCell align=\"right\">Quantity</TableCell>\r\n                      <TableCell>Location</TableCell>\r\n                      <TableCell>Status</TableCell>\r\n                      <TableCell align=\"right\">Actions</TableCell>\r\n                    </TableRow>\r\n                  </TableHead>\r\n                  <TableBody>\r\n                    {inventory.map((item) => (\r\n                      <TableRow key={item.id}>\r\n                        <TableCell>{item.product?.name}</TableCell>\r\n                        <TableCell align=\"right\">{item.quantity}</TableCell>\r\n                        <TableCell>{item.location || 'N/A'}</TableCell>\r\n                        <TableCell>\r\n                          {item.quantity <= (item.min_threshold || 0) ? 'Low Stock' : 'In Stock'}\r\n                        </TableCell>\r\n                        <TableCell align=\"right\">\r\n                          <Tooltip title=\"Edit\">\r\n                            <IconButton size=\"small\">\r\n                              <EditIcon fontSize=\"small\" />\r\n                            </IconButton>\r\n                          </Tooltip>\r\n                        </TableCell>\r\n                      </TableRow>\r\n                    ))}\r\n                  </TableBody>\r\n                </Table>\r\n              </TableContainer>\r\n            ) : (\r\n              <Typography variant=\"body1\" sx={{ textAlign: 'center', py: 3 }}>\r\n                Select a warehouse to view its inventory\r\n              </Typography>\r\n            )}\r\n          </Paper>\r\n        </Box>\r\n      </Box>\r\n\r\n      {/* Add Warehouse Dialog */}\r\n      <Dialog open={openDialog} onClose={handleCloseDialog}>\r\n        <DialogTitle>Add New Warehouse</DialogTitle>\r\n        <DialogContent>\r\n          <Box sx={{ pt: 2, display: 'flex', flexDirection: 'column', gap: 2 }}>\r\n            <TextField\r\n              label=\"Warehouse Name\"\r\n              fullWidth\r\n              value={newWarehouse.name}\r\n              onChange={(e) => setNewWarehouse({ ...newWarehouse, name: e.target.value })}\r\n            />\r\n            <TextField\r\n              label=\"Address\"\r\n              fullWidth\r\n              multiline\r\n              rows={2}\r\n              value={newWarehouse.address}\r\n              onChange={(e) => setNewWarehouse({ ...newWarehouse, address: e.target.value })}\r\n            />\r\n            <TextField\r\n              label=\"Capacity\"\r\n              fullWidth\r\n              type=\"number\"\r\n              value={newWarehouse.capacity}\r\n              onChange={(e) => setNewWarehouse({ ...newWarehouse, capacity: e.target.value })}\r\n            />\r\n          </Box>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={handleCloseDialog}>Cancel</Button>\r\n          <Button onClick={handleCreateWarehouse} variant=\"contained\" color=\"primary\">\r\n            Create\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default WarehouseManagement;","usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"d:\\All python project\\Tubex\\Frontend\\app\\src\\pages\\WarehouseManagementOptimized.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'IconButton' is defined but never used. Allowed unused vars must match /^_/u.","line":22,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":22,"endColumn":13},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'isLoading' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":207,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":207,"endColumn":18}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\r\nimport {\r\n  Box,\r\n  Paper,\r\n  Typography,\r\n  Button,\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableContainer,\r\n  TableHead,\r\n  TableRow,\r\n  TextField,\r\n  Dialog,\r\n  DialogTitle,\r\n  DialogContent,\r\n  DialogActions,\r\n  TablePagination,\r\n  CircularProgress,\r\n  Alert,\r\n  InputAdornment,\r\n  IconButton\r\n} from '@mui/material';\r\nimport AddCircleOutlineIcon from '@mui/icons-material/AddCircleOutline';\r\nimport SearchIcon from '@mui/icons-material/Search';\r\nimport RefreshIcon from '@mui/icons-material/Refresh';\r\nimport { WarehouseCreateInput } from '../services/api/warehouseService';\r\nimport { useAuth } from '../contexts/AuthContext';\r\nimport useForm from '../hooks/useForm';\r\nimport InventoryItemRow from '../components/inventory/InventoryItemRow';\r\nimport useWarehouseOperations from '../hooks/useWarehouseOperations';\r\nimport useInventoryOperations from '../hooks/useInventoryOperations';\r\n\r\n// Interface for warehouse dialog form\r\ninterface WarehouseFormValues {\r\n  name: string;\r\n  address: string;\r\n  capacity: string;\r\n  type: 'main' | 'secondary' | 'distribution' | 'storage';\r\n  notes: string;\r\n}\r\n\r\n// Form validation function for warehouse\r\nconst validateWarehouseForm = (values: WarehouseFormValues) => {\r\n  const errors: Partial<Record<keyof WarehouseFormValues, string>> = {};\r\n  \r\n  if (!values.name.trim()) {\r\n    errors.name = 'Warehouse name is required';\r\n  }\r\n  \r\n  if (!values.address.trim()) {\r\n    errors.address = 'Warehouse address is required';\r\n  }\r\n  \r\n  if (!values.capacity || isNaN(Number(values.capacity)) || Number(values.capacity) <= 0) {\r\n    errors.capacity = 'Valid warehouse capacity is required';\r\n  }\r\n  \r\n  return errors;\r\n};\r\n\r\nconst WarehouseManagementOptimized: React.FC = () => {\r\n  // Get company ID from auth context\r\n  const { user } = useAuth();\r\n  const companyId = user?.companyId || '';\r\n  \r\n  // Dialog state\r\n  const [openDialog, setOpenDialog] = useState(false);\r\n  const [isEditMode, setIsEditMode] = useState(false);\r\n  \r\n  // Initialize warehouse operations hook\r\n  const {\r\n    selectedWarehouse,\r\n    setSelectedWarehouse,\r\n    warehouses,\r\n    error: warehouseError,\r\n    isLoading: warehouseLoading,\r\n    fetchWarehouses,\r\n    createWarehouse,\r\n    updateWarehouse,\r\n    deleteWarehouse\r\n  } = useWarehouseOperations({\r\n    companyId,\r\n    onWarehouseDeleted: (warehouseId) => {\r\n      if (selectedWarehouse === warehouseId) {\r\n        setSelectedWarehouse('');\r\n      }\r\n    }\r\n  });\r\n  \r\n  // Initialize inventory operations hook\r\n  const {\r\n    inventory,\r\n    isLoading: inventoryLoading,\r\n    error: inventoryError,\r\n    page,\r\n    rowsPerPage,\r\n    totalCount,\r\n    sortBy,\r\n    sortDirection,\r\n    searchQuery,\r\n    handlePageChange,\r\n    handleRowsPerPageChange,\r\n    handleSortByChange,\r\n    handleSortDirectionChange,\r\n    handleSearchQueryChange,\r\n    refreshInventory\r\n  } = useInventoryOperations({\r\n    companyId,\r\n    warehouseId: selectedWarehouse\r\n  });\r\n  \r\n  // Initialize form for warehouse creation/editing\r\n  const warehouseForm = useForm<WarehouseFormValues>({\r\n    initialValues: {\r\n      name: '',\r\n      address: '',\r\n      capacity: '',\r\n      type: 'storage',\r\n      notes: ''\r\n    },\r\n    validate: validateWarehouseForm\r\n  });\r\n  \r\n  // Fetch warehouses when companyId changes\r\n  useEffect(() => {\r\n    if (companyId) {\r\n      fetchWarehouses();\r\n    }\r\n  }, [companyId, fetchWarehouses]);\r\n  \r\n  // Fetch inventory when selectedWarehouse changes\r\n  useEffect(() => {\r\n    if (selectedWarehouse) {\r\n      refreshInventory();\r\n    }\r\n  }, [selectedWarehouse, refreshInventory]);\r\n  \r\n  // Handle opening dialog for creating/editing a warehouse\r\n  const handleOpenDialog = (warehouseId?: string) => {\r\n    if (warehouseId) {\r\n      // Edit mode - find the warehouse and set form values\r\n      const warehouseToEdit = warehouses.find(w => w.id === warehouseId);\r\n      if (warehouseToEdit) {\r\n        setIsEditMode(true);\r\n        warehouseForm.setValues({\r\n          name: warehouseToEdit.name,\r\n          address: warehouseToEdit.address,\r\n          capacity: warehouseToEdit.capacity.toString(),\r\n          type: warehouseToEdit.type || 'storage',\r\n          notes: warehouseToEdit.notes || ''\r\n        });\r\n      }\r\n    } else {\r\n      // Create mode\r\n      setIsEditMode(false);\r\n      warehouseForm.resetForm();\r\n    }\r\n    setOpenDialog(true);\r\n  };\r\n  \r\n  // Handle closing the dialog\r\n  const handleCloseDialog = () => {\r\n    setOpenDialog(false);\r\n  };\r\n  \r\n  // Handle creating or updating a warehouse\r\n  const handleCreateOrUpdateWarehouse = async () => {\r\n    if (!warehouseForm.validateForm()) return;\r\n    \r\n    const warehouseData: WarehouseCreateInput = {\r\n      name: warehouseForm.values.name.trim(),\r\n      address: warehouseForm.values.address.trim(),\r\n      capacity: Number(warehouseForm.values.capacity),\r\n      type: warehouseForm.values.type,\r\n      notes: warehouseForm.values.notes.trim() || undefined\r\n    };\r\n    \r\n    try {\r\n      if (isEditMode && selectedWarehouse) {\r\n        await updateWarehouse(selectedWarehouse, warehouseData);\r\n      } else {\r\n        await createWarehouse(warehouseData);\r\n      }\r\n      handleCloseDialog();\r\n    } catch (error) {\r\n      console.error('Error saving warehouse:', error);\r\n    }\r\n  };\r\n  \r\n  // Handle deleting a warehouse\r\n  const handleDeleteWarehouse = (warehouseId: string) => {\r\n    if (window.confirm('Are you sure you want to delete this warehouse?')) {\r\n      deleteWarehouse(warehouseId);\r\n    }\r\n  };\r\n  \r\n  // Handle selecting a warehouse\r\n  const handleWarehouseSelect = (warehouseId: string) => {\r\n    setSelectedWarehouse(warehouseId);\r\n  };\r\n  \r\n  // Display combined error message from various operations\r\n  const errorMessage = warehouseError?.message || inventoryError;\r\n  \r\n  // Determine if any operation is loading\r\n  const isLoading = warehouseLoading || inventoryLoading;\r\n  \r\n  return (\r\n    <Box sx={{ p: 3 }}>\r\n      <Typography variant=\"h4\" gutterBottom>\r\n        Warehouse Management\r\n      </Typography>\r\n\r\n      {errorMessage && (\r\n        <Alert severity=\"error\" sx={{ mb: 2 }}>\r\n          {errorMessage}\r\n        </Alert>\r\n      )}\r\n\r\n      <Box sx={{ display: 'flex', gap: 3 }}>\r\n        {/* Warehouses List */}\r\n        <Box sx={{ flex: 1 }}>\r\n          <Paper sx={{ p: 2 }}>\r\n            <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 2 }}>\r\n              <Typography variant=\"h6\">Warehouses</Typography>\r\n              <Box sx={{ display: 'flex', gap: 1 }}>\r\n                <Button\r\n                  size=\"small\"\r\n                  startIcon={<RefreshIcon />}\r\n                  onClick={fetchWarehouses}\r\n                  disabled={warehouseLoading}\r\n                >\r\n                  Refresh\r\n                </Button>\r\n                <Button\r\n                  startIcon={<AddCircleOutlineIcon />}\r\n                  onClick={() => handleOpenDialog()}\r\n                  variant=\"contained\"\r\n                  color=\"primary\"\r\n                  disabled={warehouseLoading}\r\n                >\r\n                  Add Warehouse\r\n                </Button>\r\n              </Box>\r\n            </Box>\r\n            \r\n            {warehouseLoading ? (\r\n              <Box sx={{ display: 'flex', justifyContent: 'center', py: 3 }}>\r\n                <CircularProgress />\r\n              </Box>\r\n            ) : (\r\n              <Box sx={{ display: 'flex', flexDirection: 'column', gap: 1 }}>\r\n                {warehouses.length > 0 ? (\r\n                  warehouses.map((warehouse) => (\r\n                    <Paper\r\n                      key={warehouse.id}\r\n                      elevation={selectedWarehouse === warehouse.id ? 3 : 1}\r\n                      sx={{\r\n                        p: 2,\r\n                        cursor: 'pointer',\r\n                        backgroundColor: selectedWarehouse === warehouse.id ? 'primary.light' : 'background.paper',\r\n                        '&:hover': {\r\n                          backgroundColor: selectedWarehouse === warehouse.id \r\n                            ? 'primary.light' \r\n                            : 'action.hover'\r\n                        }\r\n                      }}\r\n                      onClick={() => handleWarehouseSelect(warehouse.id)}\r\n                    >\r\n                      <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'flex-start' }}>\r\n                        <Box>\r\n                          <Typography variant=\"subtitle1\">{warehouse.name}</Typography>\r\n                          <Typography variant=\"body2\" color=\"text.secondary\">\r\n                            {warehouse.address}\r\n                          </Typography>\r\n                          <Box sx={{ display: 'flex', gap: 2, mt: 0.5 }}>\r\n                            <Typography variant=\"body2\" color=\"text.secondary\">\r\n                              Capacity: {warehouse.capacity}\r\n                            </Typography>\r\n                            <Typography variant=\"body2\" color=\"text.secondary\">\r\n                              Type: {warehouse.type}\r\n                            </Typography>\r\n                            <Typography variant=\"body2\" color=\"text.secondary\">\r\n                              Status: {warehouse.status}\r\n                            </Typography>\r\n                          </Box>\r\n                        </Box>\r\n                        <Box>\r\n                          <Button\r\n                            size=\"small\"\r\n                            onClick={(e) => {\r\n                              e.stopPropagation();\r\n                              handleOpenDialog(warehouse.id);\r\n                            }}\r\n                          >\r\n                            Edit\r\n                          </Button>\r\n                          <Button\r\n                            size=\"small\"\r\n                            color=\"error\"\r\n                            onClick={(e) => {\r\n                              e.stopPropagation();\r\n                              handleDeleteWarehouse(warehouse.id);\r\n                            }}\r\n                          >\r\n                            Delete\r\n                          </Button>\r\n                        </Box>\r\n                      </Box>\r\n                    </Paper>\r\n                  ))\r\n                ) : (\r\n                  <Paper elevation={1} sx={{ p: 2 }}>\r\n                    <Typography color=\"text.secondary\">No warehouses available</Typography>\r\n                  </Paper>\r\n                )}\r\n              </Box>\r\n            )}\r\n          </Paper>\r\n        </Box>\r\n\r\n        {/* Inventory List */}\r\n        <Box sx={{ flex: 2 }}>\r\n          <Paper sx={{ p: 2 }}>\r\n            <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 2 }}>\r\n              <Typography variant=\"h6\">Inventory</Typography>\r\n              \r\n              {/* Search field for inventory */}\r\n              {selectedWarehouse && (\r\n                <Box sx={{ display: 'flex', gap: 1 }}>\r\n                  <TextField\r\n                    placeholder=\"Search inventory\"\r\n                    size=\"small\"\r\n                    value={searchQuery}\r\n                    onChange={(e) => handleSearchQueryChange(e.target.value)}\r\n                    InputProps={{\r\n                      startAdornment: (\r\n                        <InputAdornment position=\"start\">\r\n                          <SearchIcon fontSize=\"small\" />\r\n                        </InputAdornment>\r\n                      )\r\n                    }}\r\n                  />\r\n                  <Button\r\n                    size=\"small\"\r\n                    startIcon={<RefreshIcon />}\r\n                    onClick={refreshInventory}\r\n                    disabled={inventoryLoading}\r\n                  >\r\n                    Refresh\r\n                  </Button>\r\n                </Box>\r\n              )}\r\n            </Box>\r\n            \r\n            {selectedWarehouse ? (\r\n              <>\r\n                <TableContainer>\r\n                  <Table>\r\n                    <TableHead>\r\n                      <TableRow>\r\n                        <TableCell \r\n                          onClick={() => {\r\n                            if (sortBy === 'product.name') {\r\n                              handleSortDirectionChange();\r\n                            } else {\r\n                              handleSortByChange('product.name');\r\n                            }\r\n                          }}\r\n                          sx={{ cursor: 'pointer' }}\r\n                        >\r\n                          Product \r\n                          {sortBy === 'product.name' && (\r\n                            sortDirection === 'asc' ? ' ↑' : ' ↓'\r\n                          )}\r\n                        </TableCell>\r\n                        <TableCell \r\n                          align=\"right\"\r\n                          onClick={() => {\r\n                            if (sortBy === 'quantity') {\r\n                              handleSortDirectionChange();\r\n                            } else {\r\n                              handleSortByChange('quantity');\r\n                            }\r\n                          }}\r\n                          sx={{ cursor: 'pointer' }}\r\n                        >\r\n                          Quantity\r\n                          {sortBy === 'quantity' && (\r\n                            sortDirection === 'asc' ? ' ↑' : ' ↓'\r\n                          )}\r\n                        </TableCell>\r\n                        <TableCell>Location</TableCell>\r\n                        <TableCell>Status</TableCell>\r\n                        <TableCell align=\"right\">Actions</TableCell>\r\n                      </TableRow>\r\n                    </TableHead>\r\n                    <TableBody>\r\n                      {inventoryLoading && inventory.length === 0 ? (\r\n                        <TableRow>\r\n                          <TableCell colSpan={5} align=\"center\">\r\n                            <CircularProgress size={24} sx={{ my: 3 }} />\r\n                          </TableCell>\r\n                        </TableRow>\r\n                      ) : inventory.length > 0 ? (\r\n                        inventory.map((item) => (\r\n                          <InventoryItemRow \r\n                            key={item.id}\r\n                            item={item}\r\n                            onEdit={(item) => console.log('Edit item:', item)}\r\n                            onDelete={(itemId) => console.log('Delete item:', itemId)}\r\n                          />\r\n                        ))\r\n                      ) : (\r\n                        <TableRow>\r\n                          <TableCell colSpan={5} align=\"center\">\r\n                            <Typography sx={{ py: 2 }}>No inventory items found</Typography>\r\n                          </TableCell>\r\n                        </TableRow>\r\n                      )}\r\n                    </TableBody>\r\n                  </Table>\r\n                </TableContainer>\r\n                \r\n                <TablePagination\r\n                  component=\"div\"\r\n                  count={totalCount}\r\n                  page={page}\r\n                  onPageChange={(_, page) => handlePageChange(page)}\r\n                  rowsPerPage={rowsPerPage}\r\n                  onRowsPerPageChange={(e) => \r\n                    handleRowsPerPageChange(parseInt(e.target.value))\r\n                  }\r\n                  rowsPerPageOptions={[5, 10, 25, 50]}\r\n                />\r\n              </>\r\n            ) : (\r\n              <Box sx={{ py: 5, textAlign: 'center' }}>\r\n                <Typography variant=\"body1\" color=\"text.secondary\">\r\n                  Select a warehouse to view its inventory\r\n                </Typography>\r\n              </Box>\r\n            )}\r\n          </Paper>\r\n        </Box>\r\n      </Box>\r\n\r\n      {/* Add/Edit Warehouse Dialog */}\r\n      <Dialog open={openDialog} onClose={handleCloseDialog} maxWidth=\"sm\" fullWidth>\r\n        <DialogTitle>\r\n          {isEditMode ? 'Edit Warehouse' : 'Add New Warehouse'}\r\n        </DialogTitle>\r\n        <DialogContent>\r\n          <Box sx={{ pt: 2, display: 'flex', flexDirection: 'column', gap: 2 }}>\r\n            <TextField\r\n              label=\"Warehouse Name\"\r\n              fullWidth\r\n              {...warehouseForm.getFieldProps('name')}\r\n              error={!!warehouseForm.touched.name && !!warehouseForm.errors.name}\r\n              helperText={warehouseForm.touched.name ? warehouseForm.errors.name : ''}\r\n            />\r\n            <TextField\r\n              label=\"Address\"\r\n              fullWidth\r\n              multiline\r\n              rows={2}\r\n              {...warehouseForm.getFieldProps('address')}\r\n              error={!!warehouseForm.touched.address && !!warehouseForm.errors.address}\r\n              helperText={warehouseForm.touched.address ? warehouseForm.errors.address : ''}\r\n            />\r\n            <TextField\r\n              label=\"Capacity\"\r\n              fullWidth\r\n              type=\"number\"\r\n              {...warehouseForm.getFieldProps('capacity')}\r\n              error={!!warehouseForm.touched.capacity && !!warehouseForm.errors.capacity}\r\n              helperText={warehouseForm.touched.capacity ? warehouseForm.errors.capacity : ''}\r\n            />\r\n            <TextField\r\n              label=\"Notes (Optional)\"\r\n              fullWidth\r\n              multiline\r\n              rows={2}\r\n              {...warehouseForm.getFieldProps('notes')}\r\n            />\r\n          </Box>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={handleCloseDialog}>Cancel</Button>\r\n          <Button \r\n            onClick={handleCreateOrUpdateWarehouse} \r\n            variant=\"contained\" \r\n            color=\"primary\"\r\n            disabled={warehouseLoading}\r\n          >\r\n            {warehouseLoading ? (\r\n              <CircularProgress size={24} />\r\n            ) : isEditMode ? (\r\n              'Update'\r\n            ) : (\r\n              'Create'\r\n            )}\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default WarehouseManagementOptimized;\r\n","usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"d:\\All python project\\Tubex\\Frontend\\app\\src\\pages\\WarehouseManagementRefactored.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'ApiError' is defined but never used. Allowed unused vars must match /^_/u.","line":30,"column":21,"nodeType":"Identifier","messageId":"unusedVar","endLine":30,"endColumn":29},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'inventoryTable'. Either include it or remove the dependency array.","line":142,"column":6,"nodeType":"ArrayExpression","endLine":142,"endColumn":25,"suggestions":[{"desc":"Update the dependencies array to be: [inventoryTable, selectedWarehouse]","fix":{"range":[4076,4095],"text":"[inventoryTable, selectedWarehouse]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\r\nimport {\r\n  Box,\r\n  Paper,\r\n  Typography,\r\n  Button,\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableContainer,\r\n  TableHead,\r\n  TableRow,\r\n  IconButton,\r\n  Tooltip,\r\n  Dialog,\r\n  DialogTitle,\r\n  DialogContent,\r\n  DialogActions,\r\n  TextField,\r\n  TablePagination,\r\n  CircularProgress,\r\n  Alert,\r\n} from '@mui/material';\r\nimport EditIcon from '@mui/icons-material/Edit';\r\nimport DeleteIcon from '@mui/icons-material/Delete';\r\nimport AddCircleOutlineIcon from '@mui/icons-material/AddCircleOutline';\r\nimport SearchIcon from '@mui/icons-material/Search';\r\nimport { inventoryService, warehouseService } from '../services/api';\r\nimport { InventoryItem } from '../services/api/inventoryService';\r\nimport { Warehouse, ApiError, WarehouseCreateInput } from '../services/api/warehouseService';\r\nimport { useAuth } from '../contexts/AuthContext';\r\nimport useApiRequest from '../hooks/useApiRequest';\r\nimport useTableData from '../hooks/useTableData';\r\nimport useForm from '../hooks/useForm';\r\n\r\n// Interface for warehouse dialog form\r\ninterface WarehouseFormValues {\r\n  name: string;\r\n  address: string;\r\n  capacity: string;\r\n  type: 'main' | 'secondary' | 'distribution' | 'storage';\r\n  notes: string;\r\n}\r\n\r\n// Form validation function for warehouse\r\nconst validateWarehouseForm = (values: WarehouseFormValues) => {\r\n  const errors: Partial<Record<keyof WarehouseFormValues, string>> = {};\r\n  \r\n  if (!values.name.trim()) {\r\n    errors.name = 'Warehouse name is required';\r\n  }\r\n  \r\n  if (!values.address.trim()) {\r\n    errors.address = 'Warehouse address is required';\r\n  }\r\n  \r\n  if (!values.capacity || isNaN(Number(values.capacity)) || Number(values.capacity) <= 0) {\r\n    errors.capacity = 'Valid warehouse capacity is required';\r\n  }\r\n  \r\n  return errors;\r\n};\r\n\r\nconst WarehouseManagementRefactored: React.FC = () => {\r\n  // Get company ID from auth context\r\n  const { user } = useAuth();\r\n  const companyId = user?.companyId || '';\r\n  \r\n  // Selected warehouse state\r\n  const [selectedWarehouse, setSelectedWarehouse] = useState<string>('');\r\n  const [openDialog, setOpenDialog] = useState(false);\r\n  const [isEditMode, setIsEditMode] = useState(false);\r\n  \r\n  // Initialize form for warehouse creation/editing\r\n  const warehouseForm = useForm<WarehouseFormValues>({\r\n    initialValues: {\r\n      name: '',\r\n      address: '',\r\n      capacity: '',\r\n      type: 'storage',\r\n      notes: ''\r\n    },\r\n    validate: validateWarehouseForm\r\n  });\r\n  \r\n  // Use our custom hooks for API calls\r\n  const warehousesRequest = useApiRequest<{ data: Warehouse[] }>(\r\n    async () => {\r\n      if (!companyId) {\r\n        return { data: [] };\r\n      }\r\n      return await warehouseService.getWarehouses(companyId);\r\n    },\r\n    [],\r\n    {\r\n      dependencies: [companyId],\r\n      manual: !companyId,\r\n      onError: error => console.error('Error fetching warehouses:', error)\r\n    }\r\n  );\r\n  \r\n  // Function to fetch inventory data with parameters\r\n  const fetchInventoryData = async (params: any) => {\r\n    if (!selectedWarehouse || !companyId) {\r\n      return { data: [], totalCount: 0 };\r\n    }\r\n    \r\n    const apiParams = {\r\n      companyId,\r\n      warehouseId: selectedWarehouse,\r\n      page: params.page,\r\n      limit: params.limit,\r\n      sortBy: params.sortBy,\r\n      sortDirection: params.sortDirection,\r\n      search: params.search\r\n    };\r\n    \r\n    try {\r\n      const response = await inventoryService.getInventory(apiParams);\r\n      return {\r\n        data: response.data || [],\r\n        totalCount: response.pagination?.total || 0\r\n      };\r\n    } catch (error) {\r\n      console.error('Error fetching inventory:', error);\r\n      throw error;\r\n    }\r\n  };\r\n  \r\n  // Use table hook for inventory data\r\n  const inventoryTable = useTableData<InventoryItem>({\r\n    defaultSortBy: 'product.name',\r\n    defaultSortDirection: 'asc',\r\n    fetchDataFn: fetchInventoryData\r\n  });\r\n  \r\n  // Fetch inventory data when selected warehouse changes\r\n  useEffect(() => {\r\n    if (selectedWarehouse) {\r\n      inventoryTable.fetchData();\r\n    }\r\n  }, [selectedWarehouse]);\r\n    // Create warehouse API request\r\n  const createWarehouseRequest = useApiRequest<any, [string, WarehouseCreateInput]>(\r\n    async (companyId, data) => {\r\n      return await warehouseService.createWarehouse(companyId, data);\r\n    },\r\n    [companyId, { name: '', address: '', capacity: 0, type: 'storage' }],\r\n    {\r\n      manual: true,\r\n      onSuccess: () => {\r\n        handleCloseDialog();\r\n        warehousesRequest.request();\r\n      }\r\n    }\r\n  );\r\n    // Delete warehouse API request\r\n  const deleteWarehouseRequest = useApiRequest<any, [string, string]>(\r\n    async (companyId, warehouseId) => {\r\n      return await warehouseService.deleteWarehouse(companyId, warehouseId);\r\n    },\r\n    [companyId, ''],\r\n    {\r\n      manual: true,\r\n      onSuccess: () => {\r\n        if (selectedWarehouse === deleteWarehouseRequest.request.arguments?.[1]) {\r\n          setSelectedWarehouse('');\r\n        }\r\n        warehousesRequest.request();\r\n      }\r\n    }\r\n  );\r\n  \r\n  const handleOpenDialog = (warehouse?: Warehouse) => {\r\n    if (warehouse) {\r\n      // Edit mode\r\n      setIsEditMode(true);\r\n      warehouseForm.setValues({\r\n        name: warehouse.name,\r\n        address: warehouse.address,\r\n        capacity: warehouse.capacity.toString(),\r\n        type: warehouse.type || 'storage',\r\n        notes: warehouse.notes || ''\r\n      });\r\n    } else {\r\n      // Create mode\r\n      setIsEditMode(false);\r\n      warehouseForm.resetForm();\r\n    }\r\n    setOpenDialog(true);\r\n  };\r\n  \r\n  const handleCloseDialog = () => {\r\n    setOpenDialog(false);\r\n  };\r\n  \r\n  const handleCreateOrUpdateWarehouse = async () => {\r\n    if (!warehouseForm.validateForm()) return;\r\n    \r\n    const warehouseData: WarehouseCreateInput = {\r\n      name: warehouseForm.values.name.trim(),\r\n      address: warehouseForm.values.address.trim(),\r\n      capacity: Number(warehouseForm.values.capacity),\r\n      type: warehouseForm.values.type,\r\n      notes: warehouseForm.values.notes.trim() || undefined\r\n    };\r\n    \r\n    if (isEditMode && selectedWarehouse) {\r\n      // Update existing warehouse - not implemented in this example\r\n      // Would require an updateWarehouse API call\r\n      console.log('Update warehouse logic would go here');\r\n    } else {\r\n      // Create new warehouse\r\n      await createWarehouseRequest.request(companyId, warehouseData);\r\n    }\r\n  };\r\n  \r\n  const handleDeleteWarehouse = (warehouseId: string) => {\r\n    if (window.confirm('Are you sure you want to delete this warehouse?')) {\r\n      deleteWarehouseRequest.request(companyId, warehouseId);\r\n    }\r\n  };\r\n  \r\n  const handleWarehouseSelect = (warehouseId: string) => {\r\n    setSelectedWarehouse(warehouseId);\r\n  };\r\n  \r\n  // Display combined error message from various API requests\r\n  const errorMessage = \r\n    warehousesRequest.error?.message || \r\n    inventoryTable.error || \r\n    createWarehouseRequest.error?.message || \r\n    deleteWarehouseRequest.error?.message;\r\n  \r\n  // Determine if any API request is loading\r\n  const isLoading = \r\n    warehousesRequest.isLoading || \r\n    inventoryTable.loading || \r\n    createWarehouseRequest.isLoading || \r\n    deleteWarehouseRequest.isLoading;\r\n  \r\n  // Get warehouses from request data\r\n  const warehouses = warehousesRequest.data?.data || [];\r\n  \r\n  return (\r\n    <Box sx={{ p: 3 }}>\r\n      <Typography variant=\"h4\" gutterBottom>\r\n        Warehouse Management\r\n      </Typography>\r\n\r\n      {errorMessage && (\r\n        <Alert severity=\"error\" sx={{ mb: 2 }}>\r\n          {errorMessage}\r\n        </Alert>\r\n      )}\r\n\r\n      {isLoading && (\r\n        <Box sx={{ display: 'flex', justifyContent: 'center', my: 2 }}>\r\n          <CircularProgress />\r\n        </Box>\r\n      )}\r\n\r\n      <Box sx={{ display: 'flex', gap: 3 }}>\r\n        {/* Warehouses List */}\r\n        <Box sx={{ flex: 1 }}>\r\n          <Paper sx={{ p: 2 }}>\r\n            <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 2 }}>\r\n              <Typography variant=\"h6\">Warehouses</Typography>\r\n              <Button\r\n                startIcon={<AddCircleOutlineIcon />}\r\n                onClick={() => handleOpenDialog()}\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n              >\r\n                Add Warehouse\r\n              </Button>\r\n            </Box>\r\n            <Box sx={{ display: 'flex', flexDirection: 'column', gap: 1 }}>\r\n              {warehouses.length > 0 ? (\r\n                warehouses.map((warehouse) => (\r\n                  <Paper\r\n                    key={warehouse.id}\r\n                    elevation={selectedWarehouse === warehouse.id ? 3 : 1}\r\n                    sx={{\r\n                      p: 2,\r\n                      cursor: 'pointer',\r\n                      backgroundColor: selectedWarehouse === warehouse.id ? 'primary.light' : 'background.paper',\r\n                    }}\r\n                    onClick={() => handleWarehouseSelect(warehouse.id)}\r\n                  >\r\n                    <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>\r\n                      <Box>\r\n                        <Typography variant=\"subtitle1\">{warehouse.name}</Typography>\r\n                        <Typography variant=\"body2\" color=\"text.secondary\">\r\n                          {warehouse.address}\r\n                        </Typography>\r\n                        <Typography variant=\"body2\" color=\"text.secondary\">\r\n                          Capacity: {warehouse.capacity} | Type: {warehouse.type}\r\n                        </Typography>\r\n                      </Box>\r\n                      <Box>\r\n                        <IconButton \r\n                          size=\"small\" \r\n                          onClick={(e) => {\r\n                            e.stopPropagation();\r\n                            handleOpenDialog(warehouse);\r\n                          }}\r\n                        >\r\n                          <EditIcon fontSize=\"small\" />\r\n                        </IconButton>\r\n                        <IconButton\r\n                          size=\"small\"\r\n                          onClick={(e) => {\r\n                            e.stopPropagation();\r\n                            handleDeleteWarehouse(warehouse.id);\r\n                          }}\r\n                        >\r\n                          <DeleteIcon fontSize=\"small\" />\r\n                        </IconButton>\r\n                      </Box>\r\n                    </Box>\r\n                  </Paper>\r\n                ))\r\n              ) : !warehousesRequest.isLoading && (\r\n                <Paper elevation={1} sx={{ p: 2 }}>\r\n                  <Typography color=\"text.secondary\">No warehouses available</Typography>\r\n                </Paper>\r\n              )}\r\n            </Box>\r\n          </Paper>\r\n        </Box>\r\n\r\n        {/* Inventory List */}\r\n        <Box sx={{ flex: 2 }}>\r\n          <Paper sx={{ p: 2 }}>\r\n            <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 2 }}>\r\n              <Typography variant=\"h6\">Inventory</Typography>\r\n              \r\n              {/* Search field for inventory */}\r\n              {selectedWarehouse && (\r\n                <Box sx={{ display: 'flex', alignItems: 'center' }}>\r\n                  <TextField\r\n                    placeholder=\"Search inventory\"\r\n                    size=\"small\"\r\n                    value={inventoryTable.searchQuery}\r\n                    onChange={(e) => inventoryTable.handleSearchQueryChange(e.target.value)}\r\n                    InputProps={{\r\n                      endAdornment: <SearchIcon color=\"action\" />\r\n                    }}\r\n                    sx={{ mr: 2 }}\r\n                  />\r\n                </Box>\r\n              )}\r\n            </Box>\r\n            \r\n            {selectedWarehouse ? (\r\n              <>\r\n                <TableContainer>\r\n                  <Table>\r\n                    <TableHead>\r\n                      <TableRow>\r\n                        <TableCell \r\n                          onClick={() => {\r\n                            if (inventoryTable.sortBy === 'product.name') {\r\n                              inventoryTable.handleSortDirectionChange();\r\n                            } else {\r\n                              inventoryTable.handleSortByChange('product.name');\r\n                            }\r\n                          }}\r\n                          sx={{ cursor: 'pointer' }}\r\n                        >\r\n                          Product \r\n                          {inventoryTable.sortBy === 'product.name' && (\r\n                            inventoryTable.sortDirection === 'asc' ? ' ↑' : ' ↓'\r\n                          )}\r\n                        </TableCell>\r\n                        <TableCell \r\n                          align=\"right\"\r\n                          onClick={() => {\r\n                            if (inventoryTable.sortBy === 'quantity') {\r\n                              inventoryTable.handleSortDirectionChange();\r\n                            } else {\r\n                              inventoryTable.handleSortByChange('quantity');\r\n                            }\r\n                          }}\r\n                          sx={{ cursor: 'pointer' }}\r\n                        >\r\n                          Quantity\r\n                          {inventoryTable.sortBy === 'quantity' && (\r\n                            inventoryTable.sortDirection === 'asc' ? ' ↑' : ' ↓'\r\n                          )}\r\n                        </TableCell>\r\n                        <TableCell>Location</TableCell>\r\n                        <TableCell>Status</TableCell>\r\n                        <TableCell align=\"right\">Actions</TableCell>\r\n                      </TableRow>\r\n                    </TableHead>\r\n                    <TableBody>\r\n                      {inventoryTable.data.length > 0 ? (\r\n                        inventoryTable.data.map((item) => (\r\n                          <TableRow key={item.id}>\r\n                            <TableCell>{item.product?.name || 'Unknown Product'}</TableCell>\r\n                            <TableCell align=\"right\">{item.quantity}</TableCell>\r\n                            <TableCell>{item.location || 'N/A'}</TableCell>\r\n                            <TableCell>\r\n                              {item.quantity <= (item.min_threshold || 0) ? 'Low Stock' : 'In Stock'}\r\n                            </TableCell>\r\n                            <TableCell align=\"right\">\r\n                              <Tooltip title=\"Edit\">\r\n                                <IconButton size=\"small\">\r\n                                  <EditIcon fontSize=\"small\" />\r\n                                </IconButton>\r\n                              </Tooltip>\r\n                            </TableCell>\r\n                          </TableRow>\r\n                        ))\r\n                      ) : (\r\n                        <TableRow>\r\n                          <TableCell colSpan={5} align=\"center\">\r\n                            {inventoryTable.loading ? (\r\n                              <CircularProgress size={20} sx={{ my: 1 }} />\r\n                            ) : (\r\n                              'No inventory items found'\r\n                            )}\r\n                          </TableCell>\r\n                        </TableRow>\r\n                      )}\r\n                    </TableBody>\r\n                  </Table>\r\n                </TableContainer>\r\n                \r\n                <TablePagination\r\n                  component=\"div\"\r\n                  count={inventoryTable.totalCount}\r\n                  page={inventoryTable.page}\r\n                  onPageChange={(_, page) => inventoryTable.handlePageChange(page)}\r\n                  rowsPerPage={inventoryTable.rowsPerPage}\r\n                  onRowsPerPageChange={(e) => \r\n                    inventoryTable.handleRowsPerPageChange(parseInt(e.target.value))\r\n                  }\r\n                />\r\n              </>\r\n            ) : (\r\n              <Typography variant=\"body1\" sx={{ textAlign: 'center', py: 3 }}>\r\n                Select a warehouse to view its inventory\r\n              </Typography>\r\n            )}\r\n          </Paper>\r\n        </Box>\r\n      </Box>\r\n\r\n      {/* Add/Edit Warehouse Dialog */}\r\n      <Dialog open={openDialog} onClose={handleCloseDialog} maxWidth=\"sm\" fullWidth>\r\n        <DialogTitle>\r\n          {isEditMode ? 'Edit Warehouse' : 'Add New Warehouse'}\r\n        </DialogTitle>\r\n        <DialogContent>\r\n          <Box sx={{ pt: 2, display: 'flex', flexDirection: 'column', gap: 2 }}>\r\n            <TextField\r\n              label=\"Warehouse Name\"\r\n              fullWidth\r\n              {...warehouseForm.getFieldProps('name')}\r\n              error={!!warehouseForm.touched.name && !!warehouseForm.errors.name}\r\n              helperText={warehouseForm.touched.name ? warehouseForm.errors.name : ''}\r\n            />\r\n            <TextField\r\n              label=\"Address\"\r\n              fullWidth\r\n              multiline\r\n              rows={2}\r\n              {...warehouseForm.getFieldProps('address')}\r\n              error={!!warehouseForm.touched.address && !!warehouseForm.errors.address}\r\n              helperText={warehouseForm.touched.address ? warehouseForm.errors.address : ''}\r\n            />\r\n            <TextField\r\n              label=\"Capacity\"\r\n              fullWidth\r\n              type=\"number\"\r\n              {...warehouseForm.getFieldProps('capacity')}\r\n              error={!!warehouseForm.touched.capacity && !!warehouseForm.errors.capacity}\r\n              helperText={warehouseForm.touched.capacity ? warehouseForm.errors.capacity : ''}\r\n            />\r\n            <TextField\r\n              label=\"Notes (Optional)\"\r\n              fullWidth\r\n              multiline\r\n              rows={2}\r\n              {...warehouseForm.getFieldProps('notes')}\r\n            />\r\n          </Box>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={handleCloseDialog}>Cancel</Button>\r\n          <Button \r\n            onClick={handleCreateOrUpdateWarehouse} \r\n            variant=\"contained\" \r\n            color=\"primary\"\r\n            disabled={createWarehouseRequest.isLoading}\r\n          >\r\n            {createWarehouseRequest.isLoading ? (\r\n              <CircularProgress size={24} />\r\n            ) : isEditMode ? (\r\n              'Update'\r\n            ) : (\r\n              'Create'\r\n            )}\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default WarehouseManagementRefactored;\r\n","usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"d:\\All python project\\Tubex\\Frontend\\app\\src\\react-app-env.d.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"d:\\All python project\\Tubex\\Frontend\\app\\src\\services\\api\\apiClient.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'enableMockApi' is defined but never used. Allowed unused vars must match /^_/u.","line":2,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":23}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import axios, { AxiosInstance, AxiosRequestConfig, AxiosResponse } from 'axios';\r\nimport { enableMockApi, isMockApiEnabled, toggleMockApi } from '../mock/mockService';\r\nimport { API_BASE_URL, USE_MOCK_API } from '../../config/api.config';\r\n\r\n// Initialize mock API based on configuration\r\nif (USE_MOCK_API) {\r\n  toggleMockApi(true);\r\n} else {\r\n  toggleMockApi(false);\r\n}\r\n\r\n// Debug the API URL\r\nconsole.log(\"API Base URL:\", API_BASE_URL);\r\n\r\n// Create an Axios instance with default config\r\nconst apiClient: AxiosInstance = axios.create({\r\n  baseURL: API_BASE_URL,\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n  },\r\n  timeout: 10000, // 10 seconds timeout\r\n});\r\n\r\n// Set up mock API - this will intercept API calls if enabled\r\n// Comment this line to disable mock API and allow real API calls\r\n// enableMockApi(apiClient);\r\n\r\n// Export the toggle function to allow enabling/disabling mock API\r\nexport { toggleMockApi, isMockApiEnabled };\r\n\r\n// Request interceptor for API calls\r\napiClient.interceptors.request.use(\r\n  (config) => {\r\n    const token = localStorage.getItem('access_token');\r\n    if (token) {\r\n      config.headers.Authorization = `Bearer ${token}`;\r\n    }\r\n    // Log the full URL to help with debugging\r\n    const fullUrl = `${config.baseURL}${config.url}`;\r\n    console.log(`API Request: ${config.method?.toUpperCase()} ${fullUrl}`, { \r\n      headers: config.headers,\r\n      params: config.params,\r\n      data: config.data\r\n    });\r\n    return config;\r\n  },\r\n  (error) => {\r\n    console.error('API Request Error:', error);\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// Response interceptor for API calls\r\napiClient.interceptors.response.use(\r\n  (response) => {\r\n    console.log(`API Response [${response.status}]:`, response.data);\r\n    return response;\r\n  },\r\n  async (error) => {\r\n    console.error('API Response Error:', error.response || error.message);\r\n    const originalRequest = error.config;\r\n    \r\n    // Skip token refresh for auth endpoints to avoid infinite loops\r\n    if (error.response?.status === 401 && \r\n        !originalRequest._retry && \r\n        !originalRequest.url.includes('/auth/login') &&\r\n        !originalRequest.url.includes('/auth/register')) {\r\n      \r\n      originalRequest._retry = true;\r\n      try {\r\n        const refreshToken = localStorage.getItem('refresh_token');\r\n        if (!refreshToken) {\r\n          throw new Error('No refresh token available');\r\n        }\r\n        \r\n        console.log('Token refresh attempt with originalRequest:', {\r\n          url: originalRequest.url,\r\n          method: originalRequest.method\r\n        });\r\n        \r\n        // Use a fresh axios instance for token refresh to avoid interceptors\r\n        const response = await axios({\r\n          method: 'post',\r\n          url: `${API_BASE_URL}/auth/refresh-token`,\r\n          data: { refreshToken },\r\n          headers: { 'Content-Type': 'application/json' }\r\n        });\r\n        \r\n        const newToken = response.data?.data?.accessToken || \r\n                         response.data?.accessToken;\r\n                        \r\n        if (newToken) {\r\n          console.log('Token refresh successful, got new token');\r\n          localStorage.setItem('access_token', newToken);\r\n          \r\n          // If refreshToken was also returned, update it\r\n          if (response.data?.data?.refreshToken || response.data?.refreshToken) {\r\n            const newRefreshToken = response.data?.data?.refreshToken || response.data?.refreshToken;\r\n            localStorage.setItem('refresh_token', newRefreshToken);\r\n          }\r\n          \r\n          // Update axios instance auth header\r\n          apiClient.defaults.headers.common['Authorization'] = `Bearer ${newToken}`;\r\n          \r\n          // Update original request auth header\r\n          originalRequest.headers.Authorization = `Bearer ${newToken}`;\r\n          \r\n          // Retry the original request with the new token\r\n          return apiClient(originalRequest);\r\n        } else {\r\n          console.error('Token refresh response did not contain a new access token', response.data);\r\n          throw new Error('Invalid token refresh response');\r\n        }\r\n      } catch (refreshError) {\r\n        console.error('Token refresh failed:', refreshError);\r\n          \r\n        // If refresh token is invalid, clear auth data\r\n        localStorage.removeItem('access_token');\r\n        localStorage.removeItem('refresh_token');\r\n        localStorage.removeItem('user_info');\r\n        \r\n        // Signal auth required\r\n        window.dispatchEvent(new CustomEvent('auth:required', { \r\n          detail: { reason: 'token_refresh_failed' } \r\n        }));\r\n        \r\n        return Promise.reject(error);\r\n      }\r\n    }\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n/**\r\n * Gets the current company ID from various possible sources\r\n * @param {boolean} throwOnMissing - Whether to throw an error if company ID is not found\r\n * @returns {string} The company ID or an empty string\r\n */\r\nexport const getCurrentCompanyId = (throwOnMissing = false): string => {\r\n  try {\r\n    // Try to get from user_info first (this is where authService actually stores the data)\r\n    const userInfo = JSON.parse(localStorage.getItem('user_info') || '{}');\r\n    if (userInfo && userInfo.companyId) {\r\n      return userInfo.companyId;\r\n    }\r\n    \r\n    // Try regular user object next\r\n    const user = JSON.parse(localStorage.getItem('user') || '{}');\r\n    if (user && user.companyId) {\r\n      return user.companyId;\r\n    }\r\n    \r\n    // Try alternate localStorage keys that might contain the company ID\r\n    const authData = JSON.parse(localStorage.getItem('auth') || '{}');\r\n    if (authData && authData.user && authData.user.companyId) {\r\n      return authData.user.companyId;\r\n    }\r\n    \r\n    // Try session storage as a fallback\r\n    const sessionUser = JSON.parse(sessionStorage.getItem('user') || '{}');\r\n    if (sessionUser && sessionUser.companyId) {\r\n      return sessionUser.companyId;\r\n    }\r\n    \r\n    console.warn('No company ID found in user data');\r\n    \r\n    if (throwOnMissing) {\r\n      throw new Error('Company ID not available');\r\n    }\r\n    \r\n    return '';\r\n  } catch (error) {\r\n    console.error('Error retrieving company ID:', error);\r\n    if (throwOnMissing) {\r\n      throw new Error('Company ID not available');\r\n    }\r\n    return '';\r\n  }\r\n};\r\n\r\n/**\r\n * Creates a company-specific URL with consistent pattern\r\n * @param resourceType The API resource type (products, orders, etc.)\r\n * @param resourceId Optional specific resource ID\r\n * @param action Optional action to perform on the resource\r\n * @returns Formatted URL string\r\n */\r\nexport const createCompanyResourceUrl = (\r\n  resourceType: string, \r\n  resourceId?: string,\r\n  action?: string\r\n): string => {\r\n  const companyId = getCurrentCompanyId(true);\r\n  \r\n  let url = `/${resourceType}/company/${companyId}`;\r\n  if (resourceId) {\r\n    url += `/${resourceId}`;\r\n  }\r\n  if (action) {\r\n    url += `/${action}`;\r\n  }\r\n  \r\n  return url;\r\n};\r\n\r\n// Example usage:\r\n// createCompanyResourceUrl('products') => '/products/company/companyId'\r\n// createCompanyResourceUrl('orders', '123') => '/orders/company/companyId/123'\r\n// createCompanyResourceUrl('inventory', '456', 'adjust') => '/inventory/company/companyId/456/adjust'\r\n\r\n// Enhance get function to automatically include companyId for company-specific endpoints\r\nexport const getWithCompany = async <T>(url: string, options?: AxiosRequestConfig): Promise<AxiosResponse<T>> => {\r\n  const companyId = getCurrentCompanyId();\r\n  if (!companyId) {\r\n    throw new Error('Company ID not available for this request');\r\n  }\r\n  \r\n  // Modify URL to include companyId if it's not already a company-specific endpoint\r\n  const companyUrl = url.includes('/company/') ? url : `/company/${companyId}${url}`;\r\n  \r\n  return get<T>(companyUrl, options);\r\n};\r\n\r\n// Add request logging\r\nconst logRequest = (method: string, url: string, config?: AxiosRequestConfig) => {\r\n  if (process.env.NODE_ENV !== 'production') {\r\n    console.log(`API ${method.toUpperCase()} Request:`, url, config);\r\n  }\r\n};\r\n\r\n// Generic GET request method\r\nexport const get = <T>(url: string, config?: AxiosRequestConfig): Promise<AxiosResponse<T>> => {\r\n  logRequest('GET', url, config);\r\n  return apiClient.get<T>(url, config);\r\n};\r\n\r\n// Generic POST request method with enhanced error handling\r\nexport const post = <T>(url: string, data?: any, config?: AxiosRequestConfig): Promise<AxiosResponse<T>> => {\r\n  logRequest('POST', url, config);\r\n  return apiClient.post<T>(url, data, config)\r\n    .then(response => {\r\n      console.log(`POST ${url} success:`, response.data);\r\n      return response;\r\n    })\r\n    .catch(error => {\r\n      console.error(`POST ${url} failed:`, error.response ? {\r\n        status: error.response.status,\r\n        data: error.response.data\r\n      } : error.message);\r\n      throw error;\r\n    });\r\n};\r\n\r\n// Generic PUT request method\r\nexport const put = <T>(url: string, data?: any, config?: AxiosRequestConfig): Promise<AxiosResponse<T>> => {\r\n  logRequest('PUT', url, config);\r\n  return apiClient.put<T>(url, data, config);\r\n};\r\n\r\n// Generic PATCH request method\r\nexport const patch = <T>(url: string, data?: any, config?: AxiosRequestConfig): Promise<AxiosResponse<T>> => {\r\n  logRequest('PATCH', url, config);\r\n  return apiClient.patch<T>(url, data, config);\r\n};\r\n\r\n// Generic DELETE request method\r\nexport const del = <T>(url: string, config?: AxiosRequestConfig): Promise<AxiosResponse<T>> => {\r\n  logRequest('DELETE', url, config);\r\n  return apiClient.delete<T>(url, config);\r\n};\r\n\r\n// File download method for handling binary responses\r\nexport const getFile = (url: string, config?: AxiosRequestConfig): Promise<AxiosResponse<Blob>> => {\r\n  logRequest('GET (File)', url, config);\r\n  return apiClient.get(url, {\r\n    ...config,\r\n    responseType: 'blob',\r\n  });\r\n};\r\n\r\n// File upload method for handling form data and files\r\nexport const uploadFile = <T>(url: string, file: File, additionalData?: object, config?: AxiosRequestConfig): Promise<AxiosResponse<T>> => {\r\n  const formData = new FormData();\r\n  formData.append('file', file);\r\n  \r\n  // Add any additional data to the form\r\n  if (additionalData) {\r\n    Object.entries(additionalData).forEach(([key, value]) => {\r\n      if (value !== undefined) {\r\n        formData.append(key, String(value));\r\n      }\r\n    });\r\n  }\r\n\r\n  logRequest('POST (File Upload)', url, { ...config, data: { filename: file.name, size: file.size, type: file.type } });\r\n  \r\n  return apiClient.post<T>(url, formData, {\r\n    ...config,\r\n    headers: {\r\n      ...(config?.headers || {}),\r\n      'Content-Type': 'multipart/form-data',\r\n    }\r\n  });\r\n};\r\n\r\nexport default apiClient;","usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"d:\\All python project\\Tubex\\Frontend\\app\\src\\services\\api\\authService.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'validateTokenWithBackend' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":179,"column":7,"nodeType":"Identifier","messageId":"unusedVar","endLine":179,"endColumn":31},{"ruleId":"no-unreachable","severity":2,"message":"Unreachable code.","line":603,"column":21,"nodeType":"BlockStatement","messageId":"unreachableCode","endLine":606,"endColumn":6}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { post, get } from './apiClient';\r\nimport { AxiosError } from 'axios';\r\nimport { jwtDecode } from 'jwt-decode';\r\n\r\n// Custom error class for API errors\r\nexport class ApiError extends Error {\r\n  status: number;\r\n  data: any;\r\n  \r\n  constructor(message: string, status: number, data?: any) {\r\n    super(message);\r\n    this.name = 'ApiError';\r\n    this.status = status;\r\n    this.data = data;\r\n  }\r\n}\r\n\r\nexport interface AuthResponse {\r\n  status: string;\r\n  data: {\r\n    userId: string;\r\n    companyId: string;\r\n    accessToken: string;\r\n    refreshToken: string;\r\n    message?: string;\r\n    requiresVerification?: boolean;\r\n    email?: string;\r\n    role?: string;\r\n    status?: string;\r\n    firstName?: string;\r\n    lastName?: string;\r\n  };\r\n}\r\n\r\nexport interface UserInfo {\r\n  userId: string;\r\n  companyId: string;\r\n  email: string;\r\n  role: string;\r\n  status: string;\r\n  firstName?: string;\r\n  lastName?: string;\r\n  avatarUrl?: string; // Add this property definition\r\n}\r\n\r\nexport interface LoginRequest {\r\n  email: string;\r\n  password: string;\r\n}\r\n\r\nexport interface RegisterRequest {\r\n  email: string;\r\n  password: string;\r\n  companyName: string;\r\n  role: 'admin' | 'manager' | 'staff' | 'dealer' | 'supplier';\r\n}\r\n\r\nexport interface RegisterCompanyRequest {\r\n  email: string;\r\n  password: string;\r\n  firstName: string;\r\n  lastName: string;\r\n  company: {\r\n    name: string;\r\n    type: 'dealer' | 'supplier';\r\n    taxId: string;\r\n    businessLicense: string;\r\n    address: {\r\n      street: string;\r\n      city: string;\r\n      province: string;\r\n      postalCode: string;\r\n    };\r\n    businessCategory: string;\r\n    employeeCount: number;\r\n    yearEstablished: number;\r\n    contactPhone: string;\r\n  };\r\n}\r\n\r\nexport interface EmployeeRegistrationRequest {\r\n  email: string;\r\n  password: string;\r\n  firstName: string;\r\n  lastName: string;\r\n  jobTitle: string;\r\n  department: string;\r\n  employeeId: string;\r\n  companyId: string;\r\n  invitationCode: string;\r\n}\r\n\r\nexport interface ForgotPasswordRequest {\r\n  email: string;\r\n}\r\n\r\nexport interface ResetPasswordRequest {\r\n  token: string;\r\n  newPassword: string;\r\n}\r\n\r\nexport interface RefreshTokenRequest {\r\n  refreshToken: string;\r\n}\r\n\r\nexport interface OAuthRegistrationRequest {\r\n  tempUserId: string;\r\n  company: {\r\n    name: string;\r\n    type: 'dealer' | 'supplier';\r\n    taxId: string;\r\n    businessLicense: string;\r\n    address: {\r\n      street: string;\r\n      city: string;\r\n      province: string;\r\n      postalCode: string;\r\n    };\r\n    businessCategory: string;\r\n    employeeCount: number;\r\n    yearEstablished: number;\r\n    contactPhone: string;\r\n  };\r\n  userRole?: 'admin' | 'manager' | 'staff';\r\n}\r\n\r\nexport interface EmployeeListResponse {\r\n  employees: Array<{\r\n    id: string;\r\n    email: string;\r\n    firstName: string;\r\n    lastName: string;\r\n    jobTitle: string;\r\n    department: string;\r\n    employeeId: string;\r\n    registrationDate: string;\r\n    status: 'pending' | 'approved' | 'rejected';\r\n  }>;\r\n  total: number;\r\n}\r\n\r\nexport interface InvitationCodeRequest {\r\n  companyId: string;\r\n}\r\n\r\nexport interface InvitationCodeResponse {\r\n  status: string;\r\n  data: {\r\n    code: string;\r\n    expiresIn: string;\r\n  }\r\n}\r\n\r\n/**\r\n * Decode JWT and check expiry\r\n */\r\nconst isTokenValid = (token: string | null): boolean => {\r\n  if (!token) return false;\r\n  try {\r\n    const decoded: any = jwtDecode(token);\r\n    if (!decoded.exp) return false;\r\n    // exp is in seconds, Date.now() in ms\r\n    const isValid = decoded.exp * 1000 > Date.now();\r\n    console.log('Token expiry check:', { \r\n      exp: new Date(decoded.exp * 1000).toISOString(),\r\n      now: new Date().toISOString(),\r\n      isValid\r\n    });\r\n    return isValid;\r\n  } catch (e) {\r\n    console.error('Failed to decode token:', e);\r\n    return false;\r\n  }\r\n};\r\n\r\n/**\r\n * Validate token with backend (optional, for extra security)\r\n */\r\nconst validateTokenWithBackend = async (token: string): Promise<boolean> => {\r\n  try {\r\n    // Try to fetch user profile or /me endpoint\r\n    const response = await get('/auth/me', { \r\n      headers: { Authorization: `Bearer ${token}` }\r\n    });\r\n    console.log('Backend token validation success:', response.data);\r\n    return true;\r\n  } catch (e) {\r\n    console.error('Backend token validation failed:', e);\r\n    return false;\r\n  }\r\n};\r\n\r\n/**\r\n * Authentication service with methods for login, registration, and other auth functions\r\n */\r\nexport const authService = {\r\n  /**\r\n   * Login with email and password\r\n   */\r\n  login: async (credentials: LoginRequest): Promise<AuthResponse> => {\r\n    try {\r\n      // Input validation\r\n      if (!credentials.email || !credentials.email.includes('@')) {\r\n        throw new Error('Valid email is required');\r\n      }\r\n      \r\n      if (!credentials.password || credentials.password.trim() === '') {\r\n        throw new Error('Password is required');\r\n      }\r\n      \r\n      const response = await post<AuthResponse>('/auth/login', credentials);\r\n      \r\n      // Extract data from response\r\n      const responseData = response.data?.data || response.data;\r\n      \r\n      if (responseData?.accessToken) {\r\n        // Store the tokens in secure storage\r\n        localStorage.setItem('access_token', responseData.accessToken);\r\n        localStorage.setItem('refresh_token', responseData.refreshToken);\r\n        \r\n        // Create a normalized user object\r\n        const userInfo: UserInfo = {\r\n          userId: responseData.userId,\r\n          companyId: responseData.companyId,\r\n          email: responseData.email || credentials.email,\r\n          role: responseData.role || 'user',\r\n          status: responseData.status || 'active',\r\n          firstName: responseData.firstName || '',\r\n          lastName: responseData.lastName || ''\r\n        };\r\n        \r\n        // Store user info\r\n        localStorage.setItem('user_info', JSON.stringify(userInfo));\r\n      } else {\r\n        throw new Error('Authentication failed: No access token in response');\r\n      }\r\n      \r\n      return response.data;\r\n    } catch (error) {\r\n      if (error instanceof AxiosError) {\r\n        throw new ApiError(\r\n          error.response?.data?.message || 'Login failed. Please check your credentials.',\r\n          error.response?.status || 500,\r\n          error.response?.data\r\n        );\r\n      }\r\n      throw error;\r\n    }\r\n  },\r\n  \r\n  /**\r\n   * Register a new user and company\r\n   */\r\n  register: async (data: RegisterRequest): Promise<AuthResponse> => {\r\n    try {\r\n      // Input validation\r\n      if (!data.email || !data.email.includes('@')) {\r\n        throw new Error('Valid email is required');\r\n      }\r\n      \r\n      if (!data.password || data.password.length < 8) {\r\n        throw new Error('Password must be at least 8 characters long');\r\n      }\r\n      \r\n      if (!data.companyName || data.companyName.trim() === '') {\r\n        throw new Error('Company name is required');\r\n      }\r\n      \r\n      const response = await post<AuthResponse>('/auth/register', data);\r\n      \r\n      // Store tokens in localStorage if provided\r\n      if (response.data?.data?.accessToken) {\r\n        localStorage.setItem('access_token', response.data.data.accessToken);\r\n        localStorage.setItem('refresh_token', response.data.data.refreshToken);\r\n        \r\n        const userInfo: UserInfo = {\r\n          userId: response.data.data.userId,\r\n          companyId: response.data.data.companyId,\r\n          email: response.data.data.email || data.email,\r\n          role: response.data.data.role || 'admin',\r\n          status: response.data.data.status || 'active',\r\n          firstName: response.data.data.firstName || '',\r\n          lastName: response.data.data.lastName || ''\r\n        };\r\n        \r\n        localStorage.setItem('user_info', JSON.stringify(userInfo));\r\n      }\r\n      \r\n      return response.data;\r\n    } catch (error) {\r\n      if (error instanceof AxiosError) {\r\n        throw new ApiError(\r\n          error.response?.data?.message || 'Registration failed. Please try again.',\r\n          error.response?.status || 500,\r\n          error.response?.data\r\n        );\r\n      }\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  setToken: (token: string): void => {\r\n    localStorage.setItem('authToken', token);\r\n  },\r\n  \r\n  /**\r\n   * Register a new company with detailed information\r\n   */\r\n  registerCompany: async (data: RegisterCompanyRequest): Promise<AuthResponse> => {\r\n    try {\r\n      // Input validation\r\n      if (!data.email || !data.email.includes('@')) {\r\n        throw new Error('Valid email is required');\r\n      }\r\n      \r\n      if (!data.password || data.password.length < 8) {\r\n        throw new Error('Password must be at least 8 characters long');\r\n      }\r\n      \r\n      if (!data.company.name || data.company.name.trim() === '') {\r\n        throw new Error('Company name is required');\r\n      }      \r\n      console.log('Sending registration request with data:', {\r\n        email: data.email,\r\n        // Don't log password\r\n        company: data.company,\r\n        firstName: data.firstName,\r\n        lastName: data.lastName\r\n      });\r\n\r\n      const response = await post<AuthResponse>('/auth/register', {\r\n        email: data.email,\r\n        password: data.password,\r\n        company: data.company,\r\n        firstName: data.firstName,\r\n        lastName: data.lastName,\r\n        userRole: 'admin'\r\n      });\r\n      \r\n      console.log('Registration response received:', response.data);\r\n      \r\n      // Store tokens if provided (might be pending verification)\r\n      if (response.data?.data?.accessToken) {\r\n        localStorage.setItem('access_token', response.data.data.accessToken);\r\n        localStorage.setItem('refresh_token', response.data.data.refreshToken);\r\n        \r\n        const userInfo: UserInfo = {\r\n          userId: response.data.data.userId,\r\n          companyId: response.data.data.companyId,\r\n          email: response.data.data.email || data.email,\r\n          role: response.data.data.role || 'admin',\r\n          status: response.data.data.status || 'active',\r\n          firstName: data.firstName,\r\n          lastName: data.lastName\r\n        };\r\n        \r\n        localStorage.setItem('user_info', JSON.stringify(userInfo));\r\n      }\r\n      \r\n      return response.data;\r\n    } catch (error) {\r\n      if (error instanceof AxiosError) {\r\n        throw new ApiError(\r\n          error.response?.data?.message || 'Company registration failed. Please try again.',\r\n          error.response?.status || 500,\r\n          error.response?.data\r\n        );\r\n      }\r\n      throw error;\r\n    }\r\n  },\r\n  \r\n  /**\r\n   * Register a new employee with company invitation\r\n   */\r\n  registerEmployee: async (data: EmployeeRegistrationRequest): Promise<AuthResponse> => {\r\n    try {\r\n      // Input validation\r\n      if (!data.email || !data.email.includes('@')) {\r\n        throw new Error('Valid email is required');\r\n      }\r\n      \r\n      if (!data.password || data.password.length < 8) {\r\n        throw new Error('Password must be at least 8 characters long');\r\n      }\r\n      \r\n      if (!data.invitationCode) {\r\n        throw new Error('Invitation code is required');\r\n      }\r\n      \r\n      const response = await post<AuthResponse>('/auth/register-employee', data);\r\n      \r\n      // Store tokens if verification is not required\r\n      if (response.data?.data?.accessToken && !response.data.data.requiresVerification) {\r\n        localStorage.setItem('access_token', response.data.data.accessToken);\r\n        localStorage.setItem('refresh_token', response.data.data.refreshToken);\r\n        \r\n        const userInfo: UserInfo = {\r\n          userId: response.data.data.userId,\r\n          companyId: response.data.data.companyId,\r\n          email: response.data.data.email || data.email,\r\n          role: response.data.data.role || 'staff',\r\n          status: response.data.data.status || 'active',\r\n          firstName: response.data.data.firstName || data.firstName,\r\n          lastName: response.data.data.lastName || data.lastName\r\n        };\r\n        \r\n        localStorage.setItem('user_info', JSON.stringify(userInfo));\r\n      }\r\n      \r\n      return response.data;\r\n    } catch (error) {\r\n      if (error instanceof AxiosError) {\r\n        throw new ApiError(\r\n          error.response?.data?.message || 'Employee registration failed. Please try again.',\r\n          error.response?.status || 500,\r\n          error.response?.data\r\n        );\r\n      }\r\n      throw error;\r\n    }\r\n  },\r\n  \r\n  /**\r\n   * Admin verification of an employee\r\n   */\r\n  verifyEmployee: async (employeeId: string): Promise<{success: boolean; message: string}> => {\r\n    try {\r\n      if (!employeeId) {\r\n        throw new Error('Employee ID is required');\r\n      }\r\n      \r\n      const response = await post<{success: boolean; message: string}>('/auth/verify-employee', { employeeId });\r\n      return response.data;\r\n    } catch (error) {\r\n      if (error instanceof AxiosError) {\r\n        throw new ApiError(\r\n          error.response?.data?.message || 'Employee verification failed',\r\n          error.response?.status || 500,\r\n          error.response?.data\r\n        );\r\n      }\r\n      throw error;\r\n    }\r\n  },\r\n  \r\n  /**\r\n   * Admin rejection of an employee registration\r\n   */\r\n  rejectEmployee: async (employeeId: string, reason?: string): Promise<{success: boolean; message: string}> => {\r\n    try {\r\n      if (!employeeId) {\r\n        throw new Error('Employee ID is required');\r\n      }\r\n      \r\n      const response = await post<{success: boolean; message: string}>('/auth/reject-employee', { employeeId, reason });\r\n      return response.data;\r\n    } catch (error) {\r\n      if (error instanceof AxiosError) {\r\n        throw new ApiError(\r\n          error.response?.data?.message || 'Employee rejection failed',\r\n          error.response?.status || 500,\r\n          error.response?.data\r\n        );\r\n      }\r\n      throw error;\r\n    }  },\r\n  \r\n  /**\r\n   * Refresh the access token using refresh token\r\n   */\r\n  refreshToken: async (refreshTokenData: RefreshTokenRequest): Promise<AuthResponse> => {\r\n    try {\r\n      if (!refreshTokenData.refreshToken) {\r\n        throw new Error('Refresh token is required');\r\n      }\r\n      \r\n      const response = await post<AuthResponse>('/auth/refresh-token', refreshTokenData);\r\n      \r\n      if (response.data?.data?.accessToken) {\r\n        localStorage.setItem('access_token', response.data.data.accessToken);\r\n      }\r\n      \r\n      return response.data;\r\n    } catch (error) {\r\n      if (error instanceof AxiosError) {\r\n        throw new ApiError(\r\n          error.response?.data?.message || 'Failed to refresh token',\r\n          error.response?.status || 500,\r\n          error.response?.data\r\n        );\r\n      }\r\n      throw error;\r\n    }\r\n  },\r\n  \r\n  /**\r\n   * Request a password reset email\r\n   */\r\n  forgotPassword: async (data: ForgotPasswordRequest): Promise<{success: boolean; message: string}> => {\r\n    try {\r\n      if (!data.email || !data.email.includes('@')) {\r\n        throw new Error('Valid email is required');\r\n      }\r\n      \r\n      const response = await post<{success: boolean; message: string}>('/auth/forgot-password', data);\r\n      return response.data;\r\n    } catch (error) {\r\n      if (error instanceof AxiosError) {\r\n        throw new ApiError(\r\n          error.response?.data?.message || 'Password reset request failed',\r\n          error.response?.status || 500,\r\n          error.response?.data\r\n        );\r\n      }\r\n      throw error;\r\n    }\r\n  },\r\n  \r\n  /**\r\n   * Reset password with token\r\n   */\r\n  resetPassword: async (data: ResetPasswordRequest): Promise<{success: boolean; message: string}> => {\r\n    try {\r\n      if (!data.token) {\r\n        throw new Error('Reset token is required');\r\n      }\r\n      \r\n      if (!data.newPassword || data.newPassword.length < 8) {\r\n        throw new Error('New password must be at least 8 characters long');\r\n      }\r\n      \r\n      const response = await post<{success: boolean; message: string}>('/auth/reset-password', data);\r\n      return response.data;\r\n    } catch (error) {\r\n      if (error instanceof AxiosError) {\r\n        throw new ApiError(\r\n          error.response?.data?.message || 'Password reset failed',\r\n          error.response?.status || 500,\r\n          error.response?.data\r\n        );\r\n      }\r\n      throw error;\r\n    }\r\n  },\r\n  \r\n  /**\r\n   * Logout user (clear tokens)\r\n   */\r\n  logout: (): void => {\r\n    localStorage.removeItem('access_token');\r\n    localStorage.removeItem('refresh_token');\r\n    localStorage.removeItem('user_info');\r\n  },\r\n  \r\n  /**\r\n   * Check if user is authenticated (valid, non-expired token)\r\n   */\r\n  isAuthenticated: (): boolean => {\r\n    const token = localStorage.getItem('access_token');\r\n    const isValid = isTokenValid(token);\r\n    console.log('Authentication check:', { hasToken: !!token, isValid });\r\n    \r\n    if (!isValid) {\r\n      // Remove invalid token\r\n      localStorage.removeItem('access_token');\r\n      localStorage.removeItem('refresh_token');\r\n      localStorage.removeItem('user_info');\r\n    }\r\n    return isValid;\r\n  },\r\n\r\n  /**\r\n   * Validate token with backend and auto-logout if invalid\r\n   */\r\n  validateToken: async (): Promise<boolean> => {\r\n    const token = localStorage.getItem('access_token');\r\n    if (!token) {\r\n      console.log('No token to validate');\r\n      return false;\r\n    }\r\n    \r\n    // First check locally\r\n    if (!isTokenValid(token)) {\r\n      console.log('Token is expired (local check)');\r\n      authService.logout();\r\n      return false;\r\n    }\r\n    \r\n    // Then optionally validate with backend\r\n    try {\r\n      // You can skip backend validation for better performance\r\n      // or uncomment this to enable strict validation\r\n      /*\r\n      const valid = await validateTokenWithBackend(token);\r\n      if (!valid) {\r\n        console.log('Token rejected by backend');\r\n        authService.logout();\r\n        return false;\r\n      }\r\n      */\r\n      return true;\r\n    } catch (error) {\r\n      console.error('Token validation error:', error);\r\n      return false;\r\n    }\r\n  },\r\n\r\n  /**\r\n   * Get current user info from localStorage\r\n   */\r\n  getCurrentUser: (): UserInfo | null => {\r\n    const userInfo = localStorage.getItem('user_info');\r\n    if (!userInfo) return null;\r\n    \r\n    try {\r\n      return JSON.parse(userInfo) as UserInfo;\r\n    } catch (error) {\r\n      console.error('Error parsing user info:', error);\r\n      return null;\r\n    }\r\n  },\r\n\r\n  /**\r\n   * Initiates Google OAuth login - redirects to Google login page\r\n   */\r\n  loginWithGoogle: (): void => {\r\n    const apiBaseUrl = process.env.REACT_APP_API_BASE_URL || '';\r\n    window.location.href = `${apiBaseUrl}/api/v1/auth/google`;\r\n  },\r\n\r\n  /**\r\n   * Initiates Facebook OAuth login - redirects to Facebook login page\r\n   */\r\n  loginWithFacebook: (): void => {\r\n    const apiBaseUrl = process.env.REACT_APP_API_BASE_URL || '';\r\n    window.location.href = `${apiBaseUrl}/api/v1/auth/facebook`;\r\n  },\r\n\r\n  /**\r\n   * Handle OAuth callback by extracting tokens from URL query params\r\n   */\r\n  handleOAuthCallback: (): { accessToken: string; refreshToken: string; userId: string; email: string; tempUserId?: string; needsRegistration?: boolean } | null => {\r\n    // Get the query string from the current URL\r\n    const queryParams = new URLSearchParams(window.location.search);\r\n    const tokensParam = queryParams.get('tokens');\r\n    const userId = queryParams.get('userId');\r\n    const email = queryParams.get('email');\r\n    \r\n    if (tokensParam && userId && email) {\r\n      try {\r\n        // Parse the tokens JSON string\r\n        const tokens = JSON.parse(decodeURIComponent(tokensParam));\r\n        \r\n        if (tokens.accessToken && tokens.refreshToken) {\r\n          // Store tokens in localStorage\r\n          localStorage.setItem('access_token', tokens.accessToken);\r\n          localStorage.setItem('refresh_token', tokens.refreshToken);\r\n          \r\n          // Return the parsed data\r\n          return {\r\n            accessToken: tokens.accessToken,\r\n            refreshToken: tokens.refreshToken,\r\n            userId,\r\n            email: decodeURIComponent(email)\r\n          };\r\n        }\r\n      } catch (error) {\r\n        console.error('Error parsing OAuth callback data:', error);\r\n      }\r\n    }\r\n    \r\n    // If tempUserId is present, the user needs to complete registration\r\n    const tempUserId = queryParams.get('tempUserId');\r\n    if (tempUserId) {\r\n      return {\r\n        tempUserId,\r\n        needsRegistration: true,\r\n        email: queryParams.get('email') ? decodeURIComponent(queryParams.get('email') || '') : ''\r\n      } as any;\r\n    }\r\n    \r\n    return null;\r\n  },\r\n\r\n  /**\r\n   * Complete registration for OAuth users\r\n   */\r\n  completeOAuthRegistration: async (data: OAuthRegistrationRequest): Promise<AuthResponse> => {\r\n    try {\r\n      if (!data.tempUserId) {\r\n        throw new Error('Temporary user ID is required');\r\n      }\r\n      \r\n      if (!data.company.name || data.company.name.trim() === '') {\r\n        throw new Error('Company name is required');\r\n      }\r\n      \r\n      const response = await post<AuthResponse>('/auth/complete-oauth-registration', data);\r\n      \r\n      // Store tokens in localStorage\r\n      if (response.data?.data?.accessToken) {\r\n        localStorage.setItem('access_token', response.data.data.accessToken);\r\n        localStorage.setItem('refresh_token', response.data.data.refreshToken);\r\n        \r\n        const userInfo: UserInfo = {\r\n          userId: response.data.data.userId,\r\n          companyId: response.data.data.companyId,\r\n          email: response.data.data.email || '',\r\n          role: response.data.data.role || 'admin',\r\n          status: response.data.data.status || 'active',\r\n          firstName: response.data.data.firstName || '',\r\n          lastName: response.data.data.lastName || ''\r\n        };\r\n        \r\n        localStorage.setItem('user_info', JSON.stringify(userInfo));\r\n      }\r\n      \r\n      return response.data;\r\n    } catch (error) {\r\n      if (error instanceof AxiosError) {\r\n        throw new ApiError(\r\n          error.response?.data?.message || 'OAuth registration completion failed',\r\n          error.response?.status || 500,\r\n          error.response?.data\r\n        );\r\n      }\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  /**\r\n   * Generate invitation code for employee registration\r\n   */  generateInvitationCode: async (data: InvitationCodeRequest): Promise<InvitationCodeResponse> => {\r\n    try {\r\n      if (!data.companyId) {\r\n        throw new Error('Company ID is required');\r\n      }\r\n      \r\n      const response = await post<InvitationCodeResponse>('/auth/invitation-code', data);\r\n      return response.data;\r\n    } catch (error) {\r\n      if (error instanceof AxiosError) {\r\n        throw new ApiError(\r\n          error.response?.data?.message || 'Failed to generate invitation code',\r\n          error.response?.status || 500,\r\n          error.response?.data\r\n        );\r\n      }\r\n      throw error;\r\n    }\r\n  },\r\n  \r\n  /**\r\n   * Validate invitation code\r\n   */\r\n  validateInvitationCode: async (code: string): Promise<{valid: boolean; companyName?: string; expiresAt?: string}> => {\r\n    try {\r\n      if (!code) {\r\n        throw new Error('Invitation code is required');\r\n      }\r\n      \r\n      const response = await get<{valid: boolean; companyName?: string; expiresAt?: string}>(`/auth/validate-invitation/${code}`);\r\n      return response.data;\r\n    } catch (error) {\r\n      if (error instanceof AxiosError) {\r\n        // Return invalid status instead of throwing error for this specific case\r\n        return { valid: false };\r\n      }\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  /**\r\n   * Get pending employees (employees who have registered but not verified their email)\r\n   */  getPendingEmployees: async (companyId?: string): Promise<{ employees: Array<any>; count: number }> => {\r\n    try {\r\n      const queryParam = companyId ? `?companyId=${companyId}` : '';\r\n      \r\n      interface PendingEmployeesResponse {\r\n        data: {\r\n          employees: Array<any>;\r\n          count: number;\r\n        };\r\n      }\r\n      \r\n      const response = await get<PendingEmployeesResponse>(`/auth/pending-employees${queryParam}`);\r\n      \r\n      if (response.data && response.data.data) {\r\n        return response.data.data;\r\n      }\r\n      \r\n      return { employees: [], count: 0 };\r\n    } catch (error) {\r\n      if (error instanceof AxiosError) {\r\n        throw new ApiError(\r\n          error.response?.data?.message || 'Failed to fetch pending employees',\r\n          error.response?.status || 500,\r\n          error.response?.data\r\n        );\r\n      }\r\n      throw error;\r\n    }\r\n  }\r\n};","usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"d:\\All python project\\Tubex\\Frontend\\app\\src\\services\\api\\batchService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"d:\\All python project\\Tubex\\Frontend\\app\\src\\services\\api\\companyService.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'getCurrentCompanyId' is defined but never used. Allowed unused vars must match /^_/u.","line":4,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":4,"endColumn":29}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { AxiosError } from 'axios';\r\nimport { get } from './apiClient';\r\nimport { ApiError } from './productService';\r\nimport { getCurrentCompanyId } from './apiClient';\r\n\r\n// Company interfaces\r\nexport interface Company {\r\n  id: string;\r\n  name: string;\r\n  type: 'dealer' | 'supplier';\r\n  tax_id: string;\r\n  business_license: string;\r\n  address: {\r\n    street: string;\r\n    city: string;\r\n    province: string;\r\n    postalCode: string;\r\n  };\r\n  business_category?: string;\r\n  created_at: string;\r\n  updated_at: string;\r\n}\r\n\r\nexport interface CompanyListParams {\r\n  page?: number;\r\n  limit?: number;\r\n  type?: 'dealer' | 'supplier';\r\n  search?: string;\r\n}\r\n\r\nexport interface ApiResponse<T> {\r\n  data: T;\r\n  message?: string;\r\n  status?: number;\r\n}\r\n\r\n// Company service\r\nexport const companyService = {\r\n  async getCompanies(params: CompanyListParams = {}): Promise<ApiResponse<Company[]>> {\r\n    try {\r\n      const queryParams = new URLSearchParams();\r\n      \r\n      if (params.page) queryParams.append('page', params.page.toString());\r\n      if (params.limit) queryParams.append('limit', params.limit.toString());\r\n      if (params.type) queryParams.append('type', params.type);\r\n      if (params.search) queryParams.append('search', params.search);\r\n      \r\n      const response = await get<ApiResponse<Company[]>>(`/companies?${queryParams.toString()}`);\r\n      return response.data;    } catch (error) {\r\n      if (error instanceof AxiosError) {\r\n        throw new ApiError(\r\n          error.response?.data?.message || 'Failed to fetch companies',\r\n          error.response?.status || 500,\r\n          error.response?.data\r\n        );\r\n      }\r\n      throw error;\r\n    }\r\n  },  async getSuppliers(params: { search?: string, page?: number, limit?: number } = {}): Promise<ApiResponse<Company[]>> {\r\n    try {\r\n      // Add the supplier type filter and ensure only supplier type is returned\r\n      const response = await this.getCompanies({\r\n        ...params,\r\n        type: 'supplier' as const\r\n      });\r\n      return {\r\n        ...response,\r\n        data: response.data.filter((company): company is Company & { type: 'supplier' } => company.type === 'supplier')\r\n      };\r\n    } catch (error) {\r\n      if (error instanceof AxiosError) {\r\n        throw new ApiError(\r\n          error.response?.data?.message || 'Failed to fetch suppliers',\r\n          error.response?.status || 500,\r\n          error.response?.data\r\n        );\r\n      }\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  async getCompanyById(id: string): Promise<Company> {\r\n    try {\r\n      const response = await get<{ data: Company }>(`/companies/${id}`);\r\n      return response.data.data;\r\n    } catch (error) {\r\n      if (error instanceof AxiosError) {\r\n        throw new ApiError(\r\n          error.response?.data?.message || 'Failed to fetch company details',\r\n          error.response?.status || 500,\r\n          error.response?.data\r\n        );\r\n      }\r\n      throw error;\r\n    }\r\n  }\r\n};\r\n","usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"d:\\All python project\\Tubex\\Frontend\\app\\src\\services\\api\\companyVerificationService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"d:\\All python project\\Tubex\\Frontend\\app\\src\\services\\api\\customerService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"d:\\All python project\\Tubex\\Frontend\\app\\src\\services\\api\\dashboardService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"d:\\All python project\\Tubex\\Frontend\\app\\src\\services\\api\\index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"d:\\All python project\\Tubex\\Frontend\\app\\src\\services\\api\\inventoryService.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'del' is defined but never used. Allowed unused vars must match /^_/u.","line":1,"column":33,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":36},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'getWithCompany' is defined but never used. Allowed unused vars must match /^_/u.","line":1,"column":38,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":52}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { get, post, put, patch, del, getWithCompany, getCurrentCompanyId } from './apiClient';\r\nimport { AxiosError } from 'axios';\r\n\r\n// Custom error class for API errors\r\nexport class ApiError extends Error {\r\n  status: number;\r\n  data: any;\r\n  \r\n  constructor(message: string, status: number, data?: any) {\r\n    super(message);\r\n    this.name = 'ApiError';\r\n    this.status = status;\r\n    this.data = data;\r\n  }\r\n}\r\n\r\nexport interface PaginationParams {\r\n  page?: number;\r\n  limit?: number;\r\n  sortBy?: string;\r\n  sortDirection?: 'asc' | 'desc';\r\n}\r\n\r\nexport interface InventoryItem {\r\n  id: string;\r\n  product_id: string;\r\n  quantity: number;\r\n  batch_number?: string;\r\n  location?: string;\r\n  company_id: string;\r\n  warehouse_id: string;\r\n  expiry_date?: string;\r\n  created_at: string;\r\n  updated_at: string;\r\n  min_threshold?: number;\r\n  max_threshold?: number;\r\n  reorder_point?: number;\r\n  reorder_quantity?: number;\r\n  auto_reorder?: boolean;\r\n  product?: {\r\n    name: string;\r\n    sku: string;\r\n  };\r\n  warehouse?: {\r\n    name: string;\r\n  };\r\n}\r\n\r\nexport interface InventoryCreateInput {\r\n  product_id: string;\r\n  warehouse_id: string;\r\n  quantity: number;\r\n  unit: string;\r\n  min_threshold?: number;\r\n  max_threshold?: number;\r\n  reorder_point?: number;\r\n  reorder_quantity?: number;\r\n  auto_reorder?: boolean;\r\n}\r\n\r\nexport interface StockAdjustment {\r\n  adjustment: number;\r\n  reason: string;\r\n  batch_number?: string;\r\n  manufacturing_date?: string;\r\n  expiry_date?: string;\r\n}\r\n\r\nexport interface StockTransfer {\r\n  source_warehouse_id: string;\r\n  target_warehouse_id: string;\r\n  product_id: string;\r\n  quantity: number;\r\n  batch_numbers?: string[];\r\n}\r\n\r\nexport interface GetInventoryParams {\r\n  companyId: string;\r\n  page?: number;\r\n  limit?: number;\r\n  warehouseId?: string;\r\n  sortBy?: string;\r\n  sortDirection?: 'asc' | 'desc';\r\n  search?: string;\r\n  searchTerm?: string;\r\n  status?: string;\r\n  [key: string]: any;  // Allow additional properties\r\n}\r\n\r\nexport interface ApiResponse<T> {\r\n  data: T;\r\n  pagination?: {\r\n    total: number;\r\n    page: number;\r\n    limit: number;\r\n  };\r\n}\r\n\r\nexport interface LowStockItem {\r\n  product_id: string;\r\n  product_name: string;\r\n  current_quantity: number;\r\n  threshold: number;\r\n  warehouse_id: string;\r\n  warehouse_name: string;\r\n}\r\n\r\nexport interface ExpiringBatchItem {\r\n  batch_id: string;\r\n  batch_number: string;\r\n  product_id: string;\r\n  product_name: string;\r\n  expiry_date: string;\r\n  remaining_days: number;\r\n  quantity: number;\r\n  warehouse_id: string;\r\n  warehouse_name: string;\r\n}\r\n\r\nexport interface InventoryTransferRequest {\r\n  product_id: string;\r\n  source_warehouse_id: string;\r\n  destination_warehouse_id: string;\r\n  batch_id?: string;\r\n  quantity: number;\r\n  notes?: string;\r\n}\r\n\r\nexport interface InventoryAuditLog {\r\n  id: string;\r\n  inventory_id: string;\r\n  product_id: string;\r\n  warehouse_id: string;\r\n  previous_quantity: number;\r\n  new_quantity: number;\r\n  change_type: 'addition' | 'reduction' | 'transfer_in' | 'transfer_out' | 'adjustment';\r\n  reference_id?: string;\r\n  created_by: string;\r\n  created_at: string;\r\n}\r\n\r\nexport const inventoryService = {\r\n  async getInventory(params: GetInventoryParams): Promise<ApiResponse<InventoryItem[]>> {\r\n    try {\r\n      const companyId = params?.companyId || getCurrentCompanyId();\r\n      if (!companyId) {\r\n        throw new Error('Company ID not available');\r\n      }\r\n      \r\n      // Remove companyId from params if it was included there\r\n      const { companyId: _, ...restParams } = params || {};\r\n      \r\n      const endpoint = `/inventory/company/${companyId}${params.warehouseId ? `/warehouse/${params.warehouseId}` : ''}`;\r\n      \r\n      const response = await get<ApiResponse<InventoryItem[]>>(endpoint, {\r\n        params: restParams\r\n      });\r\n      \r\n      return response.data;\r\n    } catch (error) {\r\n      if (error instanceof AxiosError) {\r\n        throw new ApiError(\r\n          error.response?.data?.message || 'Failed to fetch inventory data',\r\n          error.response?.status || 500,\r\n          error.response?.data\r\n        );\r\n      }\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  async getInventoryItem(id: string): Promise<ApiResponse<InventoryItem>> {\r\n    try {\r\n      if (!id || typeof id !== 'string') {\r\n        throw new Error('Valid inventory item ID is required');\r\n      }\r\n      \r\n      const companyId = getCurrentCompanyId();\r\n      console.log('Company ID:', companyId);\r\n      // Ensure companyId is available\r\n      if (!companyId) {\r\n        throw new Error('Company ID not available');\r\n      }\r\n      \r\n      // Updated URL pattern to include company context\r\n      const response = await get<ApiResponse<InventoryItem>>(`/inventory/company/${companyId}/item/${id}`);\r\n      return response.data;\r\n    } catch (error) {\r\n      if (error instanceof AxiosError) {\r\n        throw new ApiError(\r\n          error.response?.data?.message || `Failed to fetch inventory item: ${id}`,\r\n          error.response?.status || 500,\r\n          error.response?.data\r\n        );\r\n      }\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  async createInventoryItem(data: InventoryCreateInput): Promise<ApiResponse<InventoryItem>> {\r\n    try {\r\n      // Input validation\r\n      if (!data.product_id) {\r\n        throw new Error('Product ID is required');\r\n      }\r\n      \r\n      if (!data.warehouse_id) {\r\n        throw new Error('Warehouse ID is required');\r\n      }\r\n      \r\n      if (data.quantity < 0) {\r\n        throw new Error('Quantity cannot be negative');\r\n      }\r\n      \r\n      const response = await post<ApiResponse<InventoryItem>>('/inventory', data);\r\n      return response.data;\r\n    } catch (error) {\r\n      if (error instanceof AxiosError) {\r\n        throw new ApiError(\r\n          error.response?.data?.message || 'Failed to create inventory item',\r\n          error.response?.status || 500,\r\n          error.response?.data\r\n        );\r\n      }\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  async updateInventoryItem(id: string, data: Partial<InventoryCreateInput>): Promise<ApiResponse<InventoryItem>> {\r\n    try {\r\n      if (!id || typeof id !== 'string') {\r\n        throw new Error('Valid inventory item ID is required');\r\n      }\r\n      \r\n      // Input validation for quantity if provided\r\n      if (data.quantity !== undefined && data.quantity < 0) {\r\n        throw new Error('Quantity cannot be negative');\r\n      }\r\n      \r\n      const response = await put<ApiResponse<InventoryItem>>(`/inventory/${id}`, data);\r\n      return response.data;\r\n    } catch (error) {\r\n      if (error instanceof AxiosError) {\r\n        throw new ApiError(\r\n          error.response?.data?.message || `Failed to update inventory item: ${id}`,\r\n          error.response?.status || 500,\r\n          error.response?.data\r\n        );\r\n      }\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  async adjustInventoryQuantity(companyId: string, id: string, data: StockAdjustment): Promise<ApiResponse<InventoryItem>> {\r\n    try {\r\n      if (!companyId) {\r\n        throw new Error('Company ID is required');\r\n      }\r\n      \r\n      if (!id || typeof id !== 'string') {\r\n        throw new Error('Valid inventory item ID is required');\r\n      }\r\n      \r\n      if (!data.reason || data.reason.trim() === '') {\r\n        throw new Error('Adjustment reason is required');\r\n      }\r\n      \r\n      const response = await patch<ApiResponse<InventoryItem>>(\r\n        `/inventory/company/${companyId}/item/${id}/adjust`,\r\n        data\r\n      );\r\n      return response.data;\r\n    } catch (error) {\r\n      if (error instanceof AxiosError) {\r\n        throw new ApiError(\r\n          error.response?.data?.message || `Failed to adjust inventory quantity for item: ${id}`,\r\n          error.response?.status || 500,\r\n          error.response?.data\r\n        );\r\n      }\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  async getWarehouses(companyId: string): Promise<ApiResponse<{ id: string; name: string }[]>> {\r\n    try {\r\n      if (!companyId || typeof companyId !== 'string') {\r\n        throw new Error('Invalid company ID');      }\r\n      \r\n      // Use the get function from apiClient instead of axios\r\n      const response = await get<ApiResponse<{ id: string; name: string }[]>>(`/warehouses/company/${companyId}`);\r\n      return response.data;\r\n    } catch (error) {\r\n      if (error instanceof AxiosError) {\r\n        throw new ApiError(\r\n          error.response?.data?.message || 'Failed to fetch warehouses',\r\n          error.response?.status || 500,\r\n          error.response?.data\r\n        );\r\n      }\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  async transferStock(data: StockTransfer): Promise<ApiResponse<InventoryItem>> {\r\n    try {\r\n      // Input validation\r\n      if (!data.source_warehouse_id) {\r\n        throw new Error('Source warehouse ID is required');\r\n      }\r\n      \r\n      if (!data.target_warehouse_id) {\r\n        throw new Error('Target warehouse ID is required');\r\n      }\r\n      \r\n      if (!data.product_id) {\r\n        throw new Error('Product ID is required');\r\n      }\r\n      \r\n      if (data.quantity <= 0) {\r\n        throw new Error('Transfer quantity must be greater than 0');\r\n      }\r\n      \r\n      if (data.source_warehouse_id === data.target_warehouse_id) {\r\n        throw new Error('Source and target warehouses cannot be the same');\r\n      }\r\n      \r\n      const response = await post<ApiResponse<InventoryItem>>('/inventory/transfer', data);\r\n      return response.data;\r\n    } catch (error) {\r\n      if (error instanceof AxiosError) {\r\n        throw new ApiError(\r\n          error.response?.data?.message || 'Failed to transfer stock',\r\n          error.response?.status || 500,\r\n          error.response?.data\r\n        );\r\n      }\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  async getInventorySummary(companyId: string): Promise<ApiResponse<any>> {\r\n    try {\r\n      if (!companyId) {\r\n        throw new Error('Company ID is required');\r\n      }\r\n      \r\n      const response = await get<ApiResponse<any>>(`/inventory/company/${companyId}/summary`);\r\n      return response.data;\r\n    } catch (error) {\r\n      if (error instanceof AxiosError) {\r\n        throw new ApiError(\r\n          error.response?.data?.message || 'Failed to fetch inventory summary',\r\n          error.response?.status || 500,\r\n          error.response?.data\r\n        );\r\n      }\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  async getLowStockAlerts(companyId: string): Promise<ApiResponse<InventoryItem[]>> {\r\n    try {\r\n      if (!companyId) {\r\n        throw new Error('Company ID is required');\r\n      }\r\n      \r\n      const response = await get<ApiResponse<InventoryItem[]>>(`/inventory/company/${companyId}/low-stock`);\r\n      return response.data;\r\n    } catch (error) {\r\n      if (error instanceof AxiosError) {\r\n        throw new ApiError(\r\n          error.response?.data?.message || 'Failed to fetch low stock alerts',\r\n          error.response?.status || 500,\r\n          error.response?.data\r\n        );\r\n      }\r\n      throw error;\r\n    }\r\n  },\r\n  adjustInventory(inventoryId: string, adjustmentData: { adjustment: number; reason: string; reference?: string }): Promise<ApiResponse<void>> {\r\n    return post(`/inventory/${inventoryId}/adjust`, adjustmentData);\r\n  },\r\n\r\n  async getLowStockItems(companyId: string): Promise<ApiResponse<LowStockItem[]>> {\r\n    try {\r\n      if (!companyId) {\r\n        throw new Error('Company ID is required');\r\n      }\r\n      \r\n      const response = await get<ApiResponse<LowStockItem[]>>(`/inventory/company/${companyId}/low-stock`);\r\n      return response.data;\r\n    } catch (error) {\r\n      if (error instanceof AxiosError) {\r\n        throw new ApiError(\r\n          error.response?.data?.message || 'Failed to fetch low stock items',\r\n          error.response?.status || 500,\r\n          error.response?.data\r\n        );\r\n      }\r\n      throw error;\r\n    }\r\n  },\r\n  \r\n  async getExpiringBatches(companyId: string, daysThreshold: number = 30): Promise<ApiResponse<ExpiringBatchItem[]>> {\r\n    try {\r\n      if (!companyId) {\r\n        throw new Error('Company ID is required');\r\n      }\r\n      \r\n      const response = await get<ApiResponse<ExpiringBatchItem[]>>(\r\n        `/inventory/company/${companyId}/expiring-batches`, \r\n        { params: { days: daysThreshold } }\r\n      );\r\n      return response.data;\r\n    } catch (error) {\r\n      if (error instanceof AxiosError) {\r\n        throw new ApiError(\r\n          error.response?.data?.message || 'Failed to fetch expiring batches',\r\n          error.response?.status || 500,\r\n          error.response?.data\r\n        );\r\n      }\r\n      throw error;\r\n    }\r\n  },\r\n  \r\n  async transferInventory(data: InventoryTransferRequest): Promise<ApiResponse<InventoryItem>> {\r\n    try {\r\n      if (!data.product_id) {\r\n        throw new Error('Product ID is required');\r\n      }\r\n      \r\n      if (!data.source_warehouse_id) {\r\n        throw new Error('Source warehouse ID is required');\r\n      }\r\n      \r\n      if (!data.destination_warehouse_id) {\r\n        throw new Error('Destination warehouse ID is required');\r\n      }\r\n      \r\n      if (data.quantity <= 0) {\r\n        throw new Error('Transfer quantity must be greater than 0');\r\n      }\r\n      \r\n      if (data.source_warehouse_id === data.destination_warehouse_id) {\r\n        throw new Error('Source and destination warehouses cannot be the same');\r\n      }\r\n      \r\n      const response = await post<ApiResponse<InventoryItem>>('/inventory/transfer', data);\r\n      return response.data;\r\n    } catch (error) {\r\n      if (error instanceof AxiosError) {\r\n        throw new ApiError(\r\n          error.response?.data?.message || 'Failed to transfer inventory',\r\n          error.response?.status || 500,\r\n          error.response?.data\r\n        );\r\n      }\r\n      throw error;\r\n    }\r\n  },\r\n  \r\n  async getInventoryAuditLog(inventoryId: string, params: PaginationParams = {}): Promise<ApiResponse<InventoryAuditLog[]>> {\r\n    try {\r\n      if (!inventoryId) {\r\n        throw new Error('Inventory ID is required');\r\n      }\r\n      \r\n      const response = await get<ApiResponse<InventoryAuditLog[]>>(\r\n        `/inventory/${inventoryId}/audit-log`,\r\n        { params }\r\n      );\r\n      return response.data;\r\n    } catch (error) {\r\n      if (error instanceof AxiosError) {\r\n        throw new ApiError(\r\n          error.response?.data?.message || 'Failed to fetch inventory audit log',\r\n          error.response?.status || 500,\r\n          error.response?.data\r\n        );\r\n      }\r\n      throw error;\r\n    }\r\n  },\r\n  \r\n  async getProductInventorySummary(productId: string): Promise<ApiResponse<{\r\n    product_id: string;\r\n    product_name: string;\r\n    total_quantity: number;\r\n    locations: {\r\n      warehouse_id: string;\r\n      warehouse_name: string;\r\n      quantity: number;\r\n    }[];\r\n  }>> {\r\n    try {\r\n      if (!productId) {\r\n        throw new Error('Product ID is required');\r\n      }\r\n      \r\n      const response = await get<ApiResponse<{\r\n        product_id: string;\r\n        product_name: string;\r\n        total_quantity: number;\r\n        locations: {\r\n          warehouse_id: string;\r\n          warehouse_name: string;\r\n          quantity: number;\r\n        }[];\r\n      }>>(`/inventory/product/${productId}/summary`);\r\n      return response.data;\r\n    } catch (error) {\r\n      if (error instanceof AxiosError) {\r\n        throw new ApiError(\r\n          error.response?.data?.message || 'Failed to fetch product inventory summary',\r\n          error.response?.status || 500,\r\n          error.response?.data\r\n        );\r\n      }\r\n      throw error;\r\n    }\r\n  }\r\n}\r\n","usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"d:\\All python project\\Tubex\\Frontend\\app\\src\\services\\api\\invoiceService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"d:\\All python project\\Tubex\\Frontend\\app\\src\\services\\api\\orderService.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'getWithCompany' is defined but never used. Allowed unused vars must match /^_/u.","line":1,"column":33,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":47}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { get, post, patch, del, getWithCompany, getCurrentCompanyId } from './apiClient';\r\nimport { AxiosError } from 'axios';\r\n\r\n// Custom error class for API errors\r\nexport class ApiError extends Error {\r\n  status: number;\r\n  data: any;\r\n  \r\n  constructor(message: string, status: number, data?: any) {\r\n    super(message);\r\n    this.name = 'ApiError';\r\n    this.status = status;\r\n    this.data = data;\r\n  }\r\n}\r\n\r\nexport interface OrderItem {\r\n  productId: string;\r\n  quantity: number;\r\n  unitPrice: number;\r\n  discount?: number;\r\n  product?: {\r\n    id: string;\r\n    name: string;\r\n    description: string;\r\n    base_price: number;\r\n  };\r\n}\r\n\r\nexport interface Order {\r\n  id: string;\r\n  customerId: string;\r\n  status: 'pending' | 'confirmed' | 'processing' | 'shipped' | 'delivered' | 'cancelled';\r\n  paymentStatus: 'pending' | 'paid' | 'failed' | 'refunded';\r\n  paymentMethod: string;\r\n  totalAmount: number;\r\n  createdAt: string;\r\n  updatedAt: string;\r\n  items: OrderItem[];\r\n  deliveryAddress?: {\r\n    street: string;\r\n    city: string;\r\n    state: string;\r\n    zipCode: string;\r\n    country: string;\r\n  };\r\n  metadata?: {\r\n    lastUpdated?: string;\r\n    updatedBy?: string;\r\n    previousStatus?: string;\r\n    notes?: string;\r\n  };\r\n}\r\n\r\nexport interface OrderResponse {\r\n  status: string;\r\n  data: Order;\r\n}\r\n\r\nexport interface OrdersListResponse {\r\n  orders: Order[];\r\n  pagination: {\r\n    total: number;\r\n    page: number;\r\n    limit: number;\r\n    totalPages: number;\r\n  };\r\n}\r\n\r\nexport interface OrderCreateRequest {\r\n  items: {\r\n    productId: string;\r\n    quantity: number;\r\n    discount?: number;\r\n  }[];\r\n  deliveryAddress: {\r\n    street: string;\r\n    city: string;\r\n    state: string;\r\n    zipCode: string;\r\n    country: string;\r\n  };\r\n  paymentMethod: string;\r\n  metadata?: {\r\n    notes?: string;\r\n    purchaseOrderNumber?: string;\r\n  };\r\n}\r\n\r\nexport interface OrderUpdateRequest {\r\n  status?: 'confirmed' | 'processing' | 'shipped' | 'delivered' | 'cancelled';\r\n  shipmentStatus?: 'preparing' | 'shipped' | 'delivered' | 'returned';\r\n  paymentStatus?: 'pending' | 'paid' | 'failed' | 'refunded';\r\n  paymentMethod?: string;\r\n  deliveryAddress?: {\r\n    street: string;\r\n    city: string;\r\n    state: string;\r\n    zipCode: string;\r\n    country: string;\r\n  };\r\n  metadata?: Record<string, any>;\r\n}\r\n\r\nexport interface BulkProcessOrdersRequest {\r\n  orderIds: string[];\r\n  status: 'confirmed' | 'processing' | 'shipped' | 'delivered' | 'cancelled';\r\n}\r\n\r\nexport interface BulkProcessOrdersResponse {\r\n  message: string;\r\n  processedOrders: string[];\r\n}\r\n\r\nexport interface OrderHistoryItem {\r\n  timestamp: string;\r\n  status: Order['status'];\r\n  paymentStatus: Order['paymentStatus'];\r\n  updatedBy: string;\r\n  notes?: string;\r\n}\r\n\r\nexport interface OrderHistoryResponse {\r\n  orderId: string;\r\n  history: OrderHistoryItem[];\r\n}\r\n\r\n/**\r\n * Service for handling order-related API calls\r\n */\r\nexport const orderService = {\r\n  /**\r\n   * Get all orders with pagination and filtering\r\n   */\r\n  getOrders: async (params?: any): Promise<any> => {\r\n    try {\r\n      const companyId = getCurrentCompanyId(true); // Will throw if company ID is not available\r\n      \r\n      // Updated URL pattern to match the working example pattern (/resource/company/{companyId})\r\n      const response = await get<any>(`/orders/company/${companyId}`, { \r\n        params: {\r\n          // Merge provided params with defaults\r\n          limit: 10,\r\n          page: 1,\r\n          ...params\r\n        }\r\n      });\r\n      \r\n      return response.data;\r\n    } catch (error) {\r\n      if (error instanceof AxiosError) {\r\n        throw new ApiError(\r\n          error.response?.data?.message || 'Failed to fetch orders',\r\n          error.response?.status || 500,\r\n          error.response?.data\r\n        );\r\n      }\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  /**\r\n   * Get a single order by ID\r\n   */\r\n  getOrderById: async (id: string): Promise<OrderResponse> => {\r\n    try {\r\n      const companyId = getCurrentCompanyId();\r\n      if (!companyId) {\r\n        throw new Error('Company ID not available');\r\n      }\r\n      \r\n      if (!id || typeof id !== 'string') {\r\n        throw new Error('Valid order ID is required');\r\n      }\r\n      \r\n      const response = await get<OrderResponse>(`/orders/company/${companyId}/${id}`);\r\n      return response.data;\r\n    } catch (error) {\r\n      if (error instanceof AxiosError) {\r\n        throw new ApiError(\r\n          error.response?.data?.message || `Failed to fetch order: ${id}`,\r\n          error.response?.status || 500,\r\n          error.response?.data\r\n        );\r\n      }\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  /**\r\n   * Create a new order\r\n   */\r\n  createOrder: async (orderData: OrderCreateRequest): Promise<OrderResponse> => {\r\n    try {\r\n      const companyId = getCurrentCompanyId();\r\n      if (!companyId) {\r\n        throw new Error('Company ID not available');\r\n      }\r\n      \r\n      // Basic validation\r\n      if (!orderData.items || !orderData.items.length) {\r\n        throw new Error('Order must contain at least one item');\r\n      }\r\n      \r\n      if (!orderData.deliveryAddress) {\r\n        throw new Error('Delivery address is required');\r\n      }\r\n      \r\n      const response = await post<OrderResponse>(`/orders/company/${companyId}`, orderData);\r\n      return response.data;\r\n    } catch (error) {\r\n      if (error instanceof AxiosError) {\r\n        throw new ApiError(\r\n          error.response?.data?.message || 'Failed to create order',\r\n          error.response?.status || 500,\r\n          error.response?.data\r\n        );\r\n      }\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  /**\r\n   * Update an order's status or details\r\n   */\r\n  updateOrder: async (id: string, orderData: OrderUpdateRequest): Promise<OrderResponse> => {\r\n    try {\r\n      const companyId = getCurrentCompanyId();\r\n      if (!companyId) {\r\n        throw new Error('Company ID not available');\r\n      }\r\n      \r\n      if (!id || typeof id !== 'string') {\r\n        throw new Error('Valid order ID is required');\r\n      }\r\n      \r\n      const response = await patch<OrderResponse>(`/orders/company/${companyId}/${id}`, orderData);\r\n      return response.data;\r\n    } catch (error) {\r\n      if (error instanceof AxiosError) {\r\n        throw new ApiError(\r\n          error.response?.data?.message || `Failed to update order: ${id}`,\r\n          error.response?.status || 500,\r\n          error.response?.data\r\n        );\r\n      }\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  /**\r\n   * Cancel an order\r\n   */\r\n  cancelOrder: async (id: string, reason?: string): Promise<OrderResponse> => {\r\n    try {\r\n      const companyId = getCurrentCompanyId();\r\n      if (!companyId) {\r\n        throw new Error('Company ID not available');\r\n      }\r\n      \r\n      if (!id || typeof id !== 'string') {\r\n        throw new Error('Valid order ID is required');\r\n      }\r\n      \r\n      const response = await post<OrderResponse>(`/orders/company/${companyId}/${id}/cancel`, { reason });\r\n      return response.data;\r\n    } catch (error) {\r\n      if (error instanceof AxiosError) {\r\n        throw new ApiError(\r\n          error.response?.data?.message || `Failed to cancel order: ${id}`,\r\n          error.response?.status || 500,\r\n          error.response?.data\r\n        );\r\n      }\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  /**\r\n   * Get order history with status changes\r\n   */\r\n  getOrderHistory: async (id: string): Promise<OrderHistoryResponse> => {\r\n    try {\r\n      const companyId = getCurrentCompanyId();\r\n      if (!companyId) {\r\n        throw new Error('Company ID not available');\r\n      }\r\n      \r\n      if (!id || typeof id !== 'string') {\r\n        throw new Error('Valid order ID is required');\r\n      }\r\n      \r\n      const response = await get<OrderHistoryResponse>(`/orders/company/${companyId}/${id}/history`);\r\n      return response.data;\r\n    } catch (error) {\r\n      if (error instanceof AxiosError) {\r\n        throw new ApiError(\r\n          error.response?.data?.message || `Failed to fetch order history: ${id}`,\r\n          error.response?.status || 500,\r\n          error.response?.data\r\n        );\r\n      }\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  /**\r\n   * Process multiple orders in bulk\r\n   */\r\n  bulkProcessOrders: async (data: BulkProcessOrdersRequest): Promise<BulkProcessOrdersResponse> => {\r\n    try {\r\n      const companyId = getCurrentCompanyId();\r\n      if (!companyId) {\r\n        throw new Error('Company ID not available');\r\n      }\r\n      \r\n      if (!data.orderIds || !data.orderIds.length) {\r\n        throw new Error('At least one order ID is required');\r\n      }\r\n      \r\n      if (!data.status) {\r\n        throw new Error('Status is required for bulk processing');\r\n      }\r\n      \r\n      const response = await post<BulkProcessOrdersResponse>(`/orders/company/${companyId}/bulk-process`, data);\r\n      return response.data;\r\n    } catch (error) {\r\n      if (error instanceof AxiosError) {\r\n        throw new ApiError(\r\n          error.response?.data?.message || 'Failed to process orders in bulk',\r\n          error.response?.status || 500,\r\n          error.response?.data\r\n        );\r\n      }\r\n      throw error;\r\n    }\r\n  },\r\n  \r\n  /**\r\n   * Delete an order (for admin purposes only)\r\n   */\r\n  deleteOrder: async (id: string): Promise<{success: boolean, message: string}> => {\r\n    try {\r\n      const companyId = getCurrentCompanyId();\r\n      if (!companyId) {\r\n        throw new Error('Company ID not available');\r\n      }\r\n      \r\n      if (!id || typeof id !== 'string') {\r\n        throw new Error('Valid order ID is required');\r\n      }\r\n      \r\n      const response = await del<{success: boolean, message: string}>(`/orders/company/${companyId}/${id}`);\r\n      return response.data;\r\n    } catch (error) {\r\n      if (error instanceof AxiosError) {\r\n        throw new ApiError(\r\n          error.response?.data?.message || `Failed to delete order: ${id}`,\r\n          error.response?.status || 500,\r\n          error.response?.data\r\n        );\r\n      }\r\n      throw error;\r\n    }\r\n  }\r\n}","usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"d:\\All python project\\Tubex\\Frontend\\app\\src\\services\\api\\paymentService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"d:\\All python project\\Tubex\\Frontend\\app\\src\\services\\api\\priceListService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"d:\\All python project\\Tubex\\Frontend\\app\\src\\services\\api\\productCategoryService.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'put' is defined but never used. Allowed unused vars must match /^_/u.","line":1,"column":21,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":24},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'del' is defined but never used. Allowed unused vars must match /^_/u.","line":1,"column":26,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":29}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { get, post, put, del, getCurrentCompanyId } from './apiClient';\r\nimport { AxiosError } from 'axios';\r\nimport { ApiError } from './inventoryService';\r\n\r\nexport interface ProductCategory {\r\n  id: string;\r\n  name: string;\r\n  description?: string;\r\n  company_id: string;\r\n  parent_id?: string;\r\n  created_at: string;\r\n  updated_at: string;\r\n}\r\n\r\nexport interface ProductCategoryCreateInput {\r\n  name: string;\r\n  description?: string;\r\n  parent_id?: string;\r\n}\r\n\r\nexport interface ApiResponse<T> {\r\n  data: T;\r\n  pagination?: {\r\n    total: number;\r\n    page: number;\r\n    limit: number;\r\n  };\r\n}\r\n\r\nexport const productCategoryService = {\r\n  async getCategories(params: { page?: number; limit?: number } = {}): Promise<ApiResponse<ProductCategory[]>> {\r\n    try {\r\n      const companyId = getCurrentCompanyId();\r\n      if (!companyId) {\r\n        throw new Error('Company ID not available');\r\n      }\r\n      \r\n      // Updated URL pattern - use product-categories instead of companies/companyId/product-categories\r\n      const response = await get<ApiResponse<ProductCategory[]>>(`/product-categories/company/${companyId}`, {\r\n        params\r\n      });\r\n      \r\n      return response.data;\r\n    } catch (error) {\r\n      if (error instanceof AxiosError) {\r\n        throw new ApiError(\r\n          error.response?.data?.message || 'Failed to fetch product categories',\r\n          error.response?.status || 500,\r\n          error.response?.data\r\n        );\r\n      }\r\n      throw error;\r\n    }\r\n  },\r\n  \r\n  async createCategory(data: ProductCategoryCreateInput): Promise<ApiResponse<ProductCategory>> {\r\n    try {\r\n      const companyId = getCurrentCompanyId();\r\n      if (!companyId) {\r\n        throw new Error('Company ID not available');\r\n      }\r\n      \r\n      if (!data.name || data.name.trim() === '') {\r\n        throw new Error('Category name is required');\r\n      }\r\n      \r\n      const response = await post<ApiResponse<ProductCategory>>('/product-categories', {\r\n        ...data,\r\n        company_id: companyId\r\n      });\r\n      \r\n      return response.data;\r\n    } catch (error) {\r\n      if (error instanceof AxiosError) {\r\n        throw new ApiError(\r\n          error.response?.data?.message || 'Failed to create product category',\r\n          error.response?.status || 500,\r\n          error.response?.data\r\n        );\r\n      }\r\n      throw error;\r\n    }\r\n  }\r\n  \r\n  // Add other methods as needed\r\n};\r\n","usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"d:\\All python project\\Tubex\\Frontend\\app\\src\\services\\api\\productService.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'getWithCompany' is defined but never used. Allowed unused vars must match /^_/u.","line":1,"column":31,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":45}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { get, post, put, del, getWithCompany, getCurrentCompanyId } from './apiClient';\r\nimport { AxiosError } from 'axios';\r\n\r\n// Custom error class for API errors\r\nexport class ApiError extends Error {\r\n  status: number;\r\n  data: any;\r\n  \r\n  constructor(message: string, status: number, data?: any) {\r\n    super(message);\r\n    this.name = 'ApiError';\r\n    this.status = status;\r\n    this.data = data;\r\n  }\r\n}\r\n\r\n// Add the ApiResponse interface definition\r\nexport interface ApiResponse<T> {\r\n  data: T;\r\n  status?: string;\r\n  message?: string;\r\n  pagination?: {\r\n    total: number;\r\n    page: number;\r\n    limit: number;\r\n    totalPages: number;\r\n  };\r\n}\r\n\r\nexport interface Product {\r\n  id: string;\r\n  name: string;\r\n  description: string;\r\n  base_price: number;\r\n  unit: string;\r\n  supplier_id: string;\r\n  status: 'active' | 'inactive' | 'out_of_stock';\r\n  created_at: string;\r\n  updated_at: string;\r\n  sku?: string;\r\n  dimensions?: {\r\n    length: number;\r\n    width: number;\r\n    height: number;\r\n  };\r\n  inventory?: {\r\n    quantity: number;\r\n    lowStockThreshold: number;\r\n  };\r\n  images?: string[];\r\n  specifications?: Record<string, string>;\r\n}\r\n\r\nexport interface ProductCreateInput {\r\n  name: string;\r\n  description: string;\r\n  base_price: number;\r\n  unit: string;\r\n  supplier_id: string;\r\n  status?: 'active' | 'inactive' | 'out_of_stock';\r\n}\r\n\r\nexport interface ProductUpdateInput extends Partial<ProductCreateInput> {}\r\n\r\nexport interface ProductListParams {\r\n  page?: number;\r\n  limit?: number;\r\n  supplier_id?: string;\r\n  status?: string;\r\n  search?: string;\r\n}\r\n\r\nexport interface PaginationResponse<T> {\r\n  products: T[];\r\n  pagination: {\r\n    total: number;\r\n    page: number;\r\n    limit: number;\r\n    totalPages: number;\r\n  };\r\n}\r\n\r\nexport interface ProductCategory {\r\n  id: string;\r\n  name: string;\r\n  description?: string;\r\n  created_at: string;\r\n  updated_at: string;\r\n}\r\n\r\nexport interface ProductPriceHistory {\r\n  id: string;\r\n  product_id: string;\r\n  price: number;\r\n  effective_date: string;\r\n  created_by: string;\r\n}\r\n\r\nexport interface PriceHistoryResponse {\r\n  status: string;\r\n  data: ProductPriceHistory[];\r\n  pagination?: {\r\n    total: number;\r\n    page: number;\r\n    limit: number;\r\n    totalPages: number;\r\n  };\r\n}\r\n\r\nexport const productService = {\r\n  getProducts: async (params?: any): Promise<any> => {\r\n    try {\r\n      const companyId = getCurrentCompanyId(true);\r\n      \r\n      // Use consistent URL pattern: /products/company/{companyId}\r\n      const response = await get<any>(`/products/company/${companyId}`, { \r\n        params: {\r\n          limit: 10,\r\n          page: 1,\r\n          ...params\r\n        }\r\n      });\r\n      \r\n      return response.data;\r\n    } catch (error) {\r\n      if (error instanceof AxiosError) {\r\n        throw new ApiError(\r\n          error.response?.data?.message || 'Failed to fetch products',\r\n          error.response?.status || 500,\r\n          error.response?.data\r\n        );\r\n      }\r\n      throw error;\r\n    }\r\n  },\r\n  \r\n  getProductById: async (id: string): Promise<any> => {\r\n    try {\r\n      const companyId = getCurrentCompanyId(true);\r\n      \r\n      // Use consistent URL pattern\r\n      const response = await get<any>(`/products/company/${companyId}/${id}`);\r\n      return response.data;\r\n    } catch (error) {\r\n      if (error instanceof AxiosError) {\r\n        throw new ApiError(\r\n          error.response?.data?.message || `Failed to fetch product: ${id}`,\r\n          error.response?.status || 500,\r\n          error.response?.data\r\n        );\r\n      }\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  async createProduct(data: ProductCreateInput): Promise<Product> {\r\n    try {\r\n      const companyId = getCurrentCompanyId();\r\n      if (!companyId) {\r\n        throw new Error('Company ID not available');\r\n      }\r\n      \r\n      // Input validation\r\n      if (!data.name || data.name.trim() === '') {\r\n        throw new Error('Product name is required');\r\n      }\r\n      \r\n      if (data.base_price < 0) {\r\n        throw new Error('Product price cannot be negative');\r\n      }\r\n        if (!data.supplier_id || data.supplier_id.trim() === '') {\r\n        throw new Error('Supplier ID is required');\r\n      }\r\n      \r\n      const response = await post<{data: Product}>(`/products/company/${companyId}`, data);\r\n      return response.data.data;\r\n    } catch (error) {\r\n      if (error instanceof AxiosError) {\r\n        throw new ApiError(\r\n          error.response?.data?.message || 'Failed to create product',\r\n          error.response?.status || 500,\r\n          error.response?.data\r\n        );\r\n      }\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  async updateProduct(id: string, data: ProductUpdateInput): Promise<Product> {\r\n    try {\r\n      const companyId = getCurrentCompanyId();\r\n      if (!companyId) {\r\n        throw new Error('Company ID not available');\r\n      }\r\n      \r\n      if (!id || typeof id !== 'string') {\r\n        throw new Error('Valid product ID is required');\r\n      }\r\n      \r\n      // Input validation for price if provided\r\n      if (data.base_price !== undefined && data.base_price < 0) {\r\n        throw new Error('Product price cannot be negative');\r\n      }\r\n      \r\n      const response = await put<{data: Product}>(`/products/company/${companyId}/${id}`, data);\r\n      return response.data.data;\r\n    } catch (error) {\r\n      if (error instanceof AxiosError) {\r\n        throw new ApiError(\r\n          error.response?.data?.message || `Failed to update product: ${id}`,\r\n          error.response?.status || 500,\r\n          error.response?.data\r\n        );\r\n      }\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  async deleteProduct(id: string): Promise<void> {\r\n    try {\r\n      const companyId = getCurrentCompanyId();\r\n      if (!companyId) {\r\n        throw new Error('Company ID not available');\r\n      }\r\n      \r\n      if (!id || typeof id !== 'string') {\r\n        throw new Error('Valid product ID is required');\r\n      }\r\n      \r\n      await del<{success: boolean}>(`/products/company/${companyId}/${id}`);\r\n    } catch (error) {\r\n      if (error instanceof AxiosError) {\r\n        throw new ApiError(\r\n          error.response?.data?.message || `Failed to delete product: ${id}`,\r\n          error.response?.status || 500,\r\n          error.response?.data\r\n        );\r\n      }\r\n      throw error;\r\n    }\r\n  },\r\n  \r\n  async bulkUpdateStatus(productIds: string[], status: 'active' | 'inactive' | 'out_of_stock'): Promise<void> {\r\n    try {\r\n      const companyId = getCurrentCompanyId();\r\n      if (!companyId) {\r\n        throw new Error('Company ID not available');\r\n      }\r\n      \r\n      if (!productIds || !productIds.length) {\r\n        throw new Error('At least one product ID is required');\r\n      }\r\n      \r\n      if (!status || !['active', 'inactive', 'out_of_stock'].includes(status)) {\r\n        throw new Error('Valid status is required (active, inactive, or out_of_stock)');\r\n      }\r\n      \r\n      await post<{success: boolean}>(`/products/company/${companyId}/bulk-status`, {\r\n        productIds,\r\n        status\r\n      });\r\n    } catch (error) {\r\n      if (error instanceof AxiosError) {\r\n        throw new ApiError(\r\n          error.response?.data?.message || 'Failed to update product status in bulk',\r\n          error.response?.status || 500,\r\n          error.response?.data\r\n        );\r\n      }\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  async getCategories(companyId: string): Promise<{data: ProductCategory[]}> {\r\n    try {\r\n      if (!companyId || typeof companyId !== 'string') {\r\n        throw new Error('Valid company ID is required');\r\n      }\r\n      \r\n      const response = await get<{data: ProductCategory[]}>(`/companies/${companyId}/product-categories`);\r\n      return response.data;\r\n    } catch (error) {\r\n      if (error instanceof AxiosError) {\r\n        throw new ApiError(\r\n          error.response?.data?.message || 'Failed to fetch product categories',\r\n          error.response?.status || 500,\r\n          error.response?.data\r\n        );\r\n      }\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  async getPriceHistory(productId: string, params: {page?: number; limit?: number} = {}): Promise<PriceHistoryResponse> {\r\n    try {\r\n      const companyId = getCurrentCompanyId();\r\n      if (!companyId) {\r\n        throw new Error('Company ID not available');\r\n      }\r\n      \r\n      if (!productId || typeof productId !== 'string') {\r\n        throw new Error('Valid product ID is required');\r\n      }\r\n      \r\n      const queryParams = {\r\n        page: params.page || 1,\r\n        limit: params.limit || 10\r\n      };\r\n      \r\n      const response = await get<PriceHistoryResponse>(`/products/company/${companyId}/${productId}/price-history`, { params: queryParams });\r\n      return response.data;\r\n    } catch (error) {\r\n      if (error instanceof AxiosError) {\r\n        throw new ApiError(\r\n          error.response?.data?.message || `Failed to fetch price history for product: ${productId}`,\r\n          error.response?.status || 500,\r\n          error.response?.data\r\n        );\r\n      }\r\n      throw error;\r\n    }\r\n  },\r\n  \r\n  async updateProductPrice(productId: string, price: number, effectiveDate?: string): Promise<Product> {\r\n    try {\r\n      const companyId = getCurrentCompanyId();\r\n      if (!companyId) {\r\n        throw new Error('Company ID not available');\r\n      }\r\n      \r\n      if (!productId || typeof productId !== 'string') {\r\n        throw new Error('Valid product ID is required');\r\n      }\r\n      \r\n      if (price < 0) {\r\n        throw new Error('Price cannot be negative');\r\n      }\r\n      \r\n      const data = {\r\n        price,\r\n        effective_date: effectiveDate || new Date().toISOString()\r\n      };\r\n      \r\n      const response = await post<{data: Product}>(`/products/company/${companyId}/${productId}/price`, data);\r\n      return response.data.data;\r\n    } catch (error) {\r\n      if (error instanceof AxiosError) {\r\n        throw new ApiError(\r\n          error.response?.data?.message || `Failed to update price for product: ${productId}`,\r\n          error.response?.status || 500,\r\n          error.response?.data\r\n        );\r\n      }\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  async getProductCategories(companyId: string): Promise<ApiResponse<ProductCategory[]>> {\r\n    try {\r\n      if (!companyId || typeof companyId !== 'string') {\r\n        throw new Error('Invalid company ID');\r\n      }\r\n      \r\n      // Use the get function from apiClient\r\n      const response = await get<ApiResponse<ProductCategory[]>>(`/companies/${companyId}/product-categories`);\r\n      return response.data;\r\n    } catch (error) {\r\n      if (error instanceof AxiosError) {\r\n        throw new ApiError(\r\n          error.response?.data?.message || 'Failed to fetch product categories',\r\n          error.response?.status || 500,\r\n          error.response?.data\r\n        );\r\n      }\r\n      throw error;\r\n    }\r\n  }\r\n};","usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"d:\\All python project\\Tubex\\Frontend\\app\\src\\services\\api\\quoteService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"d:\\All python project\\Tubex\\Frontend\\app\\src\\services\\api\\reportService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"d:\\All python project\\Tubex\\Frontend\\app\\src\\services\\api\\types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"d:\\All python project\\Tubex\\Frontend\\app\\src\\services\\api\\userManagementService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"d:\\All python project\\Tubex\\Frontend\\app\\src\\services\\api\\userService.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'getWithCompany' is defined but never used. Allowed unused vars must match /^_/u.","line":1,"column":33,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":47}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { get, post, patch, del, getWithCompany, getCurrentCompanyId } from './apiClient';\r\nimport { AxiosError } from 'axios';\r\n\r\n// Custom error class for API errors\r\nexport class ApiError extends Error {\r\n  status: number;\r\n  data: any;\r\n  \r\n  constructor(message: string, status: number, data?: any) {\r\n    super(message);\r\n    this.name = 'ApiError';\r\n    this.status = status;\r\n    this.data = data;\r\n  }\r\n}\r\n\r\nexport interface User {\r\n  id: string;\r\n  name: string;\r\n  email: string;\r\n  role: string;\r\n  createdAt: string;\r\n  updatedAt: string;\r\n}\r\n\r\nexport interface UserResponse {\r\n  status: string;\r\n  data: User;\r\n}\r\n\r\nexport interface UsersListResponse {\r\n  users: User[];\r\n  pagination: {\r\n    total: number;\r\n    page: number;\r\n    limit: number;\r\n    totalPages: number;\r\n  };\r\n}\r\n\r\nexport interface UserCreateRequest {\r\n  name: string;\r\n  email: string;\r\n  role: string;\r\n  password: string;\r\n}\r\n\r\nexport interface UserUpdateRequest {\r\n  name?: string;\r\n  email?: string;\r\n  role?: string;\r\n  password?: string;\r\n}\r\n\r\n/**\r\n * Service for handling user-related API calls\r\n */\r\nexport const userService = {\r\n  /**\r\n   * Get all users with pagination and filtering\r\n   */\r\n  getUsers: async (params?: any): Promise<any> => {\r\n    try {\r\n      const companyId = getCurrentCompanyId(true); // Will throw if company ID is not available\r\n      \r\n      // Use consistent URL pattern: /users/company/{companyId}\r\n      const response = await get<any>(`/users/company/${companyId}`, {\r\n        params: {\r\n          limit: 10,\r\n          page: 1,\r\n          ...params\r\n        }\r\n      });\r\n      \r\n      return response.data;\r\n    } catch (error) {\r\n      if (error instanceof AxiosError) {\r\n        throw new ApiError(\r\n          error.response?.data?.message || 'Failed to fetch users',\r\n          error.response?.status || 500,\r\n          error.response?.data\r\n        );\r\n      }\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  /**\r\n   * Get a single user by ID\r\n   */\r\n  getUserById: async (id: string): Promise<UserResponse> => {\r\n    try {\r\n      const companyId = getCurrentCompanyId();\r\n      if (!companyId) {\r\n        throw new Error('Company ID not available');\r\n      }\r\n      \r\n      if (!id || typeof id !== 'string') {\r\n        throw new Error('Valid user ID is required');\r\n      }\r\n      \r\n      const response = await get<UserResponse>(`/users/company/${companyId}/${id}`);\r\n      return response.data;\r\n    } catch (error) {\r\n      if (error instanceof AxiosError) {\r\n        throw new ApiError(\r\n          error.response?.data?.message || `Failed to fetch user: ${id}`,\r\n          error.response?.status || 500,\r\n          error.response?.data\r\n        );\r\n      }\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  /**\r\n   * Create a new user\r\n   */\r\n  createUser: async (userData: UserCreateRequest): Promise<UserResponse> => {\r\n    try {\r\n      const companyId = getCurrentCompanyId();\r\n      if (!companyId) {\r\n        throw new Error('Company ID not available');\r\n      }\r\n      \r\n      // Basic validation\r\n      if (!userData.name || !userData.email || !userData.role || !userData.password) {\r\n        throw new Error('All fields are required');\r\n      }\r\n      \r\n      const response = await post<UserResponse>(`/users/company/${companyId}`, userData);\r\n      return response.data;\r\n    } catch (error) {\r\n      if (error instanceof AxiosError) {\r\n        throw new ApiError(\r\n          error.response?.data?.message || 'Failed to create user',\r\n          error.response?.status || 500,\r\n          error.response?.data\r\n        );\r\n      }\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  /**\r\n   * Update a user's details\r\n   */\r\n  updateUser: async (id: string, userData: UserUpdateRequest): Promise<UserResponse> => {\r\n    try {\r\n      const companyId = getCurrentCompanyId();\r\n      if (!companyId) {\r\n        throw new Error('Company ID not available');\r\n      }\r\n      \r\n      if (!id || typeof id !== 'string') {\r\n        throw new Error('Valid user ID is required');\r\n      }\r\n      \r\n      const response = await patch<UserResponse>(`/users/company/${companyId}/${id}`, userData);\r\n      return response.data;\r\n    } catch (error) {\r\n      if (error instanceof AxiosError) {\r\n        throw new ApiError(\r\n          error.response?.data?.message || `Failed to update user: ${id}`,\r\n          error.response?.status || 500,\r\n          error.response?.data\r\n        );\r\n      }\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  /**\r\n   * Delete a user\r\n   */\r\n  deleteUser: async (id: string): Promise<{success: boolean, message: string}> => {\r\n    try {\r\n      const companyId = getCurrentCompanyId();\r\n      if (!companyId) {\r\n        throw new Error('Company ID not available');\r\n      }\r\n      \r\n      if (!id || typeof id !== 'string') {\r\n        throw new Error('Valid user ID is required');\r\n      }\r\n      \r\n      const response = await del<{success: boolean, message: string}>(`/users/company/${companyId}/${id}`);\r\n      return response.data;\r\n    } catch (error) {\r\n      if (error instanceof AxiosError) {\r\n        throw new ApiError(\r\n          error.response?.data?.message || `Failed to delete user: ${id}`,\r\n          error.response?.status || 500,\r\n          error.response?.data\r\n        );\r\n      }\r\n      throw error;\r\n    }\r\n  }\r\n};","usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"d:\\All python project\\Tubex\\Frontend\\app\\src\\services\\api\\warehouseService.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'axios' is defined but never used. Allowed unused vars must match /^_/u.","line":1,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":13}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import axios, { AxiosError } from 'axios';\r\nimport { get, post, put, del, getCurrentCompanyId } from './apiClient';\r\n\r\nexport interface ApiResponse<T> {\r\n  data: T;\r\n  status?: string;\r\n  message?: string;\r\n  pagination?: {\r\n    total: number;\r\n    page: number;\r\n    limit: number;\r\n    totalPages: number;\r\n  };\r\n}\r\n\r\nexport interface ContactInfo {\r\n  name?: string;\r\n  phone?: string;\r\n  email?: string;\r\n}\r\n\r\nexport interface Warehouse {\r\n  id: string;\r\n  name: string;\r\n  address: string;\r\n  capacity: number;\r\n  company_id: string;\r\n  contact_info?: ContactInfo;\r\n  type: 'main' | 'secondary' | 'distribution' | 'storage';\r\n  status: 'active' | 'inactive' | 'under_maintenance';\r\n  notes?: string;\r\n  created_at: string;\r\n  updated_at: string;\r\n}\r\n\r\nexport interface CapacityUsage {\r\n  totalCapacity: number;\r\n  currentUsage: number;\r\n  availableCapacity: number;\r\n  utilizationPercentage: number;\r\n}\r\n\r\nexport interface WarehouseCreateInput {\r\n  name: string;\r\n  address: string;\r\n  capacity?: number;\r\n  contactInfo?: ContactInfo;\r\n  type?: 'main' | 'secondary' | 'distribution' | 'storage';\r\n  notes?: string;\r\n}\r\n\r\nexport interface WarehouseUpdateInput {\r\n  name?: string;\r\n  address?: string;\r\n  capacity?: number;\r\n  contactInfo?: ContactInfo;\r\n  type?: 'main' | 'secondary' | 'distribution' | 'storage';\r\n  status?: 'active' | 'inactive' | 'under_maintenance';\r\n  notes?: string;\r\n}\r\n\r\nexport interface WarehouseListParams {\r\n  page?: number;\r\n  limit?: number;\r\n  status?: string;\r\n  search?: string;\r\n  company_id?: string;\r\n}\r\n\r\nexport interface PaginationResponse<T> {\r\n  data: T[];\r\n  pagination: {\r\n    total: number;\r\n    page: number;\r\n    limit: number;\r\n    pages: number;\r\n  };\r\n}\r\n\r\nexport class ApiError extends Error {\r\n  constructor(message: string) {\r\n    super(message);\r\n    this.name = 'ApiError';\r\n  }\r\n}\r\n\r\nexport const warehouseService = {  getWarehouses: async (params?: any): Promise<any> => {\r\n    try {\r\n      const companyId = getCurrentCompanyId(true);\r\n      \r\n      // Use consistent URL pattern with correct API path\r\n      const response = await get<any>(`/warehouses/company/${companyId}`, {\r\n        params: {\r\n          limit: 10,\r\n          page: 1,\r\n          ...params\r\n        }\r\n      });\r\n      \r\n      return response.data;\r\n    } catch (error) {\r\n      if (error instanceof AxiosError) {\r\n        throw new ApiError(error.response?.data?.message || 'Failed to fetch warehouses');\r\n      }\r\n      throw error;\r\n    }\r\n  },    getWarehouse: async (companyId: string, warehouseId: string): Promise<ApiResponse<Warehouse>> => {\r\n    if (!warehouseId || typeof warehouseId !== 'string') {\r\n      return Promise.reject(new ApiError('Valid warehouse ID is required'));\r\n    }\r\n    \r\n    // Use get from apiClient instead of direct axios call\r\n    try {\r\n      const response = await get<ApiResponse<Warehouse>>(`/warehouses/company/${companyId}/${warehouseId}`);\r\n      return response.data;\r\n    } catch (error) {\r\n      if (error instanceof AxiosError) {\r\n        throw new ApiError(error.response?.data?.message || `Failed to fetch warehouse: ${warehouseId}`);\r\n      }\r\n      throw error;\r\n    }\r\n  },  createWarehouse: async (companyId: string, data: WarehouseCreateInput): Promise<ApiResponse<Warehouse>> => {\r\n    if (!companyId || typeof companyId !== 'string' || companyId.trim() === '') {\r\n      return Promise.reject(new ApiError('Valid company ID is required'));\r\n    }\r\n    \r\n    // Use post from apiClient instead of direct axios call\r\n    try {\r\n      const response = await post<ApiResponse<Warehouse>>(`/warehouses/company/${companyId}`, data);\r\n      return response.data;\r\n    } catch (error) {\r\n      if (error instanceof AxiosError) {\r\n        throw new ApiError(error.response?.data?.message || 'Failed to create warehouse');\r\n      }\r\n      throw error;\r\n    }\r\n  },\r\n  updateWarehouse: async (companyId: string, warehouseId: string, data: WarehouseUpdateInput): Promise<ApiResponse<Warehouse>> => {\r\n    if (!warehouseId || typeof warehouseId !== 'string') {\r\n      return Promise.reject(new ApiError('Valid warehouse ID is required'));\r\n    }\r\n    \r\n    // Use put from apiClient instead of direct axios call\r\n    try {\r\n      const response = await put<ApiResponse<Warehouse>>(`/warehouses/company/${companyId}/${warehouseId}`, data);\r\n      return response.data;\r\n    } catch (error) {\r\n      if (error instanceof AxiosError) {\r\n        throw new ApiError(error.response?.data?.message || `Failed to update warehouse: ${warehouseId}`);\r\n      }\r\n      throw error;\r\n    }\r\n  },\r\n  deleteWarehouse: async (companyId: string, warehouseId: string): Promise<ApiResponse<void>> => {\r\n    if (!warehouseId || typeof warehouseId !== 'string') {\r\n      return Promise.reject(new ApiError('Valid warehouse ID is required'));\r\n    }\r\n    \r\n    // Use del from apiClient instead of direct axios call\r\n    try {\r\n      const response = await del<ApiResponse<void>>(`/warehouses/company/${companyId}/${warehouseId}`);\r\n      return response.data;\r\n    } catch (error) {\r\n      if (error instanceof AxiosError) {\r\n        throw new ApiError(error.response?.data?.message || `Failed to delete warehouse: ${warehouseId}`);\r\n      }\r\n      throw error;\r\n    }\r\n  }\r\n};\r\n","usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"d:\\All python project\\Tubex\\Frontend\\app\\src\\services\\mock\\mockData.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"d:\\All python project\\Tubex\\Frontend\\app\\src\\services\\mock\\mockService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"d:\\All python project\\Tubex\\Frontend\\app\\src\\services\\mock\\types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"d:\\All python project\\Tubex\\Frontend\\app\\src\\types\\uuid.d.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"d:\\All python project\\Tubex\\Frontend\\app\\src\\utils\\accessibilityUtils.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"d:\\All python project\\Tubex\\Frontend\\app\\src\\utils\\apiTester.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"d:\\All python project\\Tubex\\Frontend\\app\\src\\utils\\apiValidator.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"d:\\All python project\\Tubex\\Frontend\\app\\src\\utils\\companySettings.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'companySettings' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":182,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":182,"endColumn":24}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// Company settings utilities\r\nimport { Theme } from '../contexts/ThemeContext';\r\n\r\n// Define the settings structure\r\nexport interface CompanySettings {\r\n  appearance: {\r\n    darkMode: boolean;\r\n    fontSize: number;\r\n    language: string;\r\n    theme?: Partial<Theme>;\r\n  };\r\n  notifications: {\r\n    email: boolean;\r\n    push: boolean;\r\n    newOrders: boolean;\r\n    inventory: boolean;\r\n  };\r\n  integrations: {\r\n    apiKey: string;\r\n    connectedServices: Array<{\r\n      id: number;\r\n      name: string;\r\n      connected: boolean;\r\n    }>;\r\n  };\r\n}\r\n\r\n// Define a type for specific section resets\r\nexport type SettingsSection = 'appearance' | 'notifications' | 'integrations';\r\n\r\n// Default settings template\r\nexport const defaultSettings: CompanySettings = {\r\n  appearance: {\r\n    darkMode: false,\r\n    fontSize: 16,\r\n    language: 'en',\r\n  },\r\n  notifications: {\r\n    email: true,\r\n    push: true,\r\n    newOrders: true,\r\n    inventory: true,\r\n  },\r\n  integrations: {\r\n    apiKey: '',\r\n    connectedServices: [\r\n      { id: 1, name: 'Warehouse System', connected: false },\r\n      { id: 2, name: 'Accounting Software', connected: false },\r\n      { id: 3, name: 'CRM System', connected: false }\r\n    ],\r\n  },\r\n};\r\n\r\n// Keys for storage\r\nconst SETTINGS_KEY_PREFIX = 'tubex_company_';\r\nconst USER_OVERRIDE_KEY_PREFIX = 'tubex_user_';\r\n\r\n// Save company settings to localStorage\r\nexport const saveCompanySettings = (companyId: string, settings: CompanySettings): void => {\r\n  localStorage.setItem(`${SETTINGS_KEY_PREFIX}${companyId}`, JSON.stringify(settings));\r\n};\r\n\r\n// Load company settings from localStorage\r\nexport const loadCompanySettings = (companyId: string): CompanySettings => {\r\n  const savedSettings = localStorage.getItem(`${SETTINGS_KEY_PREFIX}${companyId}`);\r\n  \r\n  try {\r\n    if (savedSettings) {\r\n      const parsedSettings = JSON.parse(savedSettings);\r\n      return { ...defaultSettings, ...parsedSettings };\r\n    }\r\n  } catch (e) {\r\n    console.error('Failed to parse company settings', e);\r\n  }\r\n  \r\n  return { ...defaultSettings };\r\n};\r\n\r\n// Save user-specific overrides\r\nexport const saveUserOverrides = (userId: string, overrides: Partial<CompanySettings>): void => {\r\n  localStorage.setItem(`${USER_OVERRIDE_KEY_PREFIX}${userId}`, JSON.stringify(overrides));\r\n};\r\n\r\n// Load user-specific overrides\r\nexport const loadUserOverrides = (userId: string): Partial<CompanySettings> => {\r\n  const savedOverrides = localStorage.getItem(`${USER_OVERRIDE_KEY_PREFIX}${userId}`);\r\n  \r\n  try {\r\n    if (savedOverrides) {\r\n      return JSON.parse(savedOverrides);\r\n    }\r\n  } catch (e) {\r\n    console.error('Failed to parse user overrides', e);\r\n  }\r\n  \r\n  return {};\r\n};\r\n\r\n// Get effective settings by combining company settings with user overrides\r\nexport const getEffectiveSettings = (companyId: string, userId: string): CompanySettings => {\r\n  const companySettings = loadCompanySettings(companyId);\r\n  const userOverrides = loadUserOverrides(userId);\r\n  \r\n  // Deep merge the settings\r\n  return deepMerge(companySettings, userOverrides);\r\n};\r\n\r\n// Helper function for deep merging objects\r\nconst deepMerge = (target: any, source: any): any => {\r\n  const output = { ...target };\r\n  \r\n  if (isObject(target) && isObject(source)) {\r\n    Object.keys(source).forEach(key => {\r\n      if (isObject(source[key])) {\r\n        if (!(key in target)) {\r\n          Object.assign(output, { [key]: source[key] });\r\n        } else {\r\n          output[key] = deepMerge(target[key], source[key]);\r\n        }\r\n      } else {\r\n        Object.assign(output, { [key]: source[key] });\r\n      }\r\n    });\r\n  }\r\n  \r\n  return output;\r\n};\r\n\r\n// Helper to check if value is an object\r\nconst isObject = (item: any): boolean => {\r\n  return item && typeof item === 'object' && !Array.isArray(item);\r\n};\r\n\r\n// Get just the user overrides by comparing with company settings\r\nexport const extractUserOverrides = (companySettings: CompanySettings, userSettings: CompanySettings): Partial<CompanySettings> => {\r\n  const overrides: Partial<CompanySettings> = {};\r\n  \r\n  // Check appearance settings\r\n  const appearanceOverrides = getDifferingKeys(companySettings.appearance, userSettings.appearance);\r\n  if (Object.keys(appearanceOverrides).length > 0) {\r\n    overrides.appearance = appearanceOverrides;\r\n  }\r\n  \r\n  // Check notification settings\r\n  const notificationOverrides = getDifferingKeys(companySettings.notifications, userSettings.notifications);\r\n  if (Object.keys(notificationOverrides).length > 0) {\r\n    overrides.notifications = notificationOverrides;\r\n  }\r\n  \r\n  // Check integration settings\r\n  const integrationOverrides = getDifferingKeys(companySettings.integrations, userSettings.integrations);\r\n  if (Object.keys(integrationOverrides).length > 0) {\r\n    overrides.integrations = integrationOverrides;\r\n  }\r\n  \r\n  return overrides;\r\n};\r\n\r\n// Get differing keys between two objects\r\nconst getDifferingKeys = (base: any, compare: any): any => {\r\n  const result: any = {};\r\n  \r\n  Object.keys(compare).forEach(key => {\r\n    // If values are objects, recursively compare\r\n    if (isObject(base[key]) && isObject(compare[key])) {\r\n      const nestedDiffs = getDifferingKeys(base[key], compare[key]);\r\n      if (Object.keys(nestedDiffs).length > 0) {\r\n        result[key] = nestedDiffs;\r\n      }\r\n    }\r\n    // Otherwise, check if values are different\r\n    else if (JSON.stringify(base[key]) !== JSON.stringify(compare[key])) {\r\n      result[key] = compare[key];\r\n    }\r\n  });\r\n  \r\n  return result;\r\n};\r\n\r\n// Reset a specific section of user settings to company defaults\r\nexport const resetSection = (userId: string, companyId: string, section: SettingsSection): CompanySettings => {\r\n  const companySettings = loadCompanySettings(companyId);\r\n  const userOverrides = loadUserOverrides(userId);\r\n  \r\n  if (userOverrides[section]) {\r\n    delete userOverrides[section];\r\n    saveUserOverrides(userId, userOverrides);\r\n  }\r\n  \r\n  return getEffectiveSettings(companyId, userId);\r\n};\r\n","usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"d:\\All python project\\Tubex\\Frontend\\app\\src\\utils\\formatters.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"d:\\All python project\\Tubex\\Frontend\\app\\src\\utils\\idGenerator.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]}]
